
sdCard_imp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d78  08005d78  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08005d78  08005d78  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d78  08005d78  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000030  08005db0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08005db0  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009056  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d15  00000000  00000000  000290ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000121b3  00000000  00000000  0002be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4d5  00000000  00000000  0003e003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066f92  00000000  00000000  0004a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b146a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e0c  00000000  00000000  000b14bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c28 	.word	0x08005c28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08005c28 	.word	0x08005c28

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2200      	movs	r2, #0
 800022a:	2110      	movs	r1, #16
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fa21 	bl	8001674 <HAL_GPIO_WritePin>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	2110      	movs	r1, #16
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fa15 	bl	8001674 <HAL_GPIO_WritePin>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	701a      	strb	r2, [r3, #0]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <SPI_TxByte+0x34>)
 8000260:	0018      	movs	r0, r3
 8000262:	f002 fa53 	bl	800270c <HAL_SPI_GetState>
 8000266:	0003      	movs	r3, r0
 8000268:	2b01      	cmp	r3, #1
 800026a:	d1f8      	bne.n	800025e <SPI_TxByte+0xe>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800026c:	23fa      	movs	r3, #250	; 0xfa
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	1df9      	adds	r1, r7, #7
 8000272:	4804      	ldr	r0, [pc, #16]	; (8000284 <SPI_TxByte+0x34>)
 8000274:	2201      	movs	r2, #1
 8000276:	f001 ff1f 	bl	80020b8 <HAL_SPI_Transmit>
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000050 	.word	0x20000050

08000288 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800028e:	1dfb      	adds	r3, r7, #7
 8000290:	22ff      	movs	r2, #255	; 0xff
 8000292:	701a      	strb	r2, [r3, #0]
  data = 0;
 8000294:	1dbb      	adds	r3, r7, #6
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <SPI_RxByte+0x40>)
 800029e:	0018      	movs	r0, r3
 80002a0:	f002 fa34 	bl	800270c <HAL_SPI_GetState>
 80002a4:	0003      	movs	r3, r0
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d1f8      	bne.n	800029c <SPI_RxByte+0x14>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80002aa:	1dba      	adds	r2, r7, #6
 80002ac:	1df9      	adds	r1, r7, #7
 80002ae:	4806      	ldr	r0, [pc, #24]	; (80002c8 <SPI_RxByte+0x40>)
 80002b0:	23fa      	movs	r3, #250	; 0xfa
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2301      	movs	r3, #1
 80002b8:	f002 f856 	bl	8002368 <HAL_SPI_TransmitReceive>
  
  return data;
 80002bc:	1dbb      	adds	r3, r7, #6
 80002be:	781b      	ldrb	r3, [r3, #0]
}
 80002c0:	0018      	movs	r0, r3
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b002      	add	sp, #8
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000050 	.word	0x20000050

080002cc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80002d4:	f7ff ffd8 	bl	8000288 <SPI_RxByte>
 80002d8:	0003      	movs	r3, r0
 80002da:	001a      	movs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	701a      	strb	r2, [r3, #0]
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b002      	add	sp, #8
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <SD_ReadyWait+0x38>)
 80002f0:	2232      	movs	r2, #50	; 0x32
 80002f2:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80002f4:	f7ff ffc8 	bl	8000288 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 80002f8:	1dfc      	adds	r4, r7, #7
 80002fa:	f7ff ffc5 	bl	8000288 <SPI_RxByte>
 80002fe:	0003      	movs	r3, r0
 8000300:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2bff      	cmp	r3, #255	; 0xff
 8000308:	d004      	beq.n	8000314 <SD_ReadyWait+0x2c>
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <SD_ReadyWait+0x38>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1f1      	bne.n	80002f8 <SD_ReadyWait+0x10>
  
  return res;
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	b003      	add	sp, #12
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	2000052a 	.word	0x2000052a

08000324 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800032a:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <SD_PowerOn+0xa0>)
 800032c:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800032e:	f7ff ff83 	bl	8000238 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e005      	b.n	8000344 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8000338:	20ff      	movs	r0, #255	; 0xff
 800033a:	f7ff ff89 	bl	8000250 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	3301      	adds	r3, #1
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	693b      	ldr	r3, [r7, #16]
 8000346:	2b09      	cmp	r3, #9
 8000348:	ddf6      	ble.n	8000338 <SD_PowerOn+0x14>
  }
  
  /* SPI Chips Select */
  SELECT();
 800034a:	f7ff ff69 	bl	8000220 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2240      	movs	r2, #64	; 0x40
 8000352:	701a      	strb	r2, [r3, #0]
  cmd_arg[1] = 0;
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	705a      	strb	r2, [r3, #1]
  cmd_arg[2] = 0;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	709a      	strb	r2, [r3, #2]
  cmd_arg[3] = 0;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	70da      	strb	r2, [r3, #3]
  cmd_arg[4] = 0;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	711a      	strb	r2, [r3, #4]
  cmd_arg[5] = 0x95;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2295      	movs	r2, #149	; 0x95
 8000370:	715a      	strb	r2, [r3, #5]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e009      	b.n	800038c <SD_PowerOn+0x68>
  {
    SPI_TxByte(cmd_arg[i]);
 8000378:	1d3a      	adds	r2, r7, #4
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	18d3      	adds	r3, r2, r3
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	0018      	movs	r0, r3
 8000382:	f7ff ff65 	bl	8000250 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3301      	adds	r3, #1
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	2b05      	cmp	r3, #5
 8000390:	ddf2      	ble.n	8000378 <SD_PowerOn+0x54>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000392:	e002      	b.n	800039a <SD_PowerOn+0x76>
  {
    Count--;
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	3b01      	subs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800039a:	f7ff ff75 	bl	8000288 <SPI_RxByte>
 800039e:	0003      	movs	r3, r0
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d002      	beq.n	80003aa <SD_PowerOn+0x86>
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f4      	bne.n	8000394 <SD_PowerOn+0x70>
  }
  
  DESELECT();
 80003aa:	f7ff ff45 	bl	8000238 <DESELECT>
  SPI_TxByte(0XFF);
 80003ae:	20ff      	movs	r0, #255	; 0xff
 80003b0:	f7ff ff4e 	bl	8000250 <SPI_TxByte>
  
  PowerFlag = 1;
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <SD_PowerOn+0xa4>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	701a      	strb	r2, [r3, #0]
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b006      	add	sp, #24
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	00001fff 	.word	0x00001fff
 80003c8:	2000004d 	.word	0x2000004d

080003cc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80003d0:	4b02      	ldr	r3, [pc, #8]	; (80003dc <SD_PowerOff+0x10>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000004d 	.word	0x2000004d

080003e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80003e4:	4b02      	ldr	r3, [pc, #8]	; (80003f0 <SD_CheckPower+0x10>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
}
 80003e8:	0018      	movs	r0, r3
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	2000004d 	.word	0x2000004d

080003f4 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <SD_RxDataBlock+0x74>)
 8000400:	220a      	movs	r2, #10
 8000402:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000404:	250f      	movs	r5, #15
 8000406:	197c      	adds	r4, r7, r5
 8000408:	f7ff ff3e 	bl	8000288 <SPI_RxByte>
 800040c:	0003      	movs	r3, r0
 800040e:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8000410:	197b      	adds	r3, r7, r5
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2bff      	cmp	r3, #255	; 0xff
 8000416:	d104      	bne.n	8000422 <SD_RxDataBlock+0x2e>
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <SD_RxDataBlock+0x74>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1f0      	bne.n	8000404 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000422:	230f      	movs	r3, #15
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2bfe      	cmp	r3, #254	; 0xfe
 800042a:	d001      	beq.n	8000430 <SD_RxDataBlock+0x3c>
    return FALSE;
 800042c:	2300      	movs	r3, #0
 800042e:	e016      	b.n	800045e <SD_RxDataBlock+0x6a>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff ff48 	bl	80002cc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	0018      	movs	r0, r3
 8000444:	f7ff ff42 	bl	80002cc <SPI_RxBytePtr>
  } while(btr -= 2);
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	3b02      	subs	r3, #2
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1ed      	bne.n	8000430 <SD_RxDataBlock+0x3c>
  
  SPI_RxByte(); /* CRC 무시 */
 8000454:	f7ff ff18 	bl	8000288 <SPI_RxByte>
  SPI_RxByte();
 8000458:	f7ff ff16 	bl	8000288 <SPI_RxByte>
  
  return TRUE;
 800045c:	2301      	movs	r3, #1
}
 800045e:	0018      	movs	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	b004      	add	sp, #16
 8000464:	bdb0      	pop	{r4, r5, r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	20000529 	.word	0x20000529

0800046c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800046c:	b5b0      	push	{r4, r5, r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	000a      	movs	r2, r1
 8000476:	1cfb      	adds	r3, r7, #3
 8000478:	701a      	strb	r2, [r3, #0]
  uint8_t resp, wc;
  uint8_t i = 0;
 800047a:	230d      	movs	r3, #13
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000482:	f7ff ff31 	bl	80002e8 <SD_ReadyWait>
 8000486:	0003      	movs	r3, r0
 8000488:	2bff      	cmp	r3, #255	; 0xff
 800048a:	d001      	beq.n	8000490 <SD_TxDataBlock+0x24>
    return FALSE;
 800048c:	2300      	movs	r3, #0
 800048e:	e051      	b.n	8000534 <SD_TxDataBlock+0xc8>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	0018      	movs	r0, r3
 8000496:	f7ff fedb 	bl	8000250 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800049a:	1cfb      	adds	r3, r7, #3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2bfd      	cmp	r3, #253	; 0xfd
 80004a0:	d03e      	beq.n	8000520 <SD_TxDataBlock+0xb4>
  { 
    wc = 0;
 80004a2:	230e      	movs	r3, #14
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	607a      	str	r2, [r7, #4]
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff fecc 	bl	8000250 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	607a      	str	r2, [r7, #4]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff fec5 	bl	8000250 <SPI_TxByte>
    } while (--wc);
 80004c6:	210e      	movs	r1, #14
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	187a      	adds	r2, r7, r1
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	3a01      	subs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1e7      	bne.n	80004aa <SD_TxDataBlock+0x3e>
    
    SPI_RxByte();       /* CRC 무시 */
 80004da:	f7ff fed5 	bl	8000288 <SPI_RxByte>
    SPI_RxByte();
 80004de:	f7ff fed3 	bl	8000288 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80004e2:	e011      	b.n	8000508 <SD_TxDataBlock+0x9c>
    {			
      resp = SPI_RxByte();
 80004e4:	250f      	movs	r5, #15
 80004e6:	197c      	adds	r4, r7, r5
 80004e8:	f7ff fece 	bl	8000288 <SPI_RxByte>
 80004ec:	0003      	movs	r3, r0
 80004ee:	7023      	strb	r3, [r4, #0]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80004f0:	197b      	adds	r3, r7, r5
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	221f      	movs	r2, #31
 80004f6:	4013      	ands	r3, r2
 80004f8:	2b05      	cmp	r3, #5
 80004fa:	d00b      	beq.n	8000514 <SD_TxDataBlock+0xa8>
        break;
      
      i++;
 80004fc:	210d      	movs	r1, #13
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	187b      	adds	r3, r7, r1
 8000504:	3201      	adds	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
    while (i <= 64) 
 8000508:	230d      	movs	r3, #13
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b40      	cmp	r3, #64	; 0x40
 8000510:	d9e8      	bls.n	80004e4 <SD_TxDataBlock+0x78>
 8000512:	e000      	b.n	8000516 <SD_TxDataBlock+0xaa>
        break;
 8000514:	46c0      	nop			; (mov r8, r8)
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	f7ff feb6 	bl	8000288 <SPI_RxByte>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d0fb      	beq.n	8000518 <SD_TxDataBlock+0xac>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000520:	230f      	movs	r3, #15
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	221f      	movs	r2, #31
 8000528:	4013      	ands	r3, r2
 800052a:	2b05      	cmp	r3, #5
 800052c:	d101      	bne.n	8000532 <SD_TxDataBlock+0xc6>
    return TRUE;
 800052e:	2301      	movs	r3, #1
 8000530:	e000      	b.n	8000534 <SD_TxDataBlock+0xc8>
  else
    return FALSE;
 8000532:	2300      	movs	r3, #0
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	b004      	add	sp, #16
 800053a:	bdb0      	pop	{r4, r5, r7, pc}

0800053c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800054a:	f7ff fecd 	bl	80002e8 <SD_ReadyWait>
 800054e:	0003      	movs	r3, r0
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d001      	beq.n	8000558 <SD_SendCmd+0x1c>
    return 0xFF;
 8000554:	23ff      	movs	r3, #255	; 0xff
 8000556:	e056      	b.n	8000606 <SD_SendCmd+0xca>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff fe77 	bl	8000250 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	0e1b      	lsrs	r3, r3, #24
 8000566:	b2db      	uxtb	r3, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff fe71 	bl	8000250 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	0c1b      	lsrs	r3, r3, #16
 8000572:	b2db      	uxtb	r3, r3
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fe6b 	bl	8000250 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b2db      	uxtb	r3, r3
 8000580:	0018      	movs	r0, r3
 8000582:	f7ff fe65 	bl	8000250 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff fe60 	bl	8000250 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000590:	210f      	movs	r1, #15
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
  if (cmd == CMD0)
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b40      	cmp	r3, #64	; 0x40
 800059e:	d102      	bne.n	80005a6 <SD_SendCmd+0x6a>
    crc = 0x95; /* CRC for CMD0(0) */
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2295      	movs	r2, #149	; 0x95
 80005a4:	701a      	strb	r2, [r3, #0]
  
  if (cmd == CMD8)
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b48      	cmp	r3, #72	; 0x48
 80005ac:	d103      	bne.n	80005b6 <SD_SendCmd+0x7a>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80005ae:	230f      	movs	r3, #15
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2287      	movs	r2, #135	; 0x87
 80005b4:	701a      	strb	r2, [r3, #0]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80005b6:	230f      	movs	r3, #15
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff fe47 	bl	8000250 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b4c      	cmp	r3, #76	; 0x4c
 80005c8:	d101      	bne.n	80005ce <SD_SendCmd+0x92>
    SPI_RxByte();
 80005ca:	f7ff fe5d 	bl	8000288 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80005ce:	230e      	movs	r3, #14
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	220a      	movs	r2, #10
 80005d4:	701a      	strb	r2, [r3, #0]
  do
  {
    res = SPI_RxByte();
 80005d6:	250d      	movs	r5, #13
 80005d8:	197c      	adds	r4, r7, r5
 80005da:	f7ff fe55 	bl	8000288 <SPI_RxByte>
 80005de:	0003      	movs	r3, r0
 80005e0:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 80005e2:	197b      	adds	r3, r7, r5
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da09      	bge.n	8000600 <SD_SendCmd+0xc4>
 80005ec:	210e      	movs	r1, #14
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	187a      	adds	r2, r7, r1
 80005f2:	7812      	ldrb	r2, [r2, #0]
 80005f4:	3a01      	subs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1ea      	bne.n	80005d6 <SD_SendCmd+0x9a>
  
  return res;
 8000600:	230d      	movs	r3, #13
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000610 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	0002      	movs	r2, r0
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SD_disk_initialize+0x18>
    return STA_NOINIT;  
 8000624:	2301      	movs	r3, #1
 8000626:	e0f5      	b.n	8000814 <SD_disk_initialize+0x204>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000628:	4b7c      	ldr	r3, [pc, #496]	; (800081c <SD_disk_initialize+0x20c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	001a      	movs	r2, r3
 8000630:	2302      	movs	r3, #2
 8000632:	4013      	ands	r3, r2
 8000634:	d003      	beq.n	800063e <SD_disk_initialize+0x2e>
    return Stat;        
 8000636:	4b79      	ldr	r3, [pc, #484]	; (800081c <SD_disk_initialize+0x20c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	e0ea      	b.n	8000814 <SD_disk_initialize+0x204>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800063e:	f7ff fe71 	bl	8000324 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000642:	f7ff fded 	bl	8000220 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000646:	230e      	movs	r3, #14
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800064e:	2100      	movs	r1, #0
 8000650:	2040      	movs	r0, #64	; 0x40
 8000652:	f7ff ff73 	bl	800053c <SD_SendCmd>
 8000656:	0003      	movs	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d000      	beq.n	800065e <SD_disk_initialize+0x4e>
 800065c:	e0bf      	b.n	80007de <SD_disk_initialize+0x1ce>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800065e:	4b70      	ldr	r3, [pc, #448]	; (8000820 <SD_disk_initialize+0x210>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000664:	23d5      	movs	r3, #213	; 0xd5
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	0019      	movs	r1, r3
 800066a:	2048      	movs	r0, #72	; 0x48
 800066c:	f7ff ff66 	bl	800053c <SD_SendCmd>
 8000670:	0003      	movs	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d000      	beq.n	8000678 <SD_disk_initialize+0x68>
 8000676:	e06d      	b.n	8000754 <SD_disk_initialize+0x144>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000678:	230f      	movs	r3, #15
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e00e      	b.n	80006a0 <SD_disk_initialize+0x90>
      {
        ocr[n] = SPI_RxByte();
 8000682:	250f      	movs	r5, #15
 8000684:	197b      	adds	r3, r7, r5
 8000686:	781c      	ldrb	r4, [r3, #0]
 8000688:	f7ff fdfe 	bl	8000288 <SPI_RxByte>
 800068c:	0003      	movs	r3, r0
 800068e:	001a      	movs	r2, r3
 8000690:	2308      	movs	r3, #8
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8000696:	197b      	adds	r3, r7, r5
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	197b      	adds	r3, r7, r5
 800069c:	3201      	adds	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	230f      	movs	r3, #15
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d9eb      	bls.n	8000682 <SD_disk_initialize+0x72>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80006aa:	2208      	movs	r2, #8
 80006ac:	18bb      	adds	r3, r7, r2
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d000      	beq.n	80006b6 <SD_disk_initialize+0xa6>
 80006b4:	e093      	b.n	80007de <SD_disk_initialize+0x1ce>
 80006b6:	18bb      	adds	r3, r7, r2
 80006b8:	78db      	ldrb	r3, [r3, #3]
 80006ba:	2baa      	cmp	r3, #170	; 0xaa
 80006bc:	d000      	beq.n	80006c0 <SD_disk_initialize+0xb0>
 80006be:	e08e      	b.n	80007de <SD_disk_initialize+0x1ce>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80006c0:	2100      	movs	r1, #0
 80006c2:	2077      	movs	r0, #119	; 0x77
 80006c4:	f7ff ff3a 	bl	800053c <SD_SendCmd>
 80006c8:	0003      	movs	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d807      	bhi.n	80006de <SD_disk_initialize+0xce>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0019      	movs	r1, r3
 80006d4:	2069      	movs	r0, #105	; 0x69
 80006d6:	f7ff ff31 	bl	800053c <SD_SendCmd>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d005      	beq.n	80006ea <SD_disk_initialize+0xda>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <SD_disk_initialize+0x210>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1eb      	bne.n	80006c0 <SD_disk_initialize+0xb0>
 80006e8:	e000      	b.n	80006ec <SD_disk_initialize+0xdc>
            break; /* ACMD41 with HCS bit */
 80006ea:	46c0      	nop			; (mov r8, r8)
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80006ec:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <SD_disk_initialize+0x210>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d100      	bne.n	80006f8 <SD_disk_initialize+0xe8>
 80006f6:	e072      	b.n	80007de <SD_disk_initialize+0x1ce>
 80006f8:	2100      	movs	r1, #0
 80006fa:	207a      	movs	r0, #122	; 0x7a
 80006fc:	f7ff ff1e 	bl	800053c <SD_SendCmd>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d000      	beq.n	8000706 <SD_disk_initialize+0xf6>
 8000704:	e06b      	b.n	80007de <SD_disk_initialize+0x1ce>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000706:	230f      	movs	r3, #15
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e00e      	b.n	800072e <SD_disk_initialize+0x11e>
          {
            ocr[n] = SPI_RxByte();
 8000710:	250f      	movs	r5, #15
 8000712:	197b      	adds	r3, r7, r5
 8000714:	781c      	ldrb	r4, [r3, #0]
 8000716:	f7ff fdb7 	bl	8000288 <SPI_RxByte>
 800071a:	0003      	movs	r3, r0
 800071c:	001a      	movs	r2, r3
 800071e:	2308      	movs	r3, #8
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 8000724:	197b      	adds	r3, r7, r5
 8000726:	781a      	ldrb	r2, [r3, #0]
 8000728:	197b      	adds	r3, r7, r5
 800072a:	3201      	adds	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	230f      	movs	r3, #15
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d9eb      	bls.n	8000710 <SD_disk_initialize+0x100>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000738:	2308      	movs	r3, #8
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	001a      	movs	r2, r3
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	4013      	ands	r3, r2
 8000744:	d001      	beq.n	800074a <SD_disk_initialize+0x13a>
 8000746:	2206      	movs	r2, #6
 8000748:	e000      	b.n	800074c <SD_disk_initialize+0x13c>
 800074a:	2202      	movs	r2, #2
 800074c:	230e      	movs	r3, #14
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e044      	b.n	80007de <SD_disk_initialize+0x1ce>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000754:	2100      	movs	r1, #0
 8000756:	2077      	movs	r0, #119	; 0x77
 8000758:	f7ff fef0 	bl	800053c <SD_SendCmd>
 800075c:	0003      	movs	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d808      	bhi.n	8000774 <SD_disk_initialize+0x164>
 8000762:	2100      	movs	r1, #0
 8000764:	2069      	movs	r0, #105	; 0x69
 8000766:	f7ff fee9 	bl	800053c <SD_SendCmd>
 800076a:	0003      	movs	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d801      	bhi.n	8000774 <SD_disk_initialize+0x164>
 8000770:	2202      	movs	r2, #2
 8000772:	e000      	b.n	8000776 <SD_disk_initialize+0x166>
 8000774:	2201      	movs	r2, #1
 8000776:	230e      	movs	r3, #14
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	701a      	strb	r2, [r3, #0]
      
      do {
        if (type == 2) 
 800077c:	230e      	movs	r3, #14
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d10d      	bne.n	80007a2 <SD_disk_initialize+0x192>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000786:	2100      	movs	r1, #0
 8000788:	2077      	movs	r0, #119	; 0x77
 800078a:	f7ff fed7 	bl	800053c <SD_SendCmd>
 800078e:	0003      	movs	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d80c      	bhi.n	80007ae <SD_disk_initialize+0x19e>
 8000794:	2100      	movs	r1, #0
 8000796:	2069      	movs	r0, #105	; 0x69
 8000798:	f7ff fed0 	bl	800053c <SD_SendCmd>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d106      	bne.n	80007ae <SD_disk_initialize+0x19e>
            break; /* ACMD41 */
 80007a0:	e00c      	b.n	80007bc <SD_disk_initialize+0x1ac>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80007a2:	2100      	movs	r1, #0
 80007a4:	2041      	movs	r0, #65	; 0x41
 80007a6:	f7ff fec9 	bl	800053c <SD_SendCmd>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d005      	beq.n	80007ba <SD_disk_initialize+0x1aa>
            break; /* CMD1 */
        }
      } while (Timer1);
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <SD_disk_initialize+0x210>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1e1      	bne.n	800077c <SD_disk_initialize+0x16c>
 80007b8:	e000      	b.n	80007bc <SD_disk_initialize+0x1ac>
            break; /* CMD1 */
 80007ba:	46c0      	nop			; (mov r8, r8)
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <SD_disk_initialize+0x210>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d007      	beq.n	80007d6 <SD_disk_initialize+0x1c6>
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	0019      	movs	r1, r3
 80007cc:	2050      	movs	r0, #80	; 0x50
 80007ce:	f7ff feb5 	bl	800053c <SD_SendCmd>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d003      	beq.n	80007de <SD_disk_initialize+0x1ce>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80007d6:	230e      	movs	r3, #14
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  
  CardType = type;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <SD_disk_initialize+0x214>)
 80007e0:	240e      	movs	r4, #14
 80007e2:	193a      	adds	r2, r7, r4
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	701a      	strb	r2, [r3, #0]
  
  DESELECT();
 80007e8:	f7ff fd26 	bl	8000238 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80007ec:	f7ff fd4c 	bl	8000288 <SPI_RxByte>
  
  if (type) 
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d008      	beq.n	800080a <SD_disk_initialize+0x1fa>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <SD_disk_initialize+0x20c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2201      	movs	r2, #1
 8000800:	4393      	bics	r3, r2
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <SD_disk_initialize+0x20c>)
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e001      	b.n	800080e <SD_disk_initialize+0x1fe>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800080a:	f7ff fddf 	bl	80003cc <SD_PowerOff>
  }
  
  return Stat;
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <SD_disk_initialize+0x20c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b004      	add	sp, #16
 800081a:	bdb0      	pop	{r4, r5, r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000529 	.word	0x20000529
 8000824:	2000004c 	.word	0x2000004c

08000828 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	701a      	strb	r2, [r3, #0]
  if (drv)
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SD_disk_status+0x18>
    return STA_NOINIT; 
 800083c:	2301      	movs	r3, #1
 800083e:	e002      	b.n	8000846 <SD_disk_status+0x1e>
  
  return Stat;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <SD_disk_status+0x28>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000000 	.word	0x20000000

08000854 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	210f      	movs	r1, #15
 8000862:	187b      	adds	r3, r7, r1
 8000864:	1c02      	adds	r2, r0, #0
 8000866:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8000868:	187b      	adds	r3, r7, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <SD_disk_read+0x22>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <SD_disk_read+0x26>
    return RES_PARERR;
 8000876:	2304      	movs	r3, #4
 8000878:	e053      	b.n	8000922 <SD_disk_read+0xce>
  
  if (Stat & STA_NOINIT)
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <SD_disk_read+0xd8>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	001a      	movs	r2, r3
 8000882:	2301      	movs	r3, #1
 8000884:	4013      	ands	r3, r2
 8000886:	d001      	beq.n	800088c <SD_disk_read+0x38>
    return RES_NOTRDY;
 8000888:	2303      	movs	r3, #3
 800088a:	e04a      	b.n	8000922 <SD_disk_read+0xce>
  
  if (!(CardType & 4))
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <SD_disk_read+0xdc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	001a      	movs	r2, r3
 8000892:	2304      	movs	r3, #4
 8000894:	4013      	ands	r3, r2
 8000896:	d102      	bne.n	800089e <SD_disk_read+0x4a>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	025b      	lsls	r3, r3, #9
 800089c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800089e:	f7ff fcbf 	bl	8000220 <SELECT>
  
  if (count == 1) 
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d112      	bne.n	80008ce <SD_disk_read+0x7a>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	0019      	movs	r1, r3
 80008ac:	2051      	movs	r0, #81	; 0x51
 80008ae:	f7ff fe45 	bl	800053c <SD_SendCmd>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d12d      	bne.n	8000912 <SD_disk_read+0xbe>
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	009a      	lsls	r2, r3, #2
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fd98 	bl	80003f4 <SD_RxDataBlock>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d024      	beq.n	8000912 <SD_disk_read+0xbe>
      count = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	e021      	b.n	8000912 <SD_disk_read+0xbe>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	0019      	movs	r1, r3
 80008d2:	2052      	movs	r0, #82	; 0x52
 80008d4:	f7ff fe32 	bl	800053c <SD_SendCmd>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d11a      	bne.n	8000912 <SD_disk_read+0xbe>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	009a      	lsls	r2, r3, #2
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f7ff fd85 	bl	80003f4 <SD_RxDataBlock>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d00c      	beq.n	8000908 <SD_disk_read+0xb4>
          break;
        
        buff += 512;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	4694      	mov	ip, r2
 80008f6:	4463      	add	r3, ip
 80008f8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1ea      	bne.n	80008dc <SD_disk_read+0x88>
 8000906:	e000      	b.n	800090a <SD_disk_read+0xb6>
          break;
 8000908:	46c0      	nop			; (mov r8, r8)
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 800090a:	2100      	movs	r1, #0
 800090c:	204c      	movs	r0, #76	; 0x4c
 800090e:	f7ff fe15 	bl	800053c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000912:	f7ff fc91 	bl	8000238 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000916:	f7ff fcb7 	bl	8000288 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	1e5a      	subs	r2, r3, #1
 800091e:	4193      	sbcs	r3, r2
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b004      	add	sp, #16
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	20000000 	.word	0x20000000
 8000930:	2000004c 	.word	0x2000004c

08000934 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	210f      	movs	r1, #15
 8000942:	187b      	adds	r3, r7, r1
 8000944:	1c02      	adds	r2, r0, #0
 8000946:	701a      	strb	r2, [r3, #0]
  if (pdrv || !count)
 8000948:	187b      	adds	r3, r7, r1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <SD_disk_write+0x22>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <SD_disk_write+0x26>
    return RES_PARERR;
 8000956:	2304      	movs	r3, #4
 8000958:	e06b      	b.n	8000a32 <SD_disk_write+0xfe>
  
  if (Stat & STA_NOINIT)
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <SD_disk_write+0x108>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	001a      	movs	r2, r3
 8000962:	2301      	movs	r3, #1
 8000964:	4013      	ands	r3, r2
 8000966:	d001      	beq.n	800096c <SD_disk_write+0x38>
    return RES_NOTRDY;
 8000968:	2303      	movs	r3, #3
 800096a:	e062      	b.n	8000a32 <SD_disk_write+0xfe>
  
  if (Stat & STA_PROTECT)
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <SD_disk_write+0x108>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	001a      	movs	r2, r3
 8000974:	2304      	movs	r3, #4
 8000976:	4013      	ands	r3, r2
 8000978:	d001      	beq.n	800097e <SD_disk_write+0x4a>
    return RES_WRPRT;
 800097a:	2302      	movs	r3, #2
 800097c:	e059      	b.n	8000a32 <SD_disk_write+0xfe>
  
  if (!(CardType & 4))
 800097e:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <SD_disk_write+0x10c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	001a      	movs	r2, r3
 8000984:	2304      	movs	r3, #4
 8000986:	4013      	ands	r3, r2
 8000988:	d102      	bne.n	8000990 <SD_disk_write+0x5c>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	025b      	lsls	r3, r3, #9
 800098e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000990:	f7ff fc46 	bl	8000220 <SELECT>
  
  if (count == 1) 
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d110      	bne.n	80009bc <SD_disk_write+0x88>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0019      	movs	r1, r3
 800099e:	2058      	movs	r0, #88	; 0x58
 80009a0:	f7ff fdcc 	bl	800053c <SD_SendCmd>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d13c      	bne.n	8000a22 <SD_disk_write+0xee>
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	21fe      	movs	r1, #254	; 0xfe
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fd5d 	bl	800046c <SD_TxDataBlock>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d035      	beq.n	8000a22 <SD_disk_write+0xee>
      count = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	e032      	b.n	8000a22 <SD_disk_write+0xee>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <SD_disk_write+0x10c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	2302      	movs	r3, #2
 80009c4:	4013      	ands	r3, r2
 80009c6:	d008      	beq.n	80009da <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2077      	movs	r0, #119	; 0x77
 80009cc:	f7ff fdb6 	bl	800053c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	0019      	movs	r1, r3
 80009d4:	2057      	movs	r0, #87	; 0x57
 80009d6:	f7ff fdb1 	bl	800053c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	0019      	movs	r1, r3
 80009de:	2059      	movs	r0, #89	; 0x59
 80009e0:	f7ff fdac 	bl	800053c <SD_SendCmd>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d11c      	bne.n	8000a22 <SD_disk_write+0xee>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	21fc      	movs	r1, #252	; 0xfc
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fd3d 	bl	800046c <SD_TxDataBlock>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d00c      	beq.n	8000a10 <SD_disk_write+0xdc>
          break;
        
        buff += 512;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	4694      	mov	ip, r2
 80009fe:	4463      	add	r3, ip
 8000a00:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1ec      	bne.n	80009e8 <SD_disk_write+0xb4>
 8000a0e:	e000      	b.n	8000a12 <SD_disk_write+0xde>
          break;
 8000a10:	46c0      	nop			; (mov r8, r8)
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000a12:	21fd      	movs	r1, #253	; 0xfd
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fd29 	bl	800046c <SD_TxDataBlock>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d101      	bne.n	8000a22 <SD_disk_write+0xee>
      {        
        count = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000a22:	f7ff fc09 	bl	8000238 <DESELECT>
  SPI_RxByte();
 8000a26:	f7ff fc2f 	bl	8000288 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
}
 8000a32:	0018      	movs	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b004      	add	sp, #16
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	2000004c 	.word	0x2000004c

08000a44 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	1c02      	adds	r2, r0, #0
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	1dbb      	adds	r3, r7, #6
 8000a54:	1c0a      	adds	r2, r1, #0
 8000a56:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_ioctl+0x24>
    return RES_PARERR;
 8000a64:	2304      	movs	r3, #4
 8000a66:	e11f      	b.n	8000ca8 <SD_disk_ioctl+0x264>
  
  res = RES_ERROR;
 8000a68:	2327      	movs	r3, #39	; 0x27
 8000a6a:	18fb      	adds	r3, r7, r3
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
  
  if (ctrl == CTRL_POWER) 
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d12b      	bne.n	8000ad0 <SD_disk_ioctl+0x8c>
  {
    switch (*ptr) 
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d017      	beq.n	8000ab0 <SD_disk_ioctl+0x6c>
 8000a80:	dc21      	bgt.n	8000ac6 <SD_disk_ioctl+0x82>
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <SD_disk_ioctl+0x48>
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d00b      	beq.n	8000aa2 <SD_disk_ioctl+0x5e>
 8000a8a:	e01c      	b.n	8000ac6 <SD_disk_ioctl+0x82>
    {
    case 0:
      if (SD_CheckPower())
 8000a8c:	f7ff fca8 	bl	80003e0 <SD_CheckPower>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <SD_disk_ioctl+0x54>
        SD_PowerOff();          /* Power Off */
 8000a94:	f7ff fc9a 	bl	80003cc <SD_PowerOff>
      res = RES_OK;
 8000a98:	2327      	movs	r3, #39	; 0x27
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
      break;
 8000aa0:	e0ff      	b.n	8000ca2 <SD_disk_ioctl+0x25e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000aa2:	f7ff fc3f 	bl	8000324 <SD_PowerOn>
      res = RES_OK;
 8000aa6:	2327      	movs	r3, #39	; 0x27
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
      break;
 8000aae:	e0f8      	b.n	8000ca2 <SD_disk_ioctl+0x25e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	1c5c      	adds	r4, r3, #1
 8000ab4:	f7ff fc94 	bl	80003e0 <SD_CheckPower>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000abc:	2327      	movs	r3, #39	; 0x27
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
      break;
 8000ac4:	e0ed      	b.n	8000ca2 <SD_disk_ioctl+0x25e>
    default:
      res = RES_PARERR;
 8000ac6:	2327      	movs	r3, #39	; 0x27
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2204      	movs	r2, #4
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e0e8      	b.n	8000ca2 <SD_disk_ioctl+0x25e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000ad0:	4b77      	ldr	r3, [pc, #476]	; (8000cb0 <SD_disk_ioctl+0x26c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2301      	movs	r3, #1
 8000ada:	4013      	ands	r3, r2
 8000adc:	d001      	beq.n	8000ae2 <SD_disk_ioctl+0x9e>
      return RES_NOTRDY;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e0e2      	b.n	8000ca8 <SD_disk_ioctl+0x264>
    
    SELECT();
 8000ae2:	f7ff fb9d 	bl	8000220 <SELECT>
    
    switch (ctrl) 
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b0d      	cmp	r3, #13
 8000aec:	d900      	bls.n	8000af0 <SD_disk_ioctl+0xac>
 8000aee:	e0c8      	b.n	8000c82 <SD_disk_ioctl+0x23e>
 8000af0:	009a      	lsls	r2, r3, #2
 8000af2:	4b70      	ldr	r3, [pc, #448]	; (8000cb4 <SD_disk_ioctl+0x270>)
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000afa:	2100      	movs	r1, #0
 8000afc:	2049      	movs	r0, #73	; 0x49
 8000afe:	f7ff fd1d 	bl	800053c <SD_SendCmd>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d000      	beq.n	8000b08 <SD_disk_ioctl+0xc4>
 8000b06:	e0c1      	b.n	8000c8c <SD_disk_ioctl+0x248>
 8000b08:	240c      	movs	r4, #12
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fc70 	bl	80003f4 <SD_RxDataBlock>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d100      	bne.n	8000b1a <SD_disk_ioctl+0xd6>
 8000b18:	e0b8      	b.n	8000c8c <SD_disk_ioctl+0x248>
      {
        if ((csd[0] >> 6) == 1) 
 8000b1a:	0022      	movs	r2, r4
 8000b1c:	18bb      	adds	r3, r7, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	099b      	lsrs	r3, r3, #6
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d114      	bne.n	8000b52 <SD_disk_ioctl+0x10e>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000b28:	0011      	movs	r1, r2
 8000b2a:	18bb      	adds	r3, r7, r2
 8000b2c:	7a5b      	ldrb	r3, [r3, #9]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	7a1b      	ldrb	r3, [r3, #8]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	211e      	movs	r1, #30
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	3201      	adds	r2, #1
 8000b44:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	029a      	lsls	r2, r3, #10
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e03a      	b.n	8000bc8 <SD_disk_ioctl+0x184>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000b52:	200c      	movs	r0, #12
 8000b54:	183b      	adds	r3, r7, r0
 8000b56:	795b      	ldrb	r3, [r3, #5]
 8000b58:	220f      	movs	r2, #15
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	183b      	adds	r3, r7, r0
 8000b60:	7a9b      	ldrb	r3, [r3, #10]
 8000b62:	09db      	lsrs	r3, r3, #7
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	18d3      	adds	r3, r2, r3
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	183b      	adds	r3, r7, r0
 8000b6c:	7a5b      	ldrb	r3, [r3, #9]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2106      	movs	r1, #6
 8000b74:	400b      	ands	r3, r1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	18d3      	adds	r3, r2, r3
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	2426      	movs	r4, #38	; 0x26
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	3202      	adds	r2, #2
 8000b82:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000b84:	183b      	adds	r3, r7, r0
 8000b86:	7a1b      	ldrb	r3, [r3, #8]
 8000b88:	099b      	lsrs	r3, r3, #6
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	183b      	adds	r3, r7, r0
 8000b90:	79db      	ldrb	r3, [r3, #7]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	183b      	adds	r3, r7, r0
 8000b9e:	799b      	ldrb	r3, [r3, #6]
 8000ba0:	029b      	lsls	r3, r3, #10
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	23c0      	movs	r3, #192	; 0xc0
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	400b      	ands	r3, r1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	18d3      	adds	r3, r2, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	211e      	movs	r1, #30
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	3201      	adds	r2, #1
 8000bb6:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	881a      	ldrh	r2, [r3, #0]
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3b09      	subs	r3, #9
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000bc8:	2327      	movs	r3, #39	; 0x27
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000bd0:	e05c      	b.n	8000c8c <SD_disk_ioctl+0x248>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000bda:	2327      	movs	r3, #39	; 0x27
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
      break;
 8000be2:	e05a      	b.n	8000c9a <SD_disk_ioctl+0x256>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000be4:	f7ff fb80 	bl	80002e8 <SD_ReadyWait>
 8000be8:	0003      	movs	r3, r0
 8000bea:	2bff      	cmp	r3, #255	; 0xff
 8000bec:	d150      	bne.n	8000c90 <SD_disk_ioctl+0x24c>
        res = RES_OK;
 8000bee:	2327      	movs	r3, #39	; 0x27
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
      break;
 8000bf6:	e04b      	b.n	8000c90 <SD_disk_ioctl+0x24c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2049      	movs	r0, #73	; 0x49
 8000bfc:	f7ff fc9e 	bl	800053c <SD_SendCmd>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d147      	bne.n	8000c94 <SD_disk_ioctl+0x250>
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	2110      	movs	r1, #16
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fbf3 	bl	80003f4 <SD_RxDataBlock>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d040      	beq.n	8000c94 <SD_disk_ioctl+0x250>
        res = RES_OK;
 8000c12:	2327      	movs	r3, #39	; 0x27
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
      break;
 8000c1a:	e03b      	b.n	8000c94 <SD_disk_ioctl+0x250>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	204a      	movs	r0, #74	; 0x4a
 8000c20:	f7ff fc8c 	bl	800053c <SD_SendCmd>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d137      	bne.n	8000c98 <SD_disk_ioctl+0x254>
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fbe1 	bl	80003f4 <SD_RxDataBlock>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d030      	beq.n	8000c98 <SD_disk_ioctl+0x254>
        res = RES_OK;
 8000c36:	2327      	movs	r3, #39	; 0x27
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
      break;
 8000c3e:	e02b      	b.n	8000c98 <SD_disk_ioctl+0x254>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000c40:	2100      	movs	r1, #0
 8000c42:	207a      	movs	r0, #122	; 0x7a
 8000c44:	f7ff fc7a 	bl	800053c <SD_SendCmd>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d11a      	bne.n	8000c82 <SD_disk_ioctl+0x23e>
      {         
        for (n = 0; n < 4; n++)
 8000c4c:	2326      	movs	r3, #38	; 0x26
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e00c      	b.n	8000c70 <SD_disk_ioctl+0x22c>
        {
          *ptr++ = SPI_RxByte();
 8000c56:	6a3c      	ldr	r4, [r7, #32]
 8000c58:	1c63      	adds	r3, r4, #1
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	f7ff fb14 	bl	8000288 <SPI_RxByte>
 8000c60:	0003      	movs	r3, r0
 8000c62:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000c64:	2126      	movs	r1, #38	; 0x26
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	3201      	adds	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	2326      	movs	r3, #38	; 0x26
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d9ed      	bls.n	8000c56 <SD_disk_ioctl+0x212>
        }
        
        res = RES_OK;
 8000c7a:	2327      	movs	r3, #39	; 0x27
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
      }     
      
    default:
      res = RES_PARERR;
 8000c82:	2327      	movs	r3, #39	; 0x27
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	2204      	movs	r2, #4
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e006      	b.n	8000c9a <SD_disk_ioctl+0x256>
      break;
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	e004      	b.n	8000c9a <SD_disk_ioctl+0x256>
      break;
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	e002      	b.n	8000c9a <SD_disk_ioctl+0x256>
      break;
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	e000      	b.n	8000c9a <SD_disk_ioctl+0x256>
      break;
 8000c98:	46c0      	nop			; (mov r8, r8)
    }
    
    DESELECT();
 8000c9a:	f7ff facd 	bl	8000238 <DESELECT>
    SPI_RxByte();
 8000c9e:	f7ff faf3 	bl	8000288 <SPI_RxByte>
  }
  
  return res;
 8000ca2:	2327      	movs	r3, #39	; 0x27
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b00b      	add	sp, #44	; 0x2c
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	08005cb0 	.word	0x08005cb0

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fa52 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f860 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f8e6 	bl	8000e94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cc8:	f000 f8a6 	bl	8000e18 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ccc:	f001 fea0 	bl	8002a10 <MX_FATFS_Init>
 // BYTE work[100];
 // f_mkfs("", 1, 10);

  //SD_disk_write();

fresult = f_mount(&fs, "", 1);
 8000cd0:	4922      	ldr	r1, [pc, #136]	; (8000d5c <main+0xa4>)
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <main+0xa8>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f003 ffb2 	bl	8004c40 <f_mount>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	001a      	movs	r2, r3
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <main+0xac>)
 8000ce2:	701a      	strb	r2, [r3, #0]
fresult = f_open(&fil, "F.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);//open file
 8000ce4:	4920      	ldr	r1, [pc, #128]	; (8000d68 <main+0xb0>)
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <main+0xb4>)
 8000ce8:	220b      	movs	r2, #11
 8000cea:	0018      	movs	r0, r3
 8000cec:	f003 fff8 	bl	8004ce0 <f_open>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <main+0xac>)
 8000cf6:	701a      	strb	r2, [r3, #0]
fresult = f_write(&fil, writeData, btw, &bw); //Writing data
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <main+0xb8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <main+0xbc>)
 8000d00:	491d      	ldr	r1, [pc, #116]	; (8000d78 <main+0xc0>)
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <main+0xb4>)
 8000d04:	f004 fc0a 	bl	800551c <f_write>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <main+0xac>)
 8000d0e:	701a      	strb	r2, [r3, #0]
fresult = f_close(&fil);//close file
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <main+0xb4>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f004 fec0 	bl	8005a98 <f_close>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <main+0xac>)
 8000d1e:	701a      	strb	r2, [r3, #0]

fresult = f_open(&fil, "F.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);//open file
 8000d20:	4911      	ldr	r1, [pc, #68]	; (8000d68 <main+0xb0>)
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <main+0xb4>)
 8000d24:	2213      	movs	r2, #19
 8000d26:	0018      	movs	r0, r3
 8000d28:	f003 ffda 	bl	8004ce0 <f_open>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	001a      	movs	r2, r3
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <main+0xac>)
 8000d32:	701a      	strb	r2, [r3, #0]
fresult = f_read(&fil, readData, 10, &br);
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <main+0xc4>)
 8000d36:	4912      	ldr	r1, [pc, #72]	; (8000d80 <main+0xc8>)
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <main+0xb4>)
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	f004 fa54 	bl	80051e8 <f_read>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <main+0xac>)
 8000d46:	701a      	strb	r2, [r3, #0]
fresult = f_close(&fil);//close file
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <main+0xb4>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f004 fea4 	bl	8005a98 <f_close>
 8000d50:	0003      	movs	r3, r0
 8000d52:	001a      	movs	r2, r3
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <main+0xac>)
 8000d56:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <main+0xa0>
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	08005c40 	.word	0x08005c40
 8000d60:	200000c0 	.word	0x200000c0
 8000d64:	2000051c 	.word	0x2000051c
 8000d68:	08005c44 	.word	0x08005c44
 8000d6c:	200002f0 	.word	0x200002f0
 8000d70:	2000000e 	.word	0x2000000e
 8000d74:	20000524 	.word	0x20000524
 8000d78:	20000004 	.word	0x20000004
 8000d7c:	20000520 	.word	0x20000520
 8000d80:	200000b4 	.word	0x200000b4

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b091      	sub	sp, #68	; 0x44
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	2410      	movs	r4, #16
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2330      	movs	r3, #48	; 0x30
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f004 ff3f 	bl	8005c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2310      	movs	r3, #16
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f004 ff38 	bl	8005c18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da8:	0021      	movs	r1, r4
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2202      	movs	r2, #2
 8000dae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2201      	movs	r2, #1
 8000db4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2210      	movs	r2, #16
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	0352      	lsls	r2, r2, #13
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 fc69 	bl	80016b0 <HAL_RCC_OscConfig>
 8000dde:	1e03      	subs	r3, r0, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000de2:	f000 f8cd 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	003b      	movs	r3, r7
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	003b      	movs	r3, r7
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df8:	003b      	movs	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2100      	movs	r1, #0
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 ff6e 	bl	8001ce4 <HAL_RCC_ClockConfig>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f8b8 	bl	8000f80 <Error_Handler>
  }
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b011      	add	sp, #68	; 0x44
 8000e16:	bd90      	pop	{r4, r7, pc}

08000e18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_SPI1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e24:	2282      	movs	r2, #130	; 0x82
 8000e26:	0052      	lsls	r2, r2, #1
 8000e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e32:	22e0      	movs	r2, #224	; 0xe0
 8000e34:	00d2      	lsls	r2, r2, #3
 8000e36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e4e:	2210      	movs	r2, #16
 8000e50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e66:	2207      	movs	r2, #7
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <MX_SPI1_Init+0x74>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 f865 	bl	8001f48 <HAL_SPI_Init>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f87d 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000050 	.word	0x20000050
 8000e90:	40013000 	.word	0x40013000

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	240c      	movs	r4, #12
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	2314      	movs	r3, #20
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f004 feb7 	bl	8005c18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <MX_GPIO_Init+0xe4>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <MX_GPIO_Init+0xe4>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0289      	lsls	r1, r1, #10
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <MX_GPIO_Init+0xe4>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_GPIO_Init+0xe4>)
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <MX_GPIO_Init+0xe4>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0309      	lsls	r1, r1, #12
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <MX_GPIO_Init+0xe4>)
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	4013      	ands	r3, r2
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ee2:	2390      	movs	r3, #144	; 0x90
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2110      	movs	r1, #16
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fbc2 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ef0:	23c0      	movs	r3, #192	; 0xc0
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	0019      	movs	r1, r3
 8000efa:	f000 fbbb 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2290      	movs	r2, #144	; 0x90
 8000f08:	0352      	lsls	r2, r2, #13
 8000f0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f12:	193a      	adds	r2, r7, r4
 8000f14:	2390      	movs	r3, #144	; 0x90
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 fa3a 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	2210      	movs	r2, #16
 8000f24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	2201      	movs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	193a      	adds	r2, r7, r4
 8000f3a:	2390      	movs	r3, #144	; 0x90
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 fa27 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000f46:	0021      	movs	r1, r4
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	22c0      	movs	r2, #192	; 0xc0
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2201      	movs	r2, #1
 8000f54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000f66:	0019      	movs	r1, r3
 8000f68:	0010      	movs	r0, r2
 8000f6a:	f000 fa13 	bl	8001394 <HAL_GPIO_Init>

}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b009      	add	sp, #36	; 0x24
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000800 	.word	0x48000800

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_MspInit+0x44>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	619a      	str	r2, [r3, #24]
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fac:	69da      	ldr	r2, [r3, #28]
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	0549      	lsls	r1, r1, #21
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	61da      	str	r2, [r3, #28]
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_MspInit+0x44>)
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	055b      	lsls	r3, r3, #21
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b08b      	sub	sp, #44	; 0x2c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	2414      	movs	r4, #20
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	2314      	movs	r3, #20
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	f004 fe16 	bl	8005c18 <memset>
  if(hspi->Instance==SPI1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_SPI_MspInit+0x90>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d132      	bne.n	800105c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0149      	lsls	r1, r1, #5
 8001000:	430a      	orrs	r2, r1
 8001002:	619a      	str	r2, [r3, #24]
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	015b      	lsls	r3, r3, #5
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0289      	lsls	r1, r1, #10
 800101c:	430a      	orrs	r2, r1
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	029b      	lsls	r3, r3, #10
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800102e:	0021      	movs	r1, r4
 8001030:	187b      	adds	r3, r7, r1
 8001032:	22e0      	movs	r2, #224	; 0xe0
 8001034:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2202      	movs	r2, #2
 800103a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2203      	movs	r2, #3
 8001046:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	187a      	adds	r2, r7, r1
 8001050:	2390      	movs	r3, #144	; 0x90
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f000 f99c 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b00b      	add	sp, #44	; 0x2c
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40013000 	.word	0x40013000
 8001068:	40021000 	.word	0x40021000

0800106c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	if(Timer1 > 0){
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <SDTimer_Handler+0x3c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <SDTimer_Handler+0x1c>
		Timer1--;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <SDTimer_Handler+0x3c>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3b01      	subs	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <SDTimer_Handler+0x3c>)
 8001086:	701a      	strb	r2, [r3, #0]
	}
	if(Timer2 > 0){
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <SDTimer_Handler+0x40>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <SDTimer_Handler+0x34>
		Timer2--;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SDTimer_Handler+0x40>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3b01      	subs	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <SDTimer_Handler+0x40>)
 800109e:	701a      	strb	r2, [r3, #0]
	}

}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20000529 	.word	0x20000529
 80010ac:	2000052a 	.word	0x2000052a

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <SysTick_Handler+0x30>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SysTick_Handler+0x30>)
 80010e0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <SysTick_Handler+0x30>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d904      	bls.n	80010f6 <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Handler+0x30>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80010f2:	f7ff ffbb 	bl	800106c <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f6:	f000 f87d 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000528 	.word	0x20000528

08001104 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800113a:	f7ff ffe3 	bl	8001104 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800113e:	f004 fd47 	bl	8005bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001142:	f7ff fdb9 	bl	8000cb8 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001154:	08005d80 	.word	0x08005d80
  ldr r2, =_sbss
 8001158:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800115c:	20000564 	.word	0x20000564

08001160 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_COMP_IRQHandler>
	...

08001164 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <HAL_Init+0x24>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_Init+0x24>)
 800116e:	2110      	movs	r1, #16
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f809 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117a:	f7ff ff07 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40022000 	.word	0x40022000

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_InitTick+0x5c>)
 8001196:	681c      	ldr	r4, [r3, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_InitTick+0x60>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	0019      	movs	r1, r3
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	0098      	lsls	r0, r3, #2
 80011a2:	f7fe ffb1 	bl	8000108 <__udivsi3>
 80011a6:	0003      	movs	r3, r0
 80011a8:	0019      	movs	r1, r3
 80011aa:	0020      	movs	r0, r4
 80011ac:	f7fe ffac 	bl	8000108 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f8e1 	bl	800137a <HAL_SYSTICK_Config>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00f      	b.n	80011e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d80b      	bhi.n	80011de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	425b      	negs	r3, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 f8be 	bl	8001350 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_InitTick+0x64>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b003      	add	sp, #12
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	20000010 	.word	0x20000010
 80011ec:	20000018 	.word	0x20000018
 80011f0:	20000014 	.word	0x20000014

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	18d2      	adds	r2, r2, r3
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	20000018 	.word	0x20000018
 8001214:	2000052c 	.word	0x2000052c

08001218 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	2000052c 	.word	0x2000052c

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b7f      	cmp	r3, #127	; 0x7f
 8001240:	d828      	bhi.n	8001294 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <__NVIC_SetPriority+0xd4>)
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b25b      	sxtb	r3, r3
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	33c0      	adds	r3, #192	; 0xc0
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	589b      	ldr	r3, [r3, r2]
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	2203      	movs	r2, #3
 800125a:	400a      	ands	r2, r1
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	43d2      	mvns	r2, r2
 8001266:	401a      	ands	r2, r3
 8001268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	401a      	ands	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	2303      	movs	r3, #3
 800127a:	4003      	ands	r3, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	481f      	ldr	r0, [pc, #124]	; (8001300 <__NVIC_SetPriority+0xd4>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	430a      	orrs	r2, r1
 800128c:	33c0      	adds	r3, #192	; 0xc0
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001292:	e031      	b.n	80012f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <__NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	0019      	movs	r1, r3
 800129c:	230f      	movs	r3, #15
 800129e:	400b      	ands	r3, r1
 80012a0:	3b08      	subs	r3, #8
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3306      	adds	r3, #6
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	18d3      	adds	r3, r2, r3
 80012aa:	3304      	adds	r3, #4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1dfa      	adds	r2, r7, #7
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	0011      	movs	r1, r2
 80012b4:	2203      	movs	r2, #3
 80012b6:	400a      	ands	r2, r1
 80012b8:	00d2      	lsls	r2, r2, #3
 80012ba:	21ff      	movs	r1, #255	; 0xff
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	22ff      	movs	r2, #255	; 0xff
 80012cc:	401a      	ands	r2, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	4003      	ands	r3, r0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <__NVIC_SetPriority+0xd8>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	001c      	movs	r4, r3
 80012e4:	230f      	movs	r3, #15
 80012e6:	4023      	ands	r3, r4
 80012e8:	3b08      	subs	r3, #8
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	430a      	orrs	r2, r1
 80012ee:	3306      	adds	r3, #6
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	18c3      	adds	r3, r0, r3
 80012f4:	3304      	adds	r3, #4
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b003      	add	sp, #12
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	045b      	lsls	r3, r3, #17
 8001318:	429a      	cmp	r2, r3
 800131a:	d301      	bcc.n	8001320 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131c:	2301      	movs	r3, #1
 800131e:	e010      	b.n	8001342 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SysTick_Config+0x44>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	3a01      	subs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001328:	2301      	movs	r3, #1
 800132a:	425b      	negs	r3, r3
 800132c:	2103      	movs	r1, #3
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff ff7c 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x44>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x44>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	210f      	movs	r1, #15
 800135c:	187b      	adds	r3, r7, r1
 800135e:	1c02      	adds	r2, r0, #0
 8001360:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	187b      	adds	r3, r7, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	0011      	movs	r1, r2
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b004      	add	sp, #16
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ffbf 	bl	8001308 <SysTick_Config>
 800138a:	0003      	movs	r3, r0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e14f      	b.n	8001644 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4091      	lsls	r1, r2
 80013ae:	000a      	movs	r2, r1
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <HAL_GPIO_Init+0x28>
 80013ba:	e140      	b.n	800163e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	2201      	movs	r2, #1
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	2b03      	cmp	r3, #3
 8001440:	d017      	beq.n	8001472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	4013      	ands	r3, r2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d123      	bne.n	80014c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	58d3      	ldr	r3, [r2, r3]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2207      	movs	r2, #7
 8001490:	4013      	ands	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2107      	movs	r1, #7
 80014aa:	400b      	ands	r3, r1
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	6939      	ldr	r1, [r7, #16]
 80014c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2203      	movs	r2, #3
 80014e4:	401a      	ands	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	4013      	ands	r3, r2
 8001504:	d100      	bne.n	8001508 <HAL_GPIO_Init+0x174>
 8001506:	e09a      	b.n	800163e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001508:	4b54      	ldr	r3, [pc, #336]	; (800165c <HAL_GPIO_Init+0x2c8>)
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_GPIO_Init+0x2c8>)
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	619a      	str	r2, [r3, #24]
 8001514:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_GPIO_Init+0x2c8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2201      	movs	r2, #1
 800151a:	4013      	ands	r3, r2
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001520:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	589b      	ldr	r3, [r3, r2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2203      	movs	r2, #3
 8001532:	4013      	ands	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	2390      	movs	r3, #144	; 0x90
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	429a      	cmp	r2, r3
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x1e2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a44      	ldr	r2, [pc, #272]	; (8001664 <HAL_GPIO_Init+0x2d0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x1de>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a43      	ldr	r2, [pc, #268]	; (8001668 <HAL_GPIO_Init+0x2d4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x1da>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a42      	ldr	r2, [pc, #264]	; (800166c <HAL_GPIO_Init+0x2d8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x1d6>
 8001566:	2303      	movs	r3, #3
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x1e4>
 800156a:	2305      	movs	r3, #5
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x1e4>
 800156e:	2302      	movs	r3, #2
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x1e4>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x1e4>
 8001576:	2300      	movs	r3, #0
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	2103      	movs	r1, #3
 800157c:	400a      	ands	r2, r1
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	4093      	lsls	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001588:	4935      	ldr	r1, [pc, #212]	; (8001660 <HAL_GPIO_Init+0x2cc>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3302      	adds	r3, #2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43da      	mvns	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	4013      	ands	r3, r2
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43da      	mvns	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	4013      	ands	r3, r2
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	035b      	lsls	r3, r3, #13
 8001602:	4013      	ands	r3, r2
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43da      	mvns	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	039b      	lsls	r3, r3, #14
 800162c:	4013      	ands	r3, r2
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_GPIO_Init+0x2dc>)
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	40da      	lsrs	r2, r3
 800164c:	1e13      	subs	r3, r2, #0
 800164e:	d000      	beq.n	8001652 <HAL_GPIO_Init+0x2be>
 8001650:	e6a8      	b.n	80013a4 <HAL_GPIO_Init+0x10>
  } 
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b006      	add	sp, #24
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000800 	.word	0x48000800
 800166c:	48000c00 	.word	0x48000c00
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	0008      	movs	r0, r1
 800167e:	0011      	movs	r1, r2
 8001680:	1cbb      	adds	r3, r7, #2
 8001682:	1c02      	adds	r2, r0, #0
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	1c7b      	adds	r3, r7, #1
 8001688:	1c0a      	adds	r2, r1, #0
 800168a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168c:	1c7b      	adds	r3, r7, #1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001694:	1cbb      	adds	r3, r7, #2
 8001696:	881a      	ldrh	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169e:	1cbb      	adds	r3, r7, #2
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e301      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x1e>
 80016cc:	e08d      	b.n	80017ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ce:	4bc3      	ldr	r3, [pc, #780]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	220c      	movs	r2, #12
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d00e      	beq.n	80016f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016da:	4bc0      	ldr	r3, [pc, #768]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	220c      	movs	r2, #12
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x64>
 80016e6:	4bbd      	ldr	r3, [pc, #756]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	025b      	lsls	r3, r3, #9
 80016ee:	401a      	ands	r2, r3
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	025b      	lsls	r3, r3, #9
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10d      	bne.n	8001714 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	4bb8      	ldr	r3, [pc, #736]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	4013      	ands	r3, r2
 8001702:	d100      	bne.n	8001706 <HAL_RCC_OscConfig+0x56>
 8001704:	e070      	b.n	80017e8 <HAL_RCC_OscConfig+0x138>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d000      	beq.n	8001710 <HAL_RCC_OscConfig+0x60>
 800170e:	e06b      	b.n	80017e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e2d8      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x7c>
 800171c:	4baf      	ldr	r3, [pc, #700]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4bae      	ldr	r3, [pc, #696]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	0249      	lsls	r1, r1, #9
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e02f      	b.n	800178c <HAL_RCC_OscConfig+0xdc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <HAL_RCC_OscConfig+0x9e>
 8001734:	4ba9      	ldr	r3, [pc, #676]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4ba8      	ldr	r3, [pc, #672]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800173a:	49a9      	ldr	r1, [pc, #676]	; (80019e0 <HAL_RCC_OscConfig+0x330>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4ba6      	ldr	r3, [pc, #664]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4ba5      	ldr	r3, [pc, #660]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001746:	49a7      	ldr	r1, [pc, #668]	; (80019e4 <HAL_RCC_OscConfig+0x334>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e01e      	b.n	800178c <HAL_RCC_OscConfig+0xdc>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10e      	bne.n	8001774 <HAL_RCC_OscConfig+0xc4>
 8001756:	4ba1      	ldr	r3, [pc, #644]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4ba0      	ldr	r3, [pc, #640]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	02c9      	lsls	r1, r1, #11
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b9c      	ldr	r3, [pc, #624]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	0249      	lsls	r1, r1, #9
 800176e:	430a      	orrs	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xdc>
 8001774:	4b99      	ldr	r3, [pc, #612]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b98      	ldr	r3, [pc, #608]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800177a:	4999      	ldr	r1, [pc, #612]	; (80019e0 <HAL_RCC_OscConfig+0x330>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b96      	ldr	r3, [pc, #600]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b95      	ldr	r3, [pc, #596]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001786:	4997      	ldr	r1, [pc, #604]	; (80019e4 <HAL_RCC_OscConfig+0x334>)
 8001788:	400a      	ands	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d014      	beq.n	80017be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fd40 	bl	8001218 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fd3b 	bl	8001218 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e28a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b0:	4b8a      	ldr	r3, [pc, #552]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0xee>
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fd2b 	bl	8001218 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c8:	f7ff fd26 	bl	8001218 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e275      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017da:	4b80      	ldr	r3, [pc, #512]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x118>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d100      	bne.n	80017f6 <HAL_RCC_OscConfig+0x146>
 80017f4:	e069      	b.n	80018ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017f6:	4b79      	ldr	r3, [pc, #484]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	220c      	movs	r2, #12
 80017fc:	4013      	ands	r3, r2
 80017fe:	d00b      	beq.n	8001818 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001800:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	220c      	movs	r2, #12
 8001806:	4013      	ands	r3, r2
 8001808:	2b08      	cmp	r3, #8
 800180a:	d11c      	bne.n	8001846 <HAL_RCC_OscConfig+0x196>
 800180c:	4b73      	ldr	r3, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	025b      	lsls	r3, r3, #9
 8001814:	4013      	ands	r3, r2
 8001816:	d116      	bne.n	8001846 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001818:	4b70      	ldr	r3, [pc, #448]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x17e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e24b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	22f8      	movs	r2, #248	; 0xf8
 8001834:	4393      	bics	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	00da      	lsls	r2, r3, #3
 800183e:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001844:	e041      	b.n	80018ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d024      	beq.n	8001898 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184e:	4b63      	ldr	r3, [pc, #396]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b62      	ldr	r3, [pc, #392]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fcdd 	bl	8001218 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fcd8 	bl	8001218 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e227      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b59      	ldr	r3, [pc, #356]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d0f1      	beq.n	8001864 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b56      	ldr	r3, [pc, #344]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	22f8      	movs	r2, #248	; 0xf8
 8001886:	4393      	bics	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00da      	lsls	r2, r3, #3
 8001890:	4b52      	ldr	r3, [pc, #328]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e018      	b.n	80018ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001898:	4b50      	ldr	r3, [pc, #320]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800189e:	2101      	movs	r1, #1
 80018a0:	438a      	bics	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fcb8 	bl	8001218 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fcb3 	bl	8001218 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e202      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d1f1      	bne.n	80018ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2208      	movs	r2, #8
 80018d0:	4013      	ands	r3, r2
 80018d2:	d036      	beq.n	8001942 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d019      	beq.n	8001910 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018dc:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80018de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e0:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fc96 	bl	8001218 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7ff fc91 	bl	8001218 <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1e0      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d0f1      	beq.n	80018f2 <HAL_RCC_OscConfig+0x242>
 800190e:	e018      	b.n	8001942 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001910:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001916:	2101      	movs	r1, #1
 8001918:	438a      	bics	r2, r1
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fc7c 	bl	8001218 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fc77 	bl	8001218 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1c6      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d1f1      	bne.n	8001926 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2204      	movs	r2, #4
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x29e>
 800194c:	e0b4      	b.n	8001ab8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	201f      	movs	r0, #31
 8001950:	183b      	adds	r3, r7, r0
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	055b      	lsls	r3, r3, #21
 800195e:	4013      	ands	r3, r2
 8001960:	d110      	bne.n	8001984 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0549      	lsls	r1, r1, #21
 800196c:	430a      	orrs	r2, r1
 800196e:	61da      	str	r2, [r3, #28]
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 8001972:	69da      	ldr	r2, [r3, #28]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	055b      	lsls	r3, r3, #21
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800197e:	183b      	adds	r3, r7, r0
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_RCC_OscConfig+0x338>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4013      	ands	r3, r2
 800198e:	d11a      	bne.n	80019c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_RCC_OscConfig+0x338>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_RCC_OscConfig+0x338>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7ff fc3b 	bl	8001218 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7ff fc36 	bl	8001218 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e185      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x338>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d10e      	bne.n	80019ec <HAL_RCC_OscConfig+0x33c>
 80019ce:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_RCC_OscConfig+0x32c>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	621a      	str	r2, [r3, #32]
 80019da:	e035      	b.n	8001a48 <HAL_RCC_OscConfig+0x398>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	fffeffff 	.word	0xfffeffff
 80019e4:	fffbffff 	.word	0xfffbffff
 80019e8:	40007000 	.word	0x40007000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x35e>
 80019f4:	4bb6      	ldr	r3, [pc, #728]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	4bb5      	ldr	r3, [pc, #724]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	438a      	bics	r2, r1
 80019fe:	621a      	str	r2, [r3, #32]
 8001a00:	4bb3      	ldr	r3, [pc, #716]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4bb2      	ldr	r3, [pc, #712]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a06:	2104      	movs	r1, #4
 8001a08:	438a      	bics	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
 8001a0c:	e01c      	b.n	8001a48 <HAL_RCC_OscConfig+0x398>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x380>
 8001a16:	4bae      	ldr	r3, [pc, #696]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a18:	6a1a      	ldr	r2, [r3, #32]
 8001a1a:	4bad      	ldr	r3, [pc, #692]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	621a      	str	r2, [r3, #32]
 8001a22:	4bab      	ldr	r3, [pc, #684]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	4baa      	ldr	r3, [pc, #680]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	621a      	str	r2, [r3, #32]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0x398>
 8001a30:	4ba7      	ldr	r3, [pc, #668]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	4ba6      	ldr	r3, [pc, #664]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	438a      	bics	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]
 8001a3c:	4ba4      	ldr	r3, [pc, #656]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	4ba3      	ldr	r3, [pc, #652]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d014      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fbe2 	bl	8001218 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	e009      	b.n	8001a6e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fbdd 	bl	8001218 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	4a9b      	ldr	r2, [pc, #620]	; (8001cd4 <HAL_RCC_OscConfig+0x624>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e12b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b98      	ldr	r3, [pc, #608]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3aa>
 8001a78:	e013      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fbcd 	bl	8001218 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fbc8 	bl	8001218 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a91      	ldr	r2, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e116      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa2:	231f      	movs	r3, #31
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aac:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	4989      	ldr	r1, [pc, #548]	; (8001cd8 <HAL_RCC_OscConfig+0x628>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d12a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ace:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ad6:	4b7e      	ldr	r3, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ada:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fb99 	bl	8001218 <HAL_GetTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aec:	f7ff fb94 	bl	8001218 <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0e3      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001afe:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f1      	beq.n	8001aec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b08:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0c:	22f8      	movs	r2, #248	; 0xf8
 8001b0e:	4393      	bics	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	00da      	lsls	r2, r3, #3
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1e:	e034      	b.n	8001b8a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	3305      	adds	r3, #5
 8001b26:	d111      	bne.n	8001b4c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b28:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	438a      	bics	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	22f8      	movs	r2, #248	; 0xf8
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	00da      	lsls	r2, r3, #3
 8001b44:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4a:	e01e      	b.n	8001b8a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b4c:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b50:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b52:	2104      	movs	r1, #4
 8001b54:	430a      	orrs	r2, r1
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b58:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb58 	bl	8001218 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b6e:	f7ff fb53 	bl	8001218 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0a2      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f1      	bne.n	8001b6e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <HAL_RCC_OscConfig+0x4e4>
 8001b92:	e097      	b.n	8001cc4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b94:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	220c      	movs	r2, #12
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d100      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4f2>
 8001ba0:	e06b      	b.n	8001c7a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d14c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001bb0:	494a      	ldr	r1, [pc, #296]	; (8001cdc <HAL_RCC_OscConfig+0x62c>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fb2f 	bl	8001218 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff fb2a 	bl	8001218 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e079      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	049b      	lsls	r3, r3, #18
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	220f      	movs	r2, #15
 8001be4:	4393      	bics	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bec:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x630>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	431a      	orrs	r2, r3
 8001c06:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0449      	lsls	r1, r1, #17
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fafd 	bl	8001218 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff faf8 	bl	8001218 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e047      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	049b      	lsls	r3, r3, #18
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x574>
 8001c42:	e03f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c4a:	4924      	ldr	r1, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x62c>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fae2 	bl	8001218 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fadd 	bl	8001218 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e02c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	049b      	lsls	r3, r3, #18
 8001c74:	4013      	ands	r3, r2
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5aa>
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e01f      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	025b      	lsls	r3, r3, #9
 8001c98:	401a      	ands	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	23f0      	movs	r3, #240	; 0xf0
 8001cb4:	039b      	lsls	r3, r3, #14
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b008      	add	sp, #32
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	00001388 	.word	0x00001388
 8001cd8:	efffffff 	.word	0xefffffff
 8001cdc:	feffffff 	.word	0xfeffffff
 8001ce0:	ffc2ffff 	.word	0xffc2ffff

08001ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0b3      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d911      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	4b55      	ldr	r3, [pc, #340]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e09a      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4013      	ands	r3, r2
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d006      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d3e:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d44:	21e0      	movs	r1, #224	; 0xe0
 8001d46:	00c9      	lsls	r1, r1, #3
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	22f0      	movs	r2, #240	; 0xf0
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d040      	beq.n	8001dec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d114      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06e      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	049b      	lsls	r3, r3, #18
 8001d92:	4013      	ands	r3, r2
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e062      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05b      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff fa2c 	bl	8001218 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7ff fa27 	bl	8001218 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_RCC_ClockConfig+0x18c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e042      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	220c      	movs	r2, #12
 8001de0:	401a      	ands	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1ec      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d211      	bcs.n	8001e1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4393      	bics	r3, r2
 8001e02:	0019      	movs	r1, r3
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_RCC_ClockConfig+0x184>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e020      	b.n	8001e60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2204      	movs	r2, #4
 8001e24:	4013      	ands	r3, r2
 8001e26:	d009      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_RCC_ClockConfig+0x190>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e3c:	f000 f820 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e40:	0001      	movs	r1, r0
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_ClockConfig+0x188>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	220f      	movs	r2, #15
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x194>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	000a      	movs	r2, r1
 8001e52:	40da      	lsrs	r2, r3
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x198>)
 8001e56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff f997 	bl	800118c <HAL_InitTick>
  
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	00001388 	.word	0x00001388
 8001e74:	fffff8ff 	.word	0xfffff8ff
 8001e78:	08005ce8 	.word	0x08005ce8
 8001e7c:	20000010 	.word	0x20000010

08001e80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b08f      	sub	sp, #60	; 0x3c
 8001e84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e86:	2314      	movs	r3, #20
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e8e:	c313      	stmia	r3!, {r0, r1, r4}
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e9a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d002      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x4a>
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d003      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x50>
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ece:	e02d      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	0c9b      	lsrs	r3, r3, #18
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2214      	movs	r2, #20
 8001eda:	18ba      	adds	r2, r7, r2
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	1d3a      	adds	r2, r7, #4
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	025b      	lsls	r3, r3, #9
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001efc:	f7fe f904 	bl	8000108 <__udivsi3>
 8001f00:	0003      	movs	r3, r0
 8001f02:	001a      	movs	r2, r3
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	4353      	muls	r3, r2
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0e:	000a      	movs	r2, r1
 8001f10:	0152      	lsls	r2, r2, #5
 8001f12:	1a52      	subs	r2, r2, r1
 8001f14:	0193      	lsls	r3, r2, #6
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	185b      	adds	r3, r3, r1
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f24:	e002      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b00f      	add	sp, #60	; 0x3c
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	08005c4c 	.word	0x08005c4c
 8001f3c:	08005c5c 	.word	0x08005c5c
 8001f40:	40021000 	.word	0x40021000
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0a8      	b.n	80020ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	2382      	movs	r3, #130	; 0x82
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d009      	beq.n	8001f82 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	61da      	str	r2, [r3, #28]
 8001f74:	e005      	b.n	8001f82 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	225d      	movs	r2, #93	; 0x5d
 8001f8c:	5c9b      	ldrb	r3, [r3, r2]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	225c      	movs	r2, #92	; 0x5c
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7ff f818 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	225d      	movs	r2, #93	; 0x5d
 8001fa8:	2102      	movs	r1, #2
 8001faa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	438a      	bics	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	23e0      	movs	r3, #224	; 0xe0
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d902      	bls.n	8001fce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e002      	b.n	8001fd4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	23f0      	movs	r3, #240	; 0xf0
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d008      	beq.n	8001ff2 <HAL_SPI_Init+0xaa>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	23e0      	movs	r3, #224	; 0xe0
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d002      	beq.n	8001ff2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	2382      	movs	r3, #130	; 0x82
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6899      	ldr	r1, [r3, #8]
 8002000:	2384      	movs	r3, #132	; 0x84
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2102      	movs	r1, #2
 800200e:	400b      	ands	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2101      	movs	r1, #1
 8002018:	400b      	ands	r3, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6999      	ldr	r1, [r3, #24]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	400b      	ands	r3, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2138      	movs	r1, #56	; 0x38
 800202e:	400b      	ands	r3, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	400b      	ands	r3, r1
 800203a:	431a      	orrs	r2, r3
 800203c:	0011      	movs	r1, r2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	2204      	movs	r2, #4
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	2110      	movs	r1, #16
 8002060:	400b      	ands	r3, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	2108      	movs	r1, #8
 800206a:	400b      	ands	r3, r1
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68d9      	ldr	r1, [r3, #12]
 8002072:	23f0      	movs	r3, #240	; 0xf0
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	400b      	ands	r3, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	0011      	movs	r1, r2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	401a      	ands	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4907      	ldr	r1, [pc, #28]	; (80020b4 <HAL_SPI_Init+0x16c>)
 8002098:	400a      	ands	r2, r1
 800209a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	225d      	movs	r2, #93	; 0x5d
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	fffff7ff 	.word	0xfffff7ff

080020b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020c8:	231f      	movs	r3, #31
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	225c      	movs	r2, #92	; 0x5c
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_SPI_Transmit+0x26>
 80020da:	2302      	movs	r3, #2
 80020dc:	e140      	b.n	8002360 <HAL_SPI_Transmit+0x2a8>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	225c      	movs	r2, #92	; 0x5c
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e6:	f7ff f897 	bl	8001218 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80020ee:	2316      	movs	r3, #22
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	1dba      	adds	r2, r7, #6
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	225d      	movs	r2, #93	; 0x5d
 80020fc:	5c9b      	ldrb	r3, [r3, r2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d004      	beq.n	800210e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002104:	231f      	movs	r3, #31
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2202      	movs	r2, #2
 800210a:	701a      	strb	r2, [r3, #0]
    goto error;
 800210c:	e11d      	b.n	800234a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_SPI_Transmit+0x64>
 8002114:	1dbb      	adds	r3, r7, #6
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800211c:	231f      	movs	r3, #31
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
    goto error;
 8002124:	e111      	b.n	800234a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	225d      	movs	r2, #93	; 0x5d
 800212a:	2103      	movs	r1, #3
 800212c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1dba      	adds	r2, r7, #6
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1dba      	adds	r2, r7, #6
 8002146:	8812      	ldrh	r2, [r2, #0]
 8002148:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2244      	movs	r2, #68	; 0x44
 8002154:	2100      	movs	r1, #0
 8002156:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2246      	movs	r2, #70	; 0x46
 800215c:	2100      	movs	r1, #0
 800215e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	429a      	cmp	r2, r3
 8002176:	d110      	bne.n	800219a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	01c9      	lsls	r1, r1, #7
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d007      	beq.n	80021b8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	23e0      	movs	r3, #224	; 0xe0
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d94e      	bls.n	8002262 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_SPI_Transmit+0x11e>
 80021cc:	2316      	movs	r3, #22
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d13f      	bne.n	8002256 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	881a      	ldrh	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	1c9a      	adds	r2, r3, #2
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021fa:	e02c      	b.n	8002256 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d112      	bne.n	8002230 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	1c9a      	adds	r2, r3, #2
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800222e:	e012      	b.n	8002256 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002230:	f7fe fff2 	bl	8001218 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d802      	bhi.n	8002246 <HAL_SPI_Transmit+0x18e>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_SPI_Transmit+0x194>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2203      	movs	r2, #3
 8002252:	701a      	strb	r2, [r3, #0]
          goto error;
 8002254:	e079      	b.n	800234a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1cd      	bne.n	80021fc <HAL_SPI_Transmit+0x144>
 8002260:	e04f      	b.n	8002302 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_SPI_Transmit+0x1bc>
 800226a:	2316      	movs	r3, #22
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d141      	bne.n	80022f8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	330c      	adds	r3, #12
 800227e:	7812      	ldrb	r2, [r2, #0]
 8002280:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800229a:	e02d      	b.n	80022f8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d113      	bne.n	80022d2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022d0:	e012      	b.n	80022f8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d2:	f7fe ffa1 	bl	8001218 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d802      	bhi.n	80022e8 <HAL_SPI_Transmit+0x230>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	d102      	bne.n	80022ee <HAL_SPI_Transmit+0x236>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d104      	bne.n	80022f8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80022ee:	231f      	movs	r3, #31
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2203      	movs	r2, #3
 80022f4:	701a      	strb	r2, [r3, #0]
          goto error;
 80022f6:	e028      	b.n	800234a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1cc      	bne.n	800229c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 fb3b 	bl	8002984 <SPI_EndRxTxTransaction>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d002      	beq.n	8002318 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800233e:	231f      	movs	r3, #31
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e000      	b.n	800234a <HAL_SPI_Transmit+0x292>
  }

error:
 8002348:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	225d      	movs	r2, #93	; 0x5d
 800234e:	2101      	movs	r1, #1
 8002350:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	225c      	movs	r2, #92	; 0x5c
 8002356:	2100      	movs	r1, #0
 8002358:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800235a:	231f      	movs	r3, #31
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b008      	add	sp, #32
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	001a      	movs	r2, r3
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800237e:	2323      	movs	r3, #35	; 0x23
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225c      	movs	r2, #92	; 0x5c
 800238a:	5c9b      	ldrb	r3, [r3, r2]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_SPI_TransmitReceive+0x2c>
 8002390:	2302      	movs	r3, #2
 8002392:	e1b5      	b.n	8002700 <HAL_SPI_TransmitReceive+0x398>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	225c      	movs	r2, #92	; 0x5c
 8002398:	2101      	movs	r1, #1
 800239a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800239c:	f7fe ff3c 	bl	8001218 <HAL_GetTick>
 80023a0:	0003      	movs	r3, r0
 80023a2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023a4:	201b      	movs	r0, #27
 80023a6:	183b      	adds	r3, r7, r0
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	215d      	movs	r1, #93	; 0x5d
 80023ac:	5c52      	ldrb	r2, [r2, r1]
 80023ae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80023b6:	2312      	movs	r3, #18
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	1cba      	adds	r2, r7, #2
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023c0:	183b      	adds	r3, r7, r0
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d011      	beq.n	80023ec <HAL_SPI_TransmitReceive+0x84>
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	2382      	movs	r3, #130	; 0x82
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d107      	bne.n	80023e2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_SPI_TransmitReceive+0x7a>
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d004      	beq.n	80023ec <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80023e2:	2323      	movs	r3, #35	; 0x23
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80023ea:	e17e      	b.n	80026ea <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x98>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x98>
 80023f8:	1cbb      	adds	r3, r7, #2
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002400:	2323      	movs	r3, #35	; 0x23
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
    goto error;
 8002408:	e16f      	b.n	80026ea <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	225d      	movs	r2, #93	; 0x5d
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	225d      	movs	r2, #93	; 0x5d
 800241a:	2105      	movs	r1, #5
 800241c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1cba      	adds	r2, r7, #2
 800242e:	2146      	movs	r1, #70	; 0x46
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1cba      	adds	r2, r7, #2
 8002438:	2144      	movs	r1, #68	; 0x44
 800243a:	8812      	ldrh	r2, [r2, #0]
 800243c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1cba      	adds	r2, r7, #2
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1cba      	adds	r2, r7, #2
 8002450:	8812      	ldrh	r2, [r2, #0]
 8002452:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	23e0      	movs	r3, #224	; 0xe0
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	429a      	cmp	r2, r3
 800246a:	d908      	bls.n	800247e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	49a4      	ldr	r1, [pc, #656]	; (8002708 <HAL_SPI_TransmitReceive+0x3a0>)
 8002478:	400a      	ands	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	e008      	b.n	8002490 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0149      	lsls	r1, r1, #5
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	4013      	ands	r3, r2
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d007      	beq.n	80024ae <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	430a      	orrs	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	23e0      	movs	r3, #224	; 0xe0
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d800      	bhi.n	80024bc <HAL_SPI_TransmitReceive+0x154>
 80024ba:	e07f      	b.n	80025bc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_SPI_TransmitReceive+0x168>
 80024c4:	2312      	movs	r3, #18
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d000      	beq.n	80024d0 <HAL_SPI_TransmitReceive+0x168>
 80024ce:	e069      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024f4:	e056      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2202      	movs	r2, #2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d11b      	bne.n	800253c <HAL_SPI_TransmitReceive+0x1d4>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_SPI_TransmitReceive+0x1d4>
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d113      	bne.n	800253c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2201      	movs	r2, #1
 8002544:	4013      	ands	r3, r2
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11c      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x21c>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2246      	movs	r2, #70	; 0x46
 800254e:	5a9b      	ldrh	r3, [r3, r2]
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	b292      	uxth	r2, r2
 8002562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	1c9a      	adds	r2, r3, #2
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2246      	movs	r2, #70	; 0x46
 8002572:	5a9b      	ldrh	r3, [r3, r2]
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b299      	uxth	r1, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2246      	movs	r2, #70	; 0x46
 800257e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002580:	2301      	movs	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002584:	f7fe fe48 	bl	8001218 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002590:	429a      	cmp	r2, r3
 8002592:	d807      	bhi.n	80025a4 <HAL_SPI_TransmitReceive+0x23c>
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	3301      	adds	r3, #1
 8002598:	d004      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800259a:	2323      	movs	r3, #35	; 0x23
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2203      	movs	r2, #3
 80025a0:	701a      	strb	r2, [r3, #0]
        goto error;
 80025a2:	e0a2      	b.n	80026ea <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1a3      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x18e>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2246      	movs	r2, #70	; 0x46
 80025b2:	5a9b      	ldrh	r3, [r3, r2]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d19d      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x18e>
 80025ba:	e085      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x268>
 80025c4:	2312      	movs	r3, #18
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d000      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x268>
 80025ce:	e070      	b.n	80026b2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	7812      	ldrb	r2, [r2, #0]
 80025dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f6:	e05c      	b.n	80026b2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d11c      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x2d8>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x2d8>
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b01      	cmp	r3, #1
 8002614:	d114      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	2b01      	cmp	r3, #1
 800264c:	d11e      	bne.n	800268c <HAL_SPI_TransmitReceive+0x324>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2246      	movs	r2, #70	; 0x46
 8002652:	5a9b      	ldrh	r3, [r3, r2]
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d018      	beq.n	800268c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	001a      	movs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2246      	movs	r2, #70	; 0x46
 800267a:	5a9b      	ldrh	r3, [r3, r2]
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b299      	uxth	r1, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2246      	movs	r2, #70	; 0x46
 8002686:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002688:	2301      	movs	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800268c:	f7fe fdc4 	bl	8001218 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	429a      	cmp	r2, r3
 800269a:	d802      	bhi.n	80026a2 <HAL_SPI_TransmitReceive+0x33a>
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	3301      	adds	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x340>
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80026a8:	2323      	movs	r3, #35	; 0x23
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2203      	movs	r2, #3
 80026ae:	701a      	strb	r2, [r3, #0]
        goto error;
 80026b0:	e01b      	b.n	80026ea <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d19d      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x290>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2246      	movs	r2, #70	; 0x46
 80026c0:	5a9b      	ldrh	r3, [r3, r2]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d197      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 f958 	bl	8002984 <SPI_EndRxTxTransaction>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80026d8:	2323      	movs	r3, #35	; 0x23
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	661a      	str	r2, [r3, #96]	; 0x60
 80026e6:	e000      	b.n	80026ea <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80026e8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	225d      	movs	r2, #93	; 0x5d
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	225c      	movs	r2, #92	; 0x5c
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026fa:	2323      	movs	r3, #35	; 0x23
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b00a      	add	sp, #40	; 0x28
 8002706:	bd80      	pop	{r7, pc}
 8002708:	ffffefff 	.word	0xffffefff

0800270c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	225d      	movs	r2, #93	; 0x5d
 8002718:	5c9b      	ldrb	r3, [r3, r2]
 800271a:	b2db      	uxtb	r3, r3
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002734:	f7fe fd70 	bl	8001218 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002744:	f7fe fd68 	bl	8001218 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	0d1b      	lsrs	r3, r3, #20
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	4353      	muls	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800275a:	e058      	b.n	800280e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	d055      	beq.n	800280e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002762:	f7fe fd59 	bl	8001218 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d142      	bne.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	21e0      	movs	r1, #224	; 0xe0
 8002784:	438a      	bics	r2, r1
 8002786:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	2382      	movs	r3, #130	; 0x82
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	429a      	cmp	r2, r3
 8002792:	d113      	bne.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	429a      	cmp	r2, r3
 800279e:	d005      	beq.n	80027ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2140      	movs	r1, #64	; 0x40
 80027b8:	438a      	bics	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	019b      	lsls	r3, r3, #6
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d110      	bne.n	80027ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	491a      	ldr	r1, [pc, #104]	; (800283c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0189      	lsls	r1, r1, #6
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	225d      	movs	r2, #93	; 0x5d
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	225c      	movs	r2, #92	; 0x5c
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e017      	b.n	800282e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3b01      	subs	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	4013      	ands	r3, r2
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	425a      	negs	r2, r3
 800281e:	4153      	adcs	r3, r2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	001a      	movs	r2, r3
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d197      	bne.n	800275c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b008      	add	sp, #32
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	20000010 	.word	0x20000010
 800283c:	ffffdfff 	.word	0xffffdfff

08002840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800284e:	2317      	movs	r3, #23
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002856:	f7fe fcdf 	bl	8001218 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	18d3      	adds	r3, r2, r3
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002866:	f7fe fcd7 	bl	8001218 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	0013      	movs	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	189b      	adds	r3, r3, r2
 8002880:	00da      	lsls	r2, r3, #3
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	0d1b      	lsrs	r3, r3, #20
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	4353      	muls	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800288c:	e068      	b.n	8002960 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	23c0      	movs	r3, #192	; 0xc0
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	429a      	cmp	r2, r3
 8002896:	d10a      	bne.n	80028ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	2117      	movs	r1, #23
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	d055      	beq.n	8002960 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028b4:	f7fe fcb0 	bl	8001218 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d902      	bls.n	80028ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d142      	bne.n	8002950 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	21e0      	movs	r1, #224	; 0xe0
 80028d6:	438a      	bics	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	2382      	movs	r3, #130	; 0x82
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d113      	bne.n	800290e <SPI_WaitFifoStateUntilTimeout+0xce>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d005      	beq.n	80028fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d107      	bne.n	800290e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	438a      	bics	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	429a      	cmp	r2, r3
 8002918:	d110      	bne.n	800293c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4916      	ldr	r1, [pc, #88]	; (8002980 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002926:	400a      	ands	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0189      	lsls	r1, r1, #6
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	225d      	movs	r2, #93	; 0x5d
 8002940:	2101      	movs	r1, #1
 8002942:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	225c      	movs	r2, #92	; 0x5c
 8002948:	2100      	movs	r1, #0
 800294a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e010      	b.n	8002972 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	3b01      	subs	r3, #1
 800295e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d18e      	bne.n	800288e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b00a      	add	sp, #40	; 0x28
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	20000010 	.word	0x20000010
 8002980:	ffffdfff 	.word	0xffffdfff

08002984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	23c0      	movs	r3, #192	; 0xc0
 8002994:	0159      	lsls	r1, r3, #5
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	0013      	movs	r3, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	f7ff ff4e 	bl	8002840 <SPI_WaitFifoStateUntilTimeout>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d007      	beq.n	80029b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ac:	2220      	movs	r2, #32
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e027      	b.n	8002a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	0013      	movs	r3, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	f7ff fead 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d007      	beq.n	80029de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	2220      	movs	r2, #32
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e014      	b.n	8002a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	23c0      	movs	r3, #192	; 0xc0
 80029e2:	00d9      	lsls	r1, r3, #3
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	0013      	movs	r3, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	f7ff ff27 	bl	8002840 <SPI_WaitFifoStateUntilTimeout>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d007      	beq.n	8002a06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	2220      	movs	r2, #32
 80029fc:	431a      	orrs	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e000      	b.n	8002a08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002a14:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <MX_FATFS_Init+0x20>)
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <MX_FATFS_Init+0x24>)
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f003 f8c8 	bl	8005bb0 <FATFS_LinkDriver>
 8002a20:	0003      	movs	r3, r0
 8002a22:	001a      	movs	r2, r3
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <MX_FATFS_Init+0x28>)
 8002a26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	20000534 	.word	0x20000534
 8002a34:	2000001c 	.word	0x2000001c
 8002a38:	20000530 	.word	0x20000530

08002a3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002a40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	0002      	movs	r2, r0
 8002a50:	1dfb      	adds	r3, r7, #7
 8002a52:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fd fdd9 	bl	8000610 <SD_disk_initialize>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b002      	add	sp, #8
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	0002      	movs	r2, r0
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7fd fed4 	bl	8000828 <SD_disk_status>
 8002a80:	0003      	movs	r3, r0
 8002a82:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	210f      	movs	r1, #15
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	1c02      	adds	r2, r0, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	7818      	ldrb	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	f7fd fed3 	bl	8000854 <SD_disk_read>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b004      	add	sp, #16
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	1c02      	adds	r2, r0, #0
 8002acc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	7818      	ldrb	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	f7fd ff2c 	bl	8000934 <SD_disk_write>
 8002adc:	0003      	movs	r3, r0
 8002ade:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	603a      	str	r2, [r7, #0]
 8002af0:	1dfb      	adds	r3, r7, #7
 8002af2:	1c02      	adds	r2, r0, #0
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	1c0a      	adds	r2, r1, #0
 8002afa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	7818      	ldrb	r0, [r3, #0]
 8002b00:	1dbb      	adds	r3, r7, #6
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	0019      	movs	r1, r3
 8002b08:	f7fd ff9c 	bl	8000a44 <SD_disk_ioctl>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	0002      	movs	r2, r0
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <disk_status+0x40>)
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	3304      	adds	r3, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	1dfa      	adds	r2, r7, #7
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	4907      	ldr	r1, [pc, #28]	; (8002b58 <disk_status+0x40>)
 8002b3a:	188a      	adds	r2, r1, r2
 8002b3c:	7a12      	ldrb	r2, [r2, #8]
 8002b3e:	250f      	movs	r5, #15
 8002b40:	197c      	adds	r4, r7, r5
 8002b42:	0010      	movs	r0, r2
 8002b44:	4798      	blx	r3
 8002b46:	0003      	movs	r3, r0
 8002b48:	7023      	strb	r3, [r4, #0]
  return stat;
 8002b4a:	197b      	adds	r3, r7, r5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	20000558 	.word	0x20000558

08002b5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8002b68:	200f      	movs	r0, #15
 8002b6a:	183b      	adds	r3, r7, r0
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <disk_initialize+0x5c>)
 8002b76:	5cd3      	ldrb	r3, [r2, r3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d116      	bne.n	8002baa <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <disk_initialize+0x5c>)
 8002b82:	2101      	movs	r1, #1
 8002b84:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <disk_initialize+0x5c>)
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	18d3      	adds	r3, r2, r3
 8002b90:	3304      	adds	r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1dfa      	adds	r2, r7, #7
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <disk_initialize+0x5c>)
 8002b9c:	188a      	adds	r2, r1, r2
 8002b9e:	7a12      	ldrb	r2, [r2, #8]
 8002ba0:	183c      	adds	r4, r7, r0
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	4798      	blx	r3
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8002baa:	230f      	movs	r3, #15
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b005      	add	sp, #20
 8002bb6:	bd90      	pop	{r4, r7, pc}
 8002bb8:	20000558 	.word	0x20000558

08002bbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	210f      	movs	r1, #15
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	1c02      	adds	r2, r0, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <disk_read+0x4c>)
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	18d3      	adds	r3, r2, r3
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689d      	ldr	r5, [r3, #8]
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <disk_read+0x4c>)
 8002be6:	18d3      	adds	r3, r2, r3
 8002be8:	7a18      	ldrb	r0, [r3, #8]
 8002bea:	2617      	movs	r6, #23
 8002bec:	19bc      	adds	r4, r7, r6
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	47a8      	blx	r5
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	7023      	strb	r3, [r4, #0]
  return res;
 8002bfa:	19bb      	adds	r3, r7, r6
 8002bfc:	781b      	ldrb	r3, [r3, #0]
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b007      	add	sp, #28
 8002c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	20000558 	.word	0x20000558

08002c0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	210f      	movs	r1, #15
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	1c02      	adds	r2, r0, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <disk_write+0x4c>)
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	18d3      	adds	r3, r2, r3
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68dd      	ldr	r5, [r3, #12]
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <disk_write+0x4c>)
 8002c36:	18d3      	adds	r3, r2, r3
 8002c38:	7a18      	ldrb	r0, [r3, #8]
 8002c3a:	2617      	movs	r6, #23
 8002c3c:	19bc      	adds	r4, r7, r6
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	47a8      	blx	r5
 8002c46:	0003      	movs	r3, r0
 8002c48:	7023      	strb	r3, [r4, #0]
  return res;
 8002c4a:	19bb      	adds	r3, r7, r6
 8002c4c:	781b      	ldrb	r3, [r3, #0]
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b007      	add	sp, #28
 8002c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20000558 	.word	0x20000558

08002c5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	603a      	str	r2, [r7, #0]
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	1c02      	adds	r2, r0, #0
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	1dbb      	adds	r3, r7, #6
 8002c6c:	1c0a      	adds	r2, r1, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c70:	1dfb      	adds	r3, r7, #7
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <disk_ioctl+0x4c>)
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	18d3      	adds	r3, r2, r3
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	1dfa      	adds	r2, r7, #7
 8002c82:	7812      	ldrb	r2, [r2, #0]
 8002c84:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <disk_ioctl+0x4c>)
 8002c86:	188a      	adds	r2, r1, r2
 8002c88:	7a10      	ldrb	r0, [r2, #8]
 8002c8a:	260f      	movs	r6, #15
 8002c8c:	19bc      	adds	r4, r7, r6
 8002c8e:	683d      	ldr	r5, [r7, #0]
 8002c90:	1dba      	adds	r2, r7, #6
 8002c92:	7811      	ldrb	r1, [r2, #0]
 8002c94:	002a      	movs	r2, r5
 8002c96:	4798      	blx	r3
 8002c98:	0003      	movs	r3, r0
 8002c9a:	7023      	strb	r3, [r4, #0]
  return res;
 8002c9c:	19bb      	adds	r3, r7, r6
 8002c9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b005      	add	sp, #20
 8002ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca8:	20000558 	.word	0x20000558

08002cac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002cc0:	e007      	b.n	8002cd2 <mem_cpy+0x26>
		*d++ = *s++;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	1c53      	adds	r3, r2, #1
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	6179      	str	r1, [r7, #20]
 8002cce:	7812      	ldrb	r2, [r2, #0]
 8002cd0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f2      	bne.n	8002cc2 <mem_cpy+0x16>
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b006      	add	sp, #24
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002cf6:	e005      	b.n	8002d04 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	617a      	str	r2, [r7, #20]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1e5a      	subs	r2, r3, #1
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f4      	bne.n	8002cf8 <mem_set+0x12>
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b006      	add	sp, #24
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <mem_cmp+0x40>
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	61fa      	str	r2, [r7, #28]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	0019      	movs	r1, r3
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	1acb      	subs	r3, r1, r3
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0ec      	beq.n	8002d32 <mem_cmp+0x1a>
	return r;
 8002d58:	697b      	ldr	r3, [r7, #20]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b008      	add	sp, #32
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002d6c:	e002      	b.n	8002d74 <chk_chr+0x12>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3301      	adds	r3, #1
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <chk_chr+0x26>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	001a      	movs	r2, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d1f2      	bne.n	8002d6e <chk_chr+0xc>
	return *str;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e038      	b.n	8002e1a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8002da8:	492f      	ldr	r1, [pc, #188]	; (8002e68 <chk_lock+0xd4>)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	0013      	movs	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	585b      	ldr	r3, [r3, r1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d02a      	beq.n	8002e10 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002dba:	492b      	ldr	r1, [pc, #172]	; (8002e68 <chk_lock+0xd4>)
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	0013      	movs	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	585a      	ldr	r2, [r3, r1]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	58cb      	ldr	r3, [r1, r3]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d11f      	bne.n	8002e14 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8002dd4:	4924      	ldr	r1, [pc, #144]	; (8002e68 <chk_lock+0xd4>)
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	0013      	movs	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	18cb      	adds	r3, r1, r3
 8002de2:	3304      	adds	r3, #4
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	2382      	movs	r3, #130	; 0x82
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d110      	bne.n	8002e14 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002df2:	491d      	ldr	r1, [pc, #116]	; (8002e68 <chk_lock+0xd4>)
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	0013      	movs	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	18cb      	adds	r3, r1, r3
 8002e00:	3308      	adds	r3, #8
 8002e02:	881a      	ldrh	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4919      	ldr	r1, [pc, #100]	; (8002e6c <chk_lock+0xd8>)
 8002e08:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d102      	bne.n	8002e14 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8002e0e:	e007      	b.n	8002e20 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d9c3      	bls.n	8002da8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d109      	bne.n	8002e3a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <chk_lock+0x9e>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d101      	bne.n	8002e36 <chk_lock+0xa2>
 8002e32:	2300      	movs	r3, #0
 8002e34:	e014      	b.n	8002e60 <chk_lock+0xcc>
 8002e36:	2312      	movs	r3, #18
 8002e38:	e012      	b.n	8002e60 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10c      	bne.n	8002e5a <chk_lock+0xc6>
 8002e40:	4909      	ldr	r1, [pc, #36]	; (8002e68 <chk_lock+0xd4>)
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	0013      	movs	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	18cb      	adds	r3, r1, r3
 8002e4e:	330a      	adds	r3, #10
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d101      	bne.n	8002e5e <chk_lock+0xca>
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	e000      	b.n	8002e60 <chk_lock+0xcc>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000540 	.word	0x20000540
 8002e6c:	00000206 	.word	0x00000206

08002e70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	e002      	b.n	8002e82 <enq_lock+0x12>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d808      	bhi.n	8002e9a <enq_lock+0x2a>
 8002e88:	4908      	ldr	r1, [pc, #32]	; (8002eac <enq_lock+0x3c>)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	189b      	adds	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	585b      	ldr	r3, [r3, r1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3b02      	subs	r3, #2
 8002e9e:	1e5a      	subs	r2, r3, #1
 8002ea0:	4193      	sbcs	r3, r2
 8002ea2:	b2db      	uxtb	r3, r3
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000540 	.word	0x20000540

08002eb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e02c      	b.n	8002f1a <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 8002ec0:	4955      	ldr	r1, [pc, #340]	; (8003018 <inc_lock+0x168>)
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	189b      	adds	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	585a      	ldr	r2, [r3, r1]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	58cb      	ldr	r3, [r1, r3]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11c      	bne.n	8002f14 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8002eda:	494f      	ldr	r1, [pc, #316]	; (8003018 <inc_lock+0x168>)
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	0013      	movs	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	18cb      	adds	r3, r1, r3
 8002ee8:	3304      	adds	r3, #4
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	2382      	movs	r3, #130	; 0x82
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10d      	bne.n	8002f14 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8002ef8:	4947      	ldr	r1, [pc, #284]	; (8003018 <inc_lock+0x168>)
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	0013      	movs	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	18cb      	adds	r3, r1, r3
 8002f06:	3308      	adds	r3, #8
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4943      	ldr	r1, [pc, #268]	; (800301c <inc_lock+0x16c>)
 8002f0e:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d006      	beq.n	8002f22 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d9cf      	bls.n	8002ec0 <inc_lock+0x10>
 8002f20:	e000      	b.n	8002f24 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8002f22:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d145      	bne.n	8002fb6 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e002      	b.n	8002f36 <inc_lock+0x86>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d808      	bhi.n	8002f4e <inc_lock+0x9e>
 8002f3c:	4936      	ldr	r1, [pc, #216]	; (8003018 <inc_lock+0x168>)
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	0013      	movs	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	585b      	ldr	r3, [r3, r1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d101      	bne.n	8002f58 <inc_lock+0xa8>
 8002f54:	2300      	movs	r3, #0
 8002f56:	e05a      	b.n	800300e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	58d0      	ldr	r0, [r2, r3]
 8002f60:	492d      	ldr	r1, [pc, #180]	; (8003018 <inc_lock+0x168>)
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	0013      	movs	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	189b      	adds	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	2382      	movs	r3, #130	; 0x82
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	58d1      	ldr	r1, [r2, r3]
 8002f76:	4828      	ldr	r0, [pc, #160]	; (8003018 <inc_lock+0x168>)
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0013      	movs	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	18c3      	adds	r3, r0, r3
 8002f84:	3304      	adds	r3, #4
 8002f86:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a24      	ldr	r2, [pc, #144]	; (800301c <inc_lock+0x16c>)
 8002f8c:	5a98      	ldrh	r0, [r3, r2]
 8002f8e:	4922      	ldr	r1, [pc, #136]	; (8003018 <inc_lock+0x168>)
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	0013      	movs	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	18cb      	adds	r3, r1, r3
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	1c02      	adds	r2, r0, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002fa2:	491d      	ldr	r1, [pc, #116]	; (8003018 <inc_lock+0x168>)
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	0013      	movs	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	18cb      	adds	r3, r1, r3
 8002fb0:	330a      	adds	r3, #10
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <inc_lock+0x126>
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <inc_lock+0x168>)
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	18cb      	adds	r3, r1, r3
 8002fca:	330a      	adds	r3, #10
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <inc_lock+0x126>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e01b      	b.n	800300e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <inc_lock+0x144>
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <inc_lock+0x168>)
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	189b      	adds	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	18cb      	adds	r3, r1, r3
 8002fea:	330a      	adds	r3, #10
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	e001      	b.n	8002ff8 <inc_lock+0x148>
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	005a      	lsls	r2, r3, #1
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <inc_lock+0x168>)
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	000b      	movs	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	185b      	adds	r3, r3, r1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	18c3      	adds	r3, r0, r3
 8003006:	330a      	adds	r3, #10
 8003008:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3301      	adds	r3, #1
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b004      	add	sp, #16
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	20000540 	.word	0x20000540
 800301c:	00000206 	.word	0x00000206

08003020 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d83b      	bhi.n	80030ac <dec_lock+0x8c>
		n = Files[i].ctr;
 8003034:	240e      	movs	r4, #14
 8003036:	1939      	adds	r1, r7, r4
 8003038:	4822      	ldr	r0, [pc, #136]	; (80030c4 <dec_lock+0xa4>)
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	0013      	movs	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	189b      	adds	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	18c3      	adds	r3, r0, r3
 8003046:	330a      	adds	r3, #10
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800304c:	193b      	adds	r3, r7, r4
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	429a      	cmp	r2, r3
 8003056:	d102      	bne.n	800305e <dec_lock+0x3e>
 8003058:	193b      	adds	r3, r7, r4
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 800305e:	210e      	movs	r1, #14
 8003060:	187b      	adds	r3, r7, r1
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d004      	beq.n	8003072 <dec_lock+0x52>
 8003068:	187b      	adds	r3, r7, r1
 800306a:	881a      	ldrh	r2, [r3, #0]
 800306c:	187b      	adds	r3, r7, r1
 800306e:	3a01      	subs	r2, #1
 8003070:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8003072:	4914      	ldr	r1, [pc, #80]	; (80030c4 <dec_lock+0xa4>)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	0013      	movs	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	189b      	adds	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	18cb      	adds	r3, r1, r3
 8003080:	330a      	adds	r3, #10
 8003082:	210e      	movs	r1, #14
 8003084:	187a      	adds	r2, r7, r1
 8003086:	8812      	ldrh	r2, [r2, #0]
 8003088:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800308a:	187b      	adds	r3, r7, r1
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <dec_lock+0x82>
 8003092:	490c      	ldr	r1, [pc, #48]	; (80030c4 <dec_lock+0xa4>)
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	0013      	movs	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	189b      	adds	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	2200      	movs	r2, #0
 80030a0:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 80030a2:	230d      	movs	r3, #13
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e003      	b.n	80030b4 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80030ac:	230d      	movs	r3, #13
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2202      	movs	r2, #2
 80030b2:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80030b4:	230d      	movs	r3, #13
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b005      	add	sp, #20
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000540 	.word	0x20000540

080030c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e014      	b.n	8003100 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80030d6:	490e      	ldr	r1, [pc, #56]	; (8003110 <clear_lock+0x48>)
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	0013      	movs	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	585b      	ldr	r3, [r3, r1]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d107      	bne.n	80030fa <clear_lock+0x32>
 80030ea:	4909      	ldr	r1, [pc, #36]	; (8003110 <clear_lock+0x48>)
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	0013      	movs	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	189b      	adds	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	2200      	movs	r2, #0
 80030f8:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d9e7      	bls.n	80030d6 <clear_lock+0xe>
	}
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000540 	.word	0x20000540

08003114 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800311c:	240f      	movs	r4, #15
 800311e:	193b      	adds	r3, r7, r4
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	2381      	movs	r3, #129	; 0x81
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d03d      	beq.n	80031ac <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	238b      	movs	r3, #139	; 0x8b
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	58d3      	ldr	r3, [r2, r3]
 8003138:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <sync_window+0xa8>)
 800313e:	5c98      	ldrb	r0, [r3, r2]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	2301      	movs	r3, #1
 8003146:	f7ff fd61 	bl	8002c0c <disk_write>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d003      	beq.n	8003156 <sync_window+0x42>
			res = FR_DISK_ERR;
 800314e:	193b      	adds	r3, r7, r4
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e02a      	b.n	80031ac <sync_window+0x98>
		} else {
			fs->wflag = 0;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	2381      	movs	r3, #129	; 0x81
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	2100      	movs	r1, #0
 800315e:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	2388      	movs	r3, #136	; 0x88
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	58d3      	ldr	r3, [r2, r3]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	2386      	movs	r3, #134	; 0x86
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	58cb      	ldr	r3, [r1, r3]
 8003174:	429a      	cmp	r2, r3
 8003176:	d219      	bcs.n	80031ac <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <sync_window+0xac>)
 800317c:	5c9b      	ldrb	r3, [r3, r2]
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e011      	b.n	80031a6 <sync_window+0x92>
					wsect += fs->fsize;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	2386      	movs	r3, #134	; 0x86
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	58d3      	ldr	r3, [r2, r3]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <sync_window+0xa8>)
 8003194:	5c98      	ldrb	r0, [r3, r2]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	2301      	movs	r3, #1
 800319c:	f7ff fd36 	bl	8002c0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d8ea      	bhi.n	8003182 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781b      	ldrb	r3, [r3, #0]
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b007      	add	sp, #28
 80031b8:	bd90      	pop	{r4, r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	00000201 	.word	0x00000201
 80031c0:	00000203 	.word	0x00000203

080031c4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80031ce:	240f      	movs	r4, #15
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	238b      	movs	r3, #139	; 0x8b
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	58d3      	ldr	r3, [r2, r3]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d021      	beq.n	8003228 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80031e4:	0025      	movs	r5, r4
 80031e6:	193c      	adds	r4, r7, r4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff92 	bl	8003114 <sync_window>
 80031f0:	0003      	movs	r3, r0
 80031f2:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80031f4:	002c      	movs	r4, r5
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <move_window+0x74>)
 8003202:	5c98      	ldrb	r0, [r3, r2]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	2301      	movs	r3, #1
 800320a:	f7ff fcd7 	bl	8002bbc <disk_read>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d005      	beq.n	800321e <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003212:	2301      	movs	r3, #1
 8003214:	425b      	negs	r3, r3
 8003216:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003218:	193b      	adds	r3, r7, r4
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	238b      	movs	r3, #139	; 0x8b
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8003228:	230f      	movs	r3, #15
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	781b      	ldrb	r3, [r3, #0]
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bdb0      	pop	{r4, r5, r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	00000201 	.word	0x00000201

0800323c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003244:	250f      	movs	r5, #15
 8003246:	197c      	adds	r4, r7, r5
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff ff62 	bl	8003114 <sync_window>
 8003250:	0003      	movs	r3, r0
 8003252:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003254:	197b      	adds	r3, r7, r5
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d000      	beq.n	800325e <sync_fs+0x22>
 800325c:	e0b4      	b.n	80033c8 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	5cd3      	ldrb	r3, [r2, r3]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d000      	beq.n	800326c <sync_fs+0x30>
 800326a:	e09f      	b.n	80033ac <sync_fs+0x170>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a5a      	ldr	r2, [pc, #360]	; (80033d8 <sync_fs+0x19c>)
 8003270:	5c9b      	ldrb	r3, [r3, r2]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d000      	beq.n	8003278 <sync_fs+0x3c>
 8003276:	e099      	b.n	80033ac <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	2100      	movs	r1, #0
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff fd30 	bl	8002ce6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	23ff      	movs	r3, #255	; 0xff
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2155      	movs	r1, #85	; 0x55
 800328e:	54d1      	strb	r1, [r2, r3]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a52      	ldr	r2, [pc, #328]	; (80033dc <sync_fs+0x1a0>)
 8003294:	21aa      	movs	r1, #170	; 0xaa
 8003296:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2252      	movs	r2, #82	; 0x52
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2252      	movs	r2, #82	; 0x52
 80032a2:	705a      	strb	r2, [r3, #1]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2261      	movs	r2, #97	; 0x61
 80032a8:	709a      	strb	r2, [r3, #2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	23f2      	movs	r3, #242	; 0xf2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2172      	movs	r1, #114	; 0x72
 80032b8:	54d1      	strb	r1, [r2, r3]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	23e6      	movs	r3, #230	; 0xe6
 80032be:	33ff      	adds	r3, #255	; 0xff
 80032c0:	2172      	movs	r1, #114	; 0x72
 80032c2:	54d1      	strb	r1, [r2, r3]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	23f3      	movs	r3, #243	; 0xf3
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2141      	movs	r1, #65	; 0x41
 80032cc:	54d1      	strb	r1, [r2, r3]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	23e8      	movs	r3, #232	; 0xe8
 80032d2:	33ff      	adds	r3, #255	; 0xff
 80032d4:	2161      	movs	r1, #97	; 0x61
 80032d6:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	2384      	movs	r3, #132	; 0x84
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	58d3      	ldr	r3, [r2, r3]
 80032e0:	b2d9      	uxtb	r1, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	23f4      	movs	r3, #244	; 0xf4
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	54d1      	strb	r1, [r2, r3]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	2384      	movs	r3, #132	; 0x84
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	58d3      	ldr	r3, [r2, r3]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b2d9      	uxtb	r1, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	23ea      	movs	r3, #234	; 0xea
 80032fe:	33ff      	adds	r3, #255	; 0xff
 8003300:	54d1      	strb	r1, [r2, r3]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	2384      	movs	r3, #132	; 0x84
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	58d3      	ldr	r3, [r2, r3]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	b2d9      	uxtb	r1, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	23f5      	movs	r3, #245	; 0xf5
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	54d1      	strb	r1, [r2, r3]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	2384      	movs	r3, #132	; 0x84
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	58d3      	ldr	r3, [r2, r3]
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	b2d9      	uxtb	r1, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	23ec      	movs	r3, #236	; 0xec
 8003326:	33ff      	adds	r3, #255	; 0xff
 8003328:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	2383      	movs	r3, #131	; 0x83
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	58d3      	ldr	r3, [r2, r3]
 8003332:	b2d9      	uxtb	r1, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	23f6      	movs	r3, #246	; 0xf6
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	54d1      	strb	r1, [r2, r3]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	2383      	movs	r3, #131	; 0x83
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	58d3      	ldr	r3, [r2, r3]
 8003344:	b29b      	uxth	r3, r3
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b2d9      	uxtb	r1, r3
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	23ee      	movs	r3, #238	; 0xee
 8003350:	33ff      	adds	r3, #255	; 0xff
 8003352:	54d1      	strb	r1, [r2, r3]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	2383      	movs	r3, #131	; 0x83
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	58d3      	ldr	r3, [r2, r3]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	b2d9      	uxtb	r1, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	23f7      	movs	r3, #247	; 0xf7
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	54d1      	strb	r1, [r2, r3]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	2383      	movs	r3, #131	; 0x83
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	58d3      	ldr	r3, [r2, r3]
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	b2d9      	uxtb	r1, r3
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	23f0      	movs	r3, #240	; 0xf0
 8003378:	33ff      	adds	r3, #255	; 0xff
 800337a:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	2387      	movs	r3, #135	; 0x87
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	58d3      	ldr	r3, [r2, r3]
 8003384:	1c59      	adds	r1, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	238b      	movs	r3, #139	; 0x8b
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <sync_fs+0x1a4>)
 8003392:	5c98      	ldrb	r0, [r3, r2]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	238b      	movs	r3, #139	; 0x8b
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	58d2      	ldr	r2, [r2, r3]
 800339e:	2301      	movs	r3, #1
 80033a0:	f7ff fc34 	bl	8002c0c <disk_write>
			fs->fsi_flag = 0;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <sync_fs+0x19c>)
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <sync_fs+0x1a4>)
 80033b0:	5c9b      	ldrb	r3, [r3, r2]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff fc50 	bl	8002c5c <disk_ioctl>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d003      	beq.n	80033c8 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 80033c0:	230f      	movs	r3, #15
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80033c8:	230f      	movs	r3, #15
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	781b      	ldrb	r3, [r3, #0]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bdb0      	pop	{r4, r5, r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	00000205 	.word	0x00000205
 80033dc:	000001ff 	.word	0x000001ff
 80033e0:	00000201 	.word	0x00000201

080033e4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	3b02      	subs	r3, #2
 80033f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	2385      	movs	r3, #133	; 0x85
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	58d3      	ldr	r3, [r2, r3]
 80033fc:	3b02      	subs	r3, #2
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d301      	bcc.n	8003408 <clust2sect+0x24>
 8003404:	2300      	movs	r3, #0
 8003406:	e00a      	b.n	800341e <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <clust2sect+0x44>)
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	001a      	movs	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	435a      	muls	r2, r3
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	238a      	movs	r3, #138	; 0x8a
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	58cb      	ldr	r3, [r1, r3]
 800341c:	18d3      	adds	r3, r2, r3
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	00000202 	.word	0x00000202

0800342c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d906      	bls.n	800344a <get_fat+0x1e>
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	2385      	movs	r3, #133	; 0x85
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	58d3      	ldr	r3, [r2, r3]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <get_fat+0x24>
		val = 1;	/* Internal error */
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e0aa      	b.n	80035a6 <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003450:	2301      	movs	r3, #1
 8003452:	425b      	negs	r3, r3
 8003454:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d100      	bne.n	8003464 <get_fat+0x38>
 8003462:	e06b      	b.n	800353c <get_fat+0x110>
 8003464:	dd00      	ble.n	8003468 <get_fat+0x3c>
 8003466:	e094      	b.n	8003592 <get_fat+0x166>
 8003468:	2b01      	cmp	r3, #1
 800346a:	d002      	beq.n	8003472 <get_fat+0x46>
 800346c:	2b02      	cmp	r3, #2
 800346e:	d042      	beq.n	80034f6 <get_fat+0xca>
 8003470:	e08f      	b.n	8003592 <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	2388      	movs	r3, #136	; 0x88
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	58d2      	ldr	r2, [r2, r3]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0a5b      	lsrs	r3, r3, #9
 800348c:	18d2      	adds	r2, r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0011      	movs	r1, r2
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff fe96 	bl	80031c4 <move_window>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d000      	beq.n	800349e <get_fat+0x72>
 800349c:	e07c      	b.n	8003598 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	60fa      	str	r2, [r7, #12]
 80034a4:	05db      	lsls	r3, r3, #23
 80034a6:	0ddb      	lsrs	r3, r3, #23
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	2388      	movs	r3, #136	; 0x88
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	58d2      	ldr	r2, [r2, r3]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	18d2      	adds	r2, r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	0011      	movs	r1, r2
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7ff fe7f 	bl	80031c4 <move_window>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d168      	bne.n	800359c <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	0ddb      	lsrs	r3, r3, #23
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	001a      	movs	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	d002      	beq.n	80034ec <get_fat+0xc0>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	e002      	b.n	80034f2 <get_fat+0xc6>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	051b      	lsls	r3, r3, #20
 80034f0:	0d1b      	lsrs	r3, r3, #20
 80034f2:	617b      	str	r3, [r7, #20]
			break;
 80034f4:	e057      	b.n	80035a6 <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	2388      	movs	r3, #136	; 0x88
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	58d2      	ldr	r2, [r2, r3]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	18d2      	adds	r2, r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff fe5b 	bl	80031c4 <move_window>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d146      	bne.n	80035a0 <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	005a      	lsls	r2, r3, #1
 8003516:	23ff      	movs	r3, #255	; 0xff
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3301      	adds	r3, #1
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	b21a      	sxth	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b21b      	sxth	r3, r3
 8003532:	4313      	orrs	r3, r2
 8003534:	b21b      	sxth	r3, r3
 8003536:	b29b      	uxth	r3, r3
 8003538:	617b      	str	r3, [r7, #20]
			break;
 800353a:	e034      	b.n	80035a6 <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	2388      	movs	r3, #136	; 0x88
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	58d2      	ldr	r2, [r2, r3]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	09db      	lsrs	r3, r3, #7
 8003548:	18d2      	adds	r2, r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0011      	movs	r1, r2
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff fe38 	bl	80031c4 <move_window>
 8003554:	1e03      	subs	r3, r0, #0
 8003556:	d125      	bne.n	80035a4 <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	23fe      	movs	r3, #254	; 0xfe
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	18d3      	adds	r3, r2, r3
 8003566:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3303      	adds	r3, #3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	061a      	lsls	r2, r3, #24
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	3302      	adds	r3, #2
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	4313      	orrs	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	3201      	adds	r2, #1
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	0212      	lsls	r2, r2, #8
 8003582:	4313      	orrs	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	617b      	str	r3, [r7, #20]
			break;
 8003590:	e009      	b.n	80035a6 <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 8003592:	2301      	movs	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e006      	b.n	80035a6 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	e004      	b.n	80035a6 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	e002      	b.n	80035a6 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	e000      	b.n	80035a6 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80035a4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 80035a6:	697b      	ldr	r3, [r7, #20]
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b006      	add	sp, #24
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80035b0:	b5b0      	push	{r4, r5, r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d906      	bls.n	80035d0 <put_fat+0x20>
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	2385      	movs	r3, #133	; 0x85
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	58d3      	ldr	r3, [r2, r3]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d304      	bcc.n	80035da <put_fat+0x2a>
		res = FR_INT_ERR;
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2202      	movs	r2, #2
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e111      	b.n	80037fe <put_fat+0x24e>

	} else {
		switch (fs->fs_type) {
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	5cd3      	ldrb	r3, [r2, r3]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d100      	bne.n	80035e8 <put_fat+0x38>
 80035e6:	e0ae      	b.n	8003746 <put_fat+0x196>
 80035e8:	dd00      	ble.n	80035ec <put_fat+0x3c>
 80035ea:	e0fc      	b.n	80037e6 <put_fat+0x236>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d003      	beq.n	80035f8 <put_fat+0x48>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d100      	bne.n	80035f6 <put_fat+0x46>
 80035f4:	e079      	b.n	80036ea <put_fat+0x13a>
 80035f6:	e0f6      	b.n	80037e6 <put_fat+0x236>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	18d3      	adds	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	2388      	movs	r3, #136	; 0x88
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	58d2      	ldr	r2, [r2, r3]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	0a5b      	lsrs	r3, r3, #9
 8003612:	18d2      	adds	r2, r2, r3
 8003614:	251f      	movs	r5, #31
 8003616:	197c      	adds	r4, r7, r5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	0011      	movs	r1, r2
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff fdd1 	bl	80031c4 <move_window>
 8003622:	0003      	movs	r3, r0
 8003624:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003626:	197b      	adds	r3, r7, r5
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d000      	beq.n	8003630 <put_fat+0x80>
 800362e:	e0df      	b.n	80037f0 <put_fat+0x240>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	617a      	str	r2, [r7, #20]
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	0ddb      	lsrs	r3, r3, #23
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d00d      	beq.n	8003664 <put_fat+0xb4>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b25b      	sxtb	r3, r3
 800364e:	220f      	movs	r2, #15
 8003650:	4013      	ands	r3, r2
 8003652:	b25a      	sxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	b25b      	sxtb	r3, r3
 800365c:	4313      	orrs	r3, r2
 800365e:	b25b      	sxtb	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e001      	b.n	8003668 <put_fat+0xb8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	2381      	movs	r3, #129	; 0x81
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	2101      	movs	r1, #1
 8003674:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	2388      	movs	r3, #136	; 0x88
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	58d2      	ldr	r2, [r2, r3]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	0a5b      	lsrs	r3, r3, #9
 8003682:	18d2      	adds	r2, r2, r3
 8003684:	251f      	movs	r5, #31
 8003686:	197c      	adds	r4, r7, r5
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	0011      	movs	r1, r2
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff fd99 	bl	80031c4 <move_window>
 8003692:	0003      	movs	r3, r0
 8003694:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003696:	197b      	adds	r3, r7, r5
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d000      	beq.n	80036a0 <put_fat+0xf0>
 800369e:	e0a9      	b.n	80037f4 <put_fat+0x244>
			p = &fs->win.d8[bc % SS(fs)];
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	05db      	lsls	r3, r3, #23
 80036a4:	0ddb      	lsrs	r3, r3, #23
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4013      	ands	r3, r2
 80036b2:	d003      	beq.n	80036bc <put_fat+0x10c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e00e      	b.n	80036da <put_fat+0x12a>
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	220f      	movs	r2, #15
 80036c4:	4393      	bics	r3, r2
 80036c6:	b25a      	sxtb	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	210f      	movs	r1, #15
 80036d0:	400b      	ands	r3, r1
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	4313      	orrs	r3, r2
 80036d6:	b25b      	sxtb	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	2381      	movs	r3, #129	; 0x81
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	2101      	movs	r1, #1
 80036e6:	54d1      	strb	r1, [r2, r3]
			break;
 80036e8:	e089      	b.n	80037fe <put_fat+0x24e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	2388      	movs	r3, #136	; 0x88
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	58d2      	ldr	r2, [r2, r3]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	18d2      	adds	r2, r2, r3
 80036f8:	251f      	movs	r5, #31
 80036fa:	197c      	adds	r4, r7, r5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	0011      	movs	r1, r2
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff fd5f 	bl	80031c4 <move_window>
 8003706:	0003      	movs	r3, r0
 8003708:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800370a:	197b      	adds	r3, r7, r5
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d172      	bne.n	80037f8 <put_fat+0x248>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	23ff      	movs	r3, #255	; 0xff
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4013      	ands	r3, r2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	b29b      	uxth	r3, r3
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b29a      	uxth	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3301      	adds	r3, #1
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	2381      	movs	r3, #129	; 0x81
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	2101      	movs	r1, #1
 8003742:	54d1      	strb	r1, [r2, r3]
			break;
 8003744:	e05b      	b.n	80037fe <put_fat+0x24e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	2388      	movs	r3, #136	; 0x88
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	58d2      	ldr	r2, [r2, r3]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	09db      	lsrs	r3, r3, #7
 8003752:	18d2      	adds	r2, r2, r3
 8003754:	251f      	movs	r5, #31
 8003756:	197c      	adds	r4, r7, r5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fd31 	bl	80031c4 <move_window>
 8003762:	0003      	movs	r3, r0
 8003764:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003766:	197b      	adds	r3, r7, r5
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d146      	bne.n	80037fc <put_fat+0x24c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	009a      	lsls	r2, r3, #2
 8003772:	23fe      	movs	r3, #254	; 0xfe
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4013      	ands	r3, r2
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	3303      	adds	r3, #3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	061a      	lsls	r2, r3, #24
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	3302      	adds	r3, #2
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	4313      	orrs	r3, r2
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	3201      	adds	r2, #1
 8003794:	7812      	ldrb	r2, [r2, #0]
 8003796:	0212      	lsls	r2, r2, #8
 8003798:	4313      	orrs	r3, r2
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	0f1b      	lsrs	r3, r3, #28
 80037a2:	071b      	lsls	r3, r3, #28
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3301      	adds	r3, #1
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0c1a      	lsrs	r2, r3, #16
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3302      	adds	r3, #2
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0e1a      	lsrs	r2, r3, #24
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3303      	adds	r3, #3
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	2381      	movs	r3, #129	; 0x81
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	2101      	movs	r1, #1
 80037e2:	54d1      	strb	r1, [r2, r3]
			break;
 80037e4:	e00b      	b.n	80037fe <put_fat+0x24e>

		default :
			res = FR_INT_ERR;
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	2202      	movs	r2, #2
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e006      	b.n	80037fe <put_fat+0x24e>
			if (res != FR_OK) break;
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	e004      	b.n	80037fe <put_fat+0x24e>
			if (res != FR_OK) break;
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	e002      	b.n	80037fe <put_fat+0x24e>
			if (res != FR_OK) break;
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	e000      	b.n	80037fe <put_fat+0x24e>
			if (res != FR_OK) break;
 80037fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80037fe:	231f      	movs	r3, #31
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	781b      	ldrb	r3, [r3, #0]
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b008      	add	sp, #32
 800380a:	bdb0      	pop	{r4, r5, r7, pc}

0800380c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800380c:	b5b0      	push	{r4, r5, r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d906      	bls.n	800382a <remove_chain+0x1e>
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	2385      	movs	r3, #133	; 0x85
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	58d3      	ldr	r3, [r2, r3]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d304      	bcc.n	8003834 <remove_chain+0x28>
		res = FR_INT_ERR;
 800382a:	230f      	movs	r3, #15
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e052      	b.n	80038da <remove_chain+0xce>

	} else {
		res = FR_OK;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800383c:	e042      	b.n	80038c4 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0011      	movs	r1, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f7ff fdf1 	bl	800342c <get_fat>
 800384a:	0003      	movs	r3, r0
 800384c:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d03f      	beq.n	80038d4 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d104      	bne.n	8003864 <remove_chain+0x58>
 800385a:	230f      	movs	r3, #15
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2202      	movs	r2, #2
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e03a      	b.n	80038da <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	3301      	adds	r3, #1
 8003868:	d104      	bne.n	8003874 <remove_chain+0x68>
 800386a:	230f      	movs	r3, #15
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e032      	b.n	80038da <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003874:	250f      	movs	r5, #15
 8003876:	197c      	adds	r4, r7, r5
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fe96 	bl	80035b0 <put_fat>
 8003884:	0003      	movs	r3, r0
 8003886:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003888:	197b      	adds	r3, r7, r5
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d123      	bne.n	80038d8 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	2384      	movs	r3, #132	; 0x84
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	58d3      	ldr	r3, [r2, r3]
 8003898:	3301      	adds	r3, #1
 800389a:	d011      	beq.n	80038c0 <remove_chain+0xb4>
				fs->free_clust++;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	2384      	movs	r3, #132	; 0x84
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	58d3      	ldr	r3, [r2, r3]
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	2384      	movs	r3, #132	; 0x84
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <remove_chain+0xdc>)
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	2201      	movs	r2, #1
 80038b6:	4313      	orrs	r3, r2
 80038b8:	b2d9      	uxtb	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <remove_chain+0xdc>)
 80038be:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	2385      	movs	r3, #133	; 0x85
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	58d3      	ldr	r3, [r2, r3]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d3b5      	bcc.n	800383e <remove_chain+0x32>
 80038d2:	e002      	b.n	80038da <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	e000      	b.n	80038da <remove_chain+0xce>
			if (res != FR_OK) break;
 80038d8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 80038da:	230f      	movs	r3, #15
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bdb0      	pop	{r4, r5, r7, pc}
 80038e8:	00000205 	.word	0x00000205

080038ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80038ec:	b5b0      	push	{r4, r5, r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	2383      	movs	r3, #131	; 0x83
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	58d3      	ldr	r3, [r2, r3]
 8003904:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <create_chain+0x2e>
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	2385      	movs	r3, #133	; 0x85
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	58d3      	ldr	r3, [r2, r3]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	d31f      	bcc.n	800395a <create_chain+0x6e>
 800391a:	2301      	movs	r3, #1
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e01c      	b.n	800395a <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0011      	movs	r1, r2
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff fd80 	bl	800342c <get_fat>
 800392c:	0003      	movs	r3, r0
 800392e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d801      	bhi.n	800393a <create_chain+0x4e>
 8003936:	2301      	movs	r3, #1
 8003938:	e085      	b.n	8003a46 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3301      	adds	r3, #1
 800393e:	d101      	bne.n	8003944 <create_chain+0x58>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	e080      	b.n	8003a46 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	2385      	movs	r3, #133	; 0x85
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	58d3      	ldr	r3, [r2, r3]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d201      	bcs.n	8003956 <create_chain+0x6a>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	e077      	b.n	8003a46 <create_chain+0x15a>
		scl = clst;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3301      	adds	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	2385      	movs	r3, #133	; 0x85
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	58d3      	ldr	r3, [r2, r3]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	429a      	cmp	r2, r3
 8003970:	d307      	bcc.n	8003982 <create_chain+0x96>
			ncl = 2;
 8003972:	2302      	movs	r3, #2
 8003974:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	429a      	cmp	r2, r3
 800397c:	d901      	bls.n	8003982 <create_chain+0x96>
 800397e:	2300      	movs	r3, #0
 8003980:	e061      	b.n	8003a46 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f7ff fd4f 	bl	800342c <get_fat>
 800398e:	0003      	movs	r3, r0
 8003990:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3301      	adds	r3, #1
 800399c:	d002      	beq.n	80039a4 <create_chain+0xb8>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <create_chain+0xbc>
			return cs;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	e04e      	b.n	8003a46 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1d6      	bne.n	800395e <create_chain+0x72>
 80039b0:	2300      	movs	r3, #0
 80039b2:	e048      	b.n	8003a46 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80039b4:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80039b6:	250f      	movs	r5, #15
 80039b8:	197c      	adds	r4, r7, r5
 80039ba:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <create_chain+0x164>)
 80039bc:	6979      	ldr	r1, [r7, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff fdf5 	bl	80035b0 <put_fat>
 80039c6:	0003      	movs	r3, r0
 80039c8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 80039ca:	197b      	adds	r3, r7, r5
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <create_chain+0xfe>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <create_chain+0xfe>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80039d8:	197c      	adds	r4, r7, r5
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff fde5 	bl	80035b0 <put_fat>
 80039e6:	0003      	movs	r3, r0
 80039e8:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 80039ea:	230f      	movs	r3, #15
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11d      	bne.n	8003a30 <create_chain+0x144>
		fs->last_clust = ncl;			/* Update FSINFO */
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	2383      	movs	r3, #131	; 0x83
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	2384      	movs	r3, #132	; 0x84
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	58d3      	ldr	r3, [r2, r3]
 8003a06:	3301      	adds	r3, #1
 8003a08:	d01c      	beq.n	8003a44 <create_chain+0x158>
			fs->free_clust--;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	2384      	movs	r3, #132	; 0x84
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	58d3      	ldr	r3, [r2, r3]
 8003a12:	1e59      	subs	r1, r3, #1
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	2384      	movs	r3, #132	; 0x84
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <create_chain+0x168>)
 8003a20:	5c9b      	ldrb	r3, [r3, r2]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b2d9      	uxtb	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <create_chain+0x168>)
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	e009      	b.n	8003a44 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003a30:	230f      	movs	r3, #15
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <create_chain+0x154>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	425b      	negs	r3, r3
 8003a3e:	e000      	b.n	8003a42 <create_chain+0x156>
 8003a40:	2301      	movs	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b006      	add	sp, #24
 8003a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	0fffffff 	.word	0x0fffffff
 8003a54:	00000205 	.word	0x00000205

08003a58 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	2389      	movs	r3, #137	; 0x89
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	58d3      	ldr	r3, [r2, r3]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	0a58      	lsrs	r0, r3, #9
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	58d3      	ldr	r3, [r2, r3]
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <clmt_clust+0x70>)
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	0019      	movs	r1, r3
 8003a80:	f7fc fb42 	bl	8000108 <__udivsi3>
 8003a84:	0003      	movs	r3, r0
 8003a86:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	613a      	str	r2, [r7, #16]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <clmt_clust+0x44>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e010      	b.n	8003abe <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d307      	bcc.n	8003ab4 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003ab2:	e7e9      	b.n	8003a88 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8003ab4:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	18d3      	adds	r3, r2, r3
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b006      	add	sp, #24
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	00000202 	.word	0x00000202

08003acc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	b299      	uxth	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a51      	ldr	r2, [pc, #324]	; (8003c24 <dir_sdi+0x158>)
 8003ade:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	2382      	movs	r3, #130	; 0x82
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	58d3      	ldr	r3, [r2, r3]
 8003ae8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d009      	beq.n	8003b04 <dir_sdi+0x38>
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	58d2      	ldr	r2, [r2, r3]
 8003af8:	2385      	movs	r3, #133	; 0x85
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	58d3      	ldr	r3, [r2, r3]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d301      	bcc.n	8003b08 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e088      	b.n	8003c1a <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d110      	bne.n	8003b30 <dir_sdi+0x64>
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	58d2      	ldr	r2, [r2, r3]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d107      	bne.n	8003b30 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	58d2      	ldr	r2, [r2, r3]
 8003b28:	2389      	movs	r3, #137	; 0x89
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	58d3      	ldr	r3, [r2, r3]
 8003b2e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d115      	bne.n	8003b62 <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	58d2      	ldr	r2, [r2, r3]
 8003b3e:	2382      	movs	r3, #130	; 0x82
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	5ad3      	ldrh	r3, [r2, r3]
 8003b44:	001a      	movs	r2, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d301      	bcc.n	8003b50 <dir_sdi+0x84>
			return FR_INT_ERR;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e064      	b.n	8003c1a <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	58d2      	ldr	r2, [r2, r3]
 8003b58:	2389      	movs	r3, #137	; 0x89
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	58d3      	ldr	r3, [r2, r3]
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	e03a      	b.n	8003bd8 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	58d3      	ldr	r3, [r2, r3]
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <dir_sdi+0x15c>)
 8003b6c:	5c9b      	ldrb	r3, [r3, r2]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003b72:	e022      	b.n	8003bba <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	58d3      	ldr	r3, [r2, r3]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	0011      	movs	r1, r2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff fc53 	bl	800342c <get_fat>
 8003b86:	0003      	movs	r3, r0
 8003b88:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <dir_sdi+0xc8>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e042      	b.n	8003c1a <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d909      	bls.n	8003bae <dir_sdi+0xe2>
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	58d2      	ldr	r2, [r2, r3]
 8003ba2:	2385      	movs	r3, #133	; 0x85
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	58d3      	ldr	r3, [r2, r3]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d301      	bcc.n	8003bb2 <dir_sdi+0xe6>
				return FR_INT_ERR;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e033      	b.n	8003c1a <dir_sdi+0x14e>
			idx -= ic;
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d2d8      	bcs.n	8003b74 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	58d3      	ldr	r3, [r2, r3]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	0011      	movs	r1, r2
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7ff fc08 	bl	80033e4 <clust2sect>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	2383      	movs	r3, #131	; 0x83
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	6979      	ldr	r1, [r7, #20]
 8003be0:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <dir_sdi+0x120>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e016      	b.n	8003c1a <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	091a      	lsrs	r2, r3, #4
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	18d1      	adds	r1, r2, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	2384      	movs	r3, #132	; 0x84
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	58d3      	ldr	r3, [r2, r3]
 8003c04:	0019      	movs	r1, r3
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	220f      	movs	r2, #15
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	015b      	lsls	r3, r3, #5
 8003c0e:	18c9      	adds	r1, r1, r3
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	2385      	movs	r3, #133	; 0x85
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	00000206 	.word	0x00000206
 8003c28:	00000202 	.word	0x00000202

08003c2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a87      	ldr	r2, [pc, #540]	; (8003e58 <dir_next+0x22c>)
 8003c3a:	5a9b      	ldrh	r3, [r3, r2]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	d005      	beq.n	8003c54 <dir_next+0x28>
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	2384      	movs	r3, #132	; 0x84
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	58d3      	ldr	r3, [r2, r3]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <dir_next+0x2c>
		return FR_NO_FILE;
 8003c54:	2304      	movs	r3, #4
 8003c56:	e0fb      	b.n	8003e50 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d000      	beq.n	8003c62 <dir_next+0x36>
 8003c60:	e0e2      	b.n	8003e28 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	2384      	movs	r3, #132	; 0x84
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	58d3      	ldr	r3, [r2, r3]
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	2384      	movs	r3, #132	; 0x84
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	2383      	movs	r3, #131	; 0x83
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	58d3      	ldr	r3, [r2, r3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	58d2      	ldr	r2, [r2, r3]
 8003c88:	2382      	movs	r3, #130	; 0x82
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	5ad3      	ldrh	r3, [r2, r3]
 8003c8e:	001a      	movs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d200      	bcs.n	8003c98 <dir_next+0x6c>
 8003c96:	e0c7      	b.n	8003e28 <dir_next+0x1fc>
				return FR_NO_FILE;
 8003c98:	2304      	movs	r3, #4
 8003c9a:	e0d9      	b.n	8003e50 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	588a      	ldr	r2, [r1, r2]
 8003ca8:	496c      	ldr	r1, [pc, #432]	; (8003e5c <dir_next+0x230>)
 8003caa:	5c52      	ldrb	r2, [r2, r1]
 8003cac:	3a01      	subs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d000      	beq.n	8003cb4 <dir_next+0x88>
 8003cb2:	e0b9      	b.n	8003e28 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	58d0      	ldr	r0, [r2, r3]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	2383      	movs	r3, #131	; 0x83
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	58d3      	ldr	r3, [r2, r3]
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	f7ff fbb1 	bl	800342c <get_fat>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d801      	bhi.n	8003cd8 <dir_next+0xac>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e0bb      	b.n	8003e50 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <dir_next+0xb6>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0b6      	b.n	8003e50 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	58d2      	ldr	r2, [r2, r3]
 8003cea:	2385      	movs	r3, #133	; 0x85
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	58d3      	ldr	r3, [r2, r3]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d200      	bcs.n	8003cf8 <dir_next+0xcc>
 8003cf6:	e084      	b.n	8003e02 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <dir_next+0xd6>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	e0a6      	b.n	8003e50 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	58d0      	ldr	r0, [r2, r3]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	2383      	movs	r3, #131	; 0x83
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	58d3      	ldr	r3, [r2, r3]
 8003d12:	0019      	movs	r1, r3
 8003d14:	f7ff fdea 	bl	80038ec <create_chain>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <dir_next+0xfa>
 8003d22:	2307      	movs	r3, #7
 8003d24:	e094      	b.n	8003e50 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <dir_next+0x104>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e08f      	b.n	8003e50 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	d101      	bne.n	8003d3a <dir_next+0x10e>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e08a      	b.n	8003e50 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	58d3      	ldr	r3, [r2, r3]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff f9e6 	bl	8003114 <sync_window>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d001      	beq.n	8003d50 <dir_next+0x124>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e07f      	b.n	8003e50 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	58d3      	ldr	r3, [r2, r3]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	001a      	movs	r2, r3
 8003d60:	2100      	movs	r1, #0
 8003d62:	f7fe ffc0 	bl	8002ce6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	58d0      	ldr	r0, [r2, r3]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	58d4      	ldr	r4, [r2, r3]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	0019      	movs	r1, r3
 8003d7a:	f7ff fb33 	bl	80033e4 <clust2sect>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	238b      	movs	r3, #139	; 0x8b
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	e020      	b.n	8003dce <dir_next+0x1a2>
						dp->fs->wflag = 1;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	58d2      	ldr	r2, [r2, r3]
 8003d94:	2381      	movs	r3, #129	; 0x81
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	2101      	movs	r1, #1
 8003d9a:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	58d3      	ldr	r3, [r2, r3]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff f9b5 	bl	8003114 <sync_window>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <dir_next+0x186>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e04e      	b.n	8003e50 <dir_next+0x224>
						dp->fs->winsect++;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	58d3      	ldr	r3, [r2, r3]
 8003dba:	228b      	movs	r2, #139	; 0x8b
 8003dbc:	0092      	lsls	r2, r2, #2
 8003dbe:	589a      	ldr	r2, [r3, r2]
 8003dc0:	1c51      	adds	r1, r2, #1
 8003dc2:	228b      	movs	r2, #139	; 0x8b
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	58d3      	ldr	r3, [r2, r3]
 8003dd6:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <dir_next+0x230>)
 8003dd8:	5c9b      	ldrb	r3, [r3, r2]
 8003dda:	001a      	movs	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d3d4      	bcc.n	8003d8c <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	58d2      	ldr	r2, [r2, r3]
 8003dea:	238b      	movs	r3, #139	; 0x8b
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	58d1      	ldr	r1, [r2, r3]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	58d2      	ldr	r2, [r2, r3]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ac9      	subs	r1, r1, r3
 8003dfc:	238b      	movs	r3, #139	; 0x8b
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	2383      	movs	r3, #131	; 0x83
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	58d3      	ldr	r3, [r2, r3]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7ff fae3 	bl	80033e4 <clust2sect>
 8003e1e:	0001      	movs	r1, r0
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	2384      	movs	r3, #132	; 0x84
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	b299      	uxth	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <dir_next+0x22c>)
 8003e30:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	58d3      	ldr	r3, [r2, r3]
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	220f      	movs	r2, #15
 8003e40:	4013      	ands	r3, r2
 8003e42:	015b      	lsls	r3, r3, #5
 8003e44:	18c9      	adds	r1, r1, r3
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	2385      	movs	r3, #133	; 0x85
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b007      	add	sp, #28
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	00000206 	.word	0x00000206
 8003e5c:	00000202 	.word	0x00000202

08003e60 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8003e6a:	250f      	movs	r5, #15
 8003e6c:	197c      	adds	r4, r7, r5
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2100      	movs	r1, #0
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff fe2a 	bl	8003acc <dir_sdi>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8003e7c:	197b      	adds	r3, r7, r5
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13b      	bne.n	8003efc <dir_alloc+0x9c>
		n = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	58d0      	ldr	r0, [r2, r3]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	2384      	movs	r3, #132	; 0x84
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	58d3      	ldr	r3, [r2, r3]
 8003e98:	250f      	movs	r5, #15
 8003e9a:	197c      	adds	r4, r7, r5
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	f7ff f991 	bl	80031c4 <move_window>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d125      	bne.n	8003efa <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	2385      	movs	r3, #133	; 0x85
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	58d3      	ldr	r3, [r2, r3]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2be5      	cmp	r3, #229	; 0xe5
 8003eba:	d006      	beq.n	8003eca <dir_alloc+0x6a>
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	2385      	movs	r3, #133	; 0x85
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	58d3      	ldr	r3, [r2, r3]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d107      	bne.n	8003eda <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d102      	bne.n	8003ede <dir_alloc+0x7e>
 8003ed8:	e010      	b.n	8003efc <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003ede:	250f      	movs	r5, #15
 8003ee0:	197c      	adds	r4, r7, r5
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff fea0 	bl	8003c2c <dir_next>
 8003eec:	0003      	movs	r3, r0
 8003eee:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8003ef0:	197b      	adds	r3, r7, r5
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0c7      	beq.n	8003e88 <dir_alloc+0x28>
 8003ef8:	e000      	b.n	8003efc <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8003efa:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003efc:	220f      	movs	r2, #15
 8003efe:	18bb      	adds	r3, r7, r2
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d102      	bne.n	8003f0c <dir_alloc+0xac>
 8003f06:	18bb      	adds	r3, r7, r2
 8003f08:	2207      	movs	r2, #7
 8003f0a:	701a      	strb	r2, [r3, #0]
	return res;
 8003f0c:	230f      	movs	r3, #15
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	781b      	ldrb	r3, [r3, #0]
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b004      	add	sp, #16
 8003f18:	bdb0      	pop	{r4, r5, r7, pc}

08003f1a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	331b      	adds	r3, #27
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	331a      	adds	r3, #26
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	4313      	orrs	r3, r2
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	5cd3      	ldrb	r3, [r2, r3]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d10f      	bne.n	8003f6a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3315      	adds	r3, #21
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	3314      	adds	r3, #20
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b21b      	sxth	r3, r3
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	b21b      	sxth	r3, r3
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	041b      	lsls	r3, r3, #16
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

	return cl;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	331a      	adds	r3, #26
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	331b      	adds	r3, #27
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	0c1a      	lsrs	r2, r3, #16
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3315      	adds	r3, #21
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8003fbe:	b5b0      	push	{r4, r5, r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003fc6:	2517      	movs	r5, #23
 8003fc8:	197c      	adds	r4, r7, r5
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2100      	movs	r1, #0
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff fd7c 	bl	8003acc <dir_sdi>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8003fd8:	197b      	adds	r3, r7, r5
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <dir_find+0x28>
 8003fe0:	197b      	adds	r3, r7, r5
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	e04b      	b.n	800407e <dir_find+0xc0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	58d0      	ldr	r0, [r2, r3]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	2384      	movs	r3, #132	; 0x84
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	58d3      	ldr	r3, [r2, r3]
 8003ff6:	2517      	movs	r5, #23
 8003ff8:	197c      	adds	r4, r7, r5
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	f7ff f8e2 	bl	80031c4 <move_window>
 8004000:	0003      	movs	r3, r0
 8004002:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8004004:	0029      	movs	r1, r5
 8004006:	187b      	adds	r3, r7, r1
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d131      	bne.n	8004072 <dir_find+0xb4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	2385      	movs	r3, #133	; 0x85
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	58d3      	ldr	r3, [r2, r3]
 8004016:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004018:	200f      	movs	r0, #15
 800401a:	183b      	adds	r3, r7, r0
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	7812      	ldrb	r2, [r2, #0]
 8004020:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004022:	183b      	adds	r3, r7, r0
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <dir_find+0x74>
 800402a:	187b      	adds	r3, r7, r1
 800402c:	2204      	movs	r2, #4
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	e022      	b.n	8004078 <dir_find+0xba>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	330b      	adds	r3, #11
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	001a      	movs	r2, r3
 800403a:	2308      	movs	r3, #8
 800403c:	4013      	ands	r3, r2
 800403e:	d10a      	bne.n	8004056 <dir_find+0x98>
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	2386      	movs	r3, #134	; 0x86
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	58d1      	ldr	r1, [r2, r3]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	220b      	movs	r2, #11
 800404c:	0018      	movs	r0, r3
 800404e:	f7fe fe63 	bl	8002d18 <mem_cmp>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d00f      	beq.n	8004076 <dir_find+0xb8>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004056:	2517      	movs	r5, #23
 8004058:	197c      	adds	r4, r7, r5
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2100      	movs	r1, #0
 800405e:	0018      	movs	r0, r3
 8004060:	f7ff fde4 	bl	8003c2c <dir_next>
 8004064:	0003      	movs	r3, r0
 8004066:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8004068:	197b      	adds	r3, r7, r5
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ba      	beq.n	8003fe6 <dir_find+0x28>
 8004070:	e002      	b.n	8004078 <dir_find+0xba>
		if (res != FR_OK) break;
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	e000      	b.n	8004078 <dir_find+0xba>
			break;
 8004076:	46c0      	nop			; (mov r8, r8)

	return res;
 8004078:	2317      	movs	r3, #23
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b006      	add	sp, #24
 8004084:	bdb0      	pop	{r4, r5, r7, pc}

08004086 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004086:	b5b0      	push	{r4, r5, r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800408e:	250f      	movs	r5, #15
 8004090:	197c      	adds	r4, r7, r5
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2101      	movs	r1, #1
 8004096:	0018      	movs	r0, r3
 8004098:	f7ff fee2 	bl	8003e60 <dir_alloc>
 800409c:	0003      	movs	r3, r0
 800409e:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80040a0:	0029      	movs	r1, r5
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d12f      	bne.n	800410a <dir_register+0x84>
		res = move_window(dp->fs, dp->sect);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	58d0      	ldr	r0, [r2, r3]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	2384      	movs	r3, #132	; 0x84
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	58d3      	ldr	r3, [r2, r3]
 80040ba:	000d      	movs	r5, r1
 80040bc:	187c      	adds	r4, r7, r1
 80040be:	0019      	movs	r1, r3
 80040c0:	f7ff f880 	bl	80031c4 <move_window>
 80040c4:	0003      	movs	r3, r0
 80040c6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80040c8:	197b      	adds	r3, r7, r5
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d11c      	bne.n	800410a <dir_register+0x84>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	2385      	movs	r3, #133	; 0x85
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	58d3      	ldr	r3, [r2, r3]
 80040d8:	2220      	movs	r2, #32
 80040da:	2100      	movs	r1, #0
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fe fe02 	bl	8002ce6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	2385      	movs	r3, #133	; 0x85
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	58d0      	ldr	r0, [r2, r3]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	2386      	movs	r3, #134	; 0x86
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	58d3      	ldr	r3, [r2, r3]
 80040f2:	220b      	movs	r2, #11
 80040f4:	0019      	movs	r1, r3
 80040f6:	f7fe fdd9 	bl	8002cac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	58d2      	ldr	r2, [r2, r3]
 8004102:	2381      	movs	r3, #129	; 0x81
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	2101      	movs	r1, #1
 8004108:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 800410a:	230f      	movs	r3, #15
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b004      	add	sp, #16
 8004116:	bdb0      	pop	{r4, r5, r7, pc}

08004118 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e002      	b.n	8004130 <create_name+0x18>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b2f      	cmp	r3, #47	; 0x2f
 8004136:	d0f8      	beq.n	800412a <create_name+0x12>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b5c      	cmp	r3, #92	; 0x5c
 800413e:	d0f4      	beq.n	800412a <create_name+0x12>
	sfn = dp->fn;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	2386      	movs	r3, #134	; 0x86
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	58d3      	ldr	r3, [r2, r3]
 8004148:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	220b      	movs	r2, #11
 800414e:	2120      	movs	r1, #32
 8004150:	0018      	movs	r0, r3
 8004152:	f7fe fdc8 	bl	8002ce6 <mem_set>
	si = i = b = 0; ni = 8;
 8004156:	231f      	movs	r3, #31
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	2308      	movs	r3, #8
 8004168:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	617a      	str	r2, [r7, #20]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	18d2      	adds	r2, r2, r3
 8004174:	211e      	movs	r1, #30
 8004176:	187b      	adds	r3, r7, r1
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800417c:	000a      	movs	r2, r1
 800417e:	18bb      	adds	r3, r7, r2
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b20      	cmp	r3, #32
 8004184:	d800      	bhi.n	8004188 <create_name+0x70>
 8004186:	e077      	b.n	8004278 <create_name+0x160>
 8004188:	18bb      	adds	r3, r7, r2
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b2f      	cmp	r3, #47	; 0x2f
 800418e:	d100      	bne.n	8004192 <create_name+0x7a>
 8004190:	e072      	b.n	8004278 <create_name+0x160>
 8004192:	18bb      	adds	r3, r7, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b5c      	cmp	r3, #92	; 0x5c
 8004198:	d100      	bne.n	800419c <create_name+0x84>
 800419a:	e06d      	b.n	8004278 <create_name+0x160>
		if (c == '.' || i >= ni) {
 800419c:	18bb      	adds	r3, r7, r2
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b2e      	cmp	r3, #46	; 0x2e
 80041a2:	d003      	beq.n	80041ac <create_name+0x94>
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d314      	bcc.n	80041d6 <create_name+0xbe>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d104      	bne.n	80041bc <create_name+0xa4>
 80041b2:	231e      	movs	r3, #30
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b2e      	cmp	r3, #46	; 0x2e
 80041ba:	d001      	beq.n	80041c0 <create_name+0xa8>
 80041bc:	2306      	movs	r3, #6
 80041be:	e0a3      	b.n	8004308 <create_name+0x1f0>
			i = 8; ni = 11;
 80041c0:	2308      	movs	r3, #8
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	230b      	movs	r3, #11
 80041c6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80041c8:	221f      	movs	r2, #31
 80041ca:	18bb      	adds	r3, r7, r2
 80041cc:	18ba      	adds	r2, r7, r2
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e04f      	b.n	8004276 <create_name+0x15e>
		}
		if (c >= 0x80) {				/* Extended character? */
 80041d6:	201e      	movs	r0, #30
 80041d8:	183b      	adds	r3, r7, r0
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da0e      	bge.n	8004200 <create_name+0xe8>
			b |= 3;						/* Eliminate NT flag */
 80041e2:	221f      	movs	r2, #31
 80041e4:	18bb      	adds	r3, r7, r2
 80041e6:	18ba      	adds	r2, r7, r2
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	2103      	movs	r1, #3
 80041ec:	430a      	orrs	r2, r1
 80041ee:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80041f0:	183b      	adds	r3, r7, r0
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	3b80      	subs	r3, #128	; 0x80
 80041f6:	001a      	movs	r2, r3
 80041f8:	183b      	adds	r3, r7, r0
 80041fa:	4945      	ldr	r1, [pc, #276]	; (8004310 <create_name+0x1f8>)
 80041fc:	5c8a      	ldrb	r2, [r1, r2]
 80041fe:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004200:	231e      	movs	r3, #30
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	4b43      	ldr	r3, [pc, #268]	; (8004314 <create_name+0x1fc>)
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f7fe fda9 	bl	8002d62 <chk_chr>
 8004210:	1e03      	subs	r3, r0, #0
 8004212:	d001      	beq.n	8004218 <create_name+0x100>
				return FR_INVALID_NAME;
 8004214:	2306      	movs	r3, #6
 8004216:	e077      	b.n	8004308 <create_name+0x1f0>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004218:	221e      	movs	r2, #30
 800421a:	18bb      	adds	r3, r7, r2
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d90b      	bls.n	800423a <create_name+0x122>
 8004222:	18bb      	adds	r3, r7, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b5a      	cmp	r3, #90	; 0x5a
 8004228:	d807      	bhi.n	800423a <create_name+0x122>
				b |= 2;
 800422a:	221f      	movs	r2, #31
 800422c:	18bb      	adds	r3, r7, r2
 800422e:	18ba      	adds	r2, r7, r2
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	2102      	movs	r1, #2
 8004234:	430a      	orrs	r2, r1
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e014      	b.n	8004264 <create_name+0x14c>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800423a:	201e      	movs	r0, #30
 800423c:	183b      	adds	r3, r7, r0
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b60      	cmp	r3, #96	; 0x60
 8004242:	d90f      	bls.n	8004264 <create_name+0x14c>
 8004244:	183b      	adds	r3, r7, r0
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b7a      	cmp	r3, #122	; 0x7a
 800424a:	d80b      	bhi.n	8004264 <create_name+0x14c>
					b |= 1; c -= 0x20;
 800424c:	221f      	movs	r2, #31
 800424e:	18bb      	adds	r3, r7, r2
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	2101      	movs	r1, #1
 8004256:	430a      	orrs	r2, r1
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	183b      	adds	r3, r7, r0
 800425c:	183a      	adds	r2, r7, r0
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	3a20      	subs	r2, #32
 8004262:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	613a      	str	r2, [r7, #16]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	221e      	movs	r2, #30
 8004270:	18ba      	adds	r2, r7, r2
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004276:	e778      	b.n	800416a <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	18d2      	adds	r2, r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004282:	231e      	movs	r3, #30
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b20      	cmp	r3, #32
 800428a:	d801      	bhi.n	8004290 <create_name+0x178>
 800428c:	2204      	movs	r2, #4
 800428e:	e000      	b.n	8004292 <create_name+0x17a>
 8004290:	2200      	movs	r2, #0
 8004292:	231e      	movs	r3, #30
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <create_name+0x18a>
 800429e:	2306      	movs	r3, #6
 80042a0:	e032      	b.n	8004308 <create_name+0x1f0>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2be5      	cmp	r3, #229	; 0xe5
 80042a8:	d102      	bne.n	80042b0 <create_name+0x198>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2205      	movs	r2, #5
 80042ae:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d105      	bne.n	80042c2 <create_name+0x1aa>
 80042b6:	221f      	movs	r2, #31
 80042b8:	18bb      	adds	r3, r7, r2
 80042ba:	18ba      	adds	r2, r7, r2
 80042bc:	7812      	ldrb	r2, [r2, #0]
 80042be:	0092      	lsls	r2, r2, #2
 80042c0:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80042c2:	231f      	movs	r3, #31
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2203      	movs	r2, #3
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d106      	bne.n	80042de <create_name+0x1c6>
 80042d0:	221e      	movs	r2, #30
 80042d2:	18bb      	adds	r3, r7, r2
 80042d4:	18ba      	adds	r2, r7, r2
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	2110      	movs	r1, #16
 80042da:	430a      	orrs	r2, r1
 80042dc:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80042de:	231f      	movs	r3, #31
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	220c      	movs	r2, #12
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d106      	bne.n	80042fa <create_name+0x1e2>
 80042ec:	221e      	movs	r2, #30
 80042ee:	18bb      	adds	r3, r7, r2
 80042f0:	18ba      	adds	r2, r7, r2
 80042f2:	7812      	ldrb	r2, [r2, #0]
 80042f4:	2108      	movs	r1, #8
 80042f6:	430a      	orrs	r2, r1
 80042f8:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	330b      	adds	r3, #11
 80042fe:	221e      	movs	r2, #30
 8004300:	18ba      	adds	r2, r7, r2
 8004302:	7812      	ldrb	r2, [r2, #0]
 8004304:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004306:	2300      	movs	r3, #0
#endif
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b008      	add	sp, #32
 800430e:	bd80      	pop	{r7, pc}
 8004310:	08005cf8 	.word	0x08005cf8
 8004314:	08005c6c 	.word	0x08005c6c

08004318 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004318:	b5b0      	push	{r4, r5, r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b2f      	cmp	r3, #47	; 0x2f
 8004328:	d003      	beq.n	8004332 <follow_path+0x1a>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b5c      	cmp	r3, #92	; 0x5c
 8004330:	d102      	bne.n	8004338 <follow_path+0x20>
		path++;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	2382      	movs	r3, #130	; 0x82
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	2100      	movs	r1, #0
 8004340:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b1f      	cmp	r3, #31
 8004348:	d80e      	bhi.n	8004368 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 800434a:	230f      	movs	r3, #15
 800434c:	18fc      	adds	r4, r7, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2100      	movs	r1, #0
 8004352:	0018      	movs	r0, r3
 8004354:	f7ff fbba 	bl	8003acc <dir_sdi>
 8004358:	0003      	movs	r3, r0
 800435a:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	2385      	movs	r3, #133	; 0x85
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	2100      	movs	r1, #0
 8004364:	50d1      	str	r1, [r2, r3]
 8004366:	e058      	b.n	800441a <follow_path+0x102>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004368:	250f      	movs	r5, #15
 800436a:	197c      	adds	r4, r7, r5
 800436c:	003a      	movs	r2, r7
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fed0 	bl	8004118 <create_name>
 8004378:	0003      	movs	r3, r0
 800437a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800437c:	197b      	adds	r3, r7, r5
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d145      	bne.n	8004410 <follow_path+0xf8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004384:	197c      	adds	r4, r7, r5
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff fe18 	bl	8003fbe <dir_find>
 800438e:	0003      	movs	r3, r0
 8004390:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	2386      	movs	r3, #134	; 0x86
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	58d2      	ldr	r2, [r2, r3]
 800439a:	210e      	movs	r1, #14
 800439c:	187b      	adds	r3, r7, r1
 800439e:	7ad2      	ldrb	r2, [r2, #11]
 80043a0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80043a2:	197b      	adds	r3, r7, r5
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <follow_path+0xac>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80043aa:	197b      	adds	r3, r7, r5
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d130      	bne.n	8004414 <follow_path+0xfc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2204      	movs	r2, #4
 80043b8:	4013      	ands	r3, r2
 80043ba:	d12b      	bne.n	8004414 <follow_path+0xfc>
 80043bc:	197b      	adds	r3, r7, r5
 80043be:	2205      	movs	r2, #5
 80043c0:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80043c2:	e027      	b.n	8004414 <follow_path+0xfc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80043c4:	230e      	movs	r3, #14
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2204      	movs	r2, #4
 80043cc:	4013      	ands	r3, r2
 80043ce:	d123      	bne.n	8004418 <follow_path+0x100>
			dir = dp->dir;						/* Follow the sub-directory */
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	2385      	movs	r3, #133	; 0x85
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	58d3      	ldr	r3, [r2, r3]
 80043d8:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	330b      	adds	r3, #11
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	001a      	movs	r2, r3
 80043e2:	2310      	movs	r3, #16
 80043e4:	4013      	ands	r3, r2
 80043e6:	d104      	bne.n	80043f2 <follow_path+0xda>
				res = FR_NO_PATH; break;
 80043e8:	230f      	movs	r3, #15
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	2205      	movs	r2, #5
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e013      	b.n	800441a <follow_path+0x102>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	58d3      	ldr	r3, [r2, r3]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff fd8b 	bl	8003f1a <ld_clust>
 8004404:	0001      	movs	r1, r0
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	2382      	movs	r3, #130	; 0x82
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800440e:	e7ab      	b.n	8004368 <follow_path+0x50>
			if (res != FR_OK) break;
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	e002      	b.n	800441a <follow_path+0x102>
				break;
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	e000      	b.n	800441a <follow_path+0x102>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004418:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800441a:	230f      	movs	r3, #15
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	781b      	ldrb	r3, [r3, #0]
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bdb0      	pop	{r4, r5, r7, pc}

08004428 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004430:	2301      	movs	r3, #1
 8004432:	425b      	negs	r3, r3
 8004434:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d031      	beq.n	80044a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e002      	b.n	800444c <get_ldnumber+0x24>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	3301      	adds	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b20      	cmp	r3, #32
 8004452:	d903      	bls.n	800445c <get_ldnumber+0x34>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b3a      	cmp	r3, #58	; 0x3a
 800445a:	d1f4      	bne.n	8004446 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b3a      	cmp	r3, #58	; 0x3a
 8004462:	d11c      	bne.n	800449e <get_ldnumber+0x76>
			tp = *path;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	60fa      	str	r2, [r7, #12]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	3b30      	subs	r3, #48	; 0x30
 8004474:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b09      	cmp	r3, #9
 800447a:	d80e      	bhi.n	800449a <get_ldnumber+0x72>
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	429a      	cmp	r2, r3
 8004482:	d10a      	bne.n	800449a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <get_ldnumber+0x72>
					vol = (int)i;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3301      	adds	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	e002      	b.n	80044a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80044a2:	693b      	ldr	r3, [r7, #16]
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b006      	add	sp, #24
 80044aa:	bd80      	pop	{r7, pc}

080044ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	2381      	movs	r3, #129	; 0x81
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	2100      	movs	r1, #0
 80044be:	54d1      	strb	r1, [r2, r3]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	238b      	movs	r3, #139	; 0x8b
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	2101      	movs	r1, #1
 80044c8:	4249      	negs	r1, r1
 80044ca:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fe fe76 	bl	80031c4 <move_window>
 80044d8:	1e03      	subs	r3, r0, #0
 80044da:	d001      	beq.n	80044e0 <check_fs+0x34>
		return 3;
 80044dc:	2303      	movs	r3, #3
 80044de:	e04b      	b.n	8004578 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	33ff      	adds	r3, #255	; 0xff
 80044e4:	33ff      	adds	r3, #255	; 0xff
 80044e6:	3301      	adds	r3, #1
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	b21a      	sxth	r2, r3
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	23ff      	movs	r3, #255	; 0xff
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	5ccb      	ldrb	r3, [r1, r3]
 80044f6:	b21b      	sxth	r3, r3
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	4a20      	ldr	r2, [pc, #128]	; (8004580 <check_fs+0xd4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d001      	beq.n	8004506 <check_fs+0x5a>
		return 2;
 8004502:	2302      	movs	r3, #2
 8004504:	e038      	b.n	8004578 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3336      	adds	r3, #54	; 0x36
 800450a:	3303      	adds	r3, #3
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	061a      	lsls	r2, r3, #24
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3336      	adds	r3, #54	; 0x36
 8004514:	3302      	adds	r3, #2
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	4313      	orrs	r3, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	3236      	adds	r2, #54	; 0x36
 8004520:	3201      	adds	r2, #1
 8004522:	7812      	ldrb	r2, [r2, #0]
 8004524:	0212      	lsls	r2, r2, #8
 8004526:	4313      	orrs	r3, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	2136      	movs	r1, #54	; 0x36
 800452c:	5c52      	ldrb	r2, [r2, r1]
 800452e:	4313      	orrs	r3, r2
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	0a1b      	lsrs	r3, r3, #8
 8004534:	4a13      	ldr	r2, [pc, #76]	; (8004584 <check_fs+0xd8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <check_fs+0x92>
		return 0;
 800453a:	2300      	movs	r3, #0
 800453c:	e01c      	b.n	8004578 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3352      	adds	r3, #82	; 0x52
 8004542:	3303      	adds	r3, #3
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	061a      	lsls	r2, r3, #24
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3352      	adds	r3, #82	; 0x52
 800454c:	3302      	adds	r3, #2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	4313      	orrs	r3, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	3252      	adds	r2, #82	; 0x52
 8004558:	3201      	adds	r2, #1
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	0212      	lsls	r2, r2, #8
 800455e:	4313      	orrs	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	2152      	movs	r1, #82	; 0x52
 8004564:	5c52      	ldrb	r2, [r2, r1]
 8004566:	4313      	orrs	r3, r2
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	0a1b      	lsrs	r3, r3, #8
 800456c:	4a05      	ldr	r2, [pc, #20]	; (8004584 <check_fs+0xd8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <check_fs+0xca>
		return 0;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <check_fs+0xcc>

	return 1;
 8004576:	2301      	movs	r3, #1
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	ffffaa55 	.word	0xffffaa55
 8004584:	00544146 	.word	0x00544146

08004588 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004588:	b5b0      	push	{r4, r5, r7, lr}
 800458a:	b096      	sub	sp, #88	; 0x58
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	1dfb      	adds	r3, r7, #7
 8004594:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	0018      	movs	r0, r3
 80045a0:	f7ff ff42 	bl	8004428 <get_ldnumber>
 80045a4:	0003      	movs	r3, r0
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80045a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da01      	bge.n	80045b2 <find_volume+0x2a>
 80045ae:	230b      	movs	r3, #11
 80045b0:	e2f2      	b.n	8004b98 <find_volume+0x610>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80045b2:	4bcf      	ldr	r3, [pc, #828]	; (80048f0 <find_volume+0x368>)
 80045b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	58d3      	ldr	r3, [r2, r3]
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <find_volume+0x3e>
 80045c2:	230c      	movs	r3, #12
 80045c4:	e2e8      	b.n	8004b98 <find_volume+0x610>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ca:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80045cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 80045d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045da:	4ac6      	ldr	r2, [pc, #792]	; (80048f4 <find_volume+0x36c>)
 80045dc:	5c9b      	ldrb	r3, [r3, r2]
 80045de:	2537      	movs	r5, #55	; 0x37
 80045e0:	197c      	adds	r4, r7, r5
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7fe fa98 	bl	8002b18 <disk_status>
 80045e8:	0003      	movs	r3, r0
 80045ea:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80045ec:	0029      	movs	r1, r5
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2201      	movs	r2, #1
 80045f4:	4013      	ands	r3, r2
 80045f6:	d10c      	bne.n	8004612 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <find_volume+0x86>
 8004600:	187b      	adds	r3, r7, r1
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2204      	movs	r2, #4
 8004606:	4013      	ands	r3, r2
 8004608:	d001      	beq.n	800460e <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 800460a:	230a      	movs	r3, #10
 800460c:	e2c4      	b.n	8004b98 <find_volume+0x610>
			return FR_OK;				/* The file system object is valid */
 800460e:	2300      	movs	r3, #0
 8004610:	e2c2      	b.n	8004b98 <find_volume+0x610>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	2100      	movs	r1, #0
 800461a:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461e:	b2d9      	uxtb	r1, r3
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	4ab4      	ldr	r2, [pc, #720]	; (80048f4 <find_volume+0x36c>)
 8004624:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	4ab2      	ldr	r2, [pc, #712]	; (80048f4 <find_volume+0x36c>)
 800462a:	5c9b      	ldrb	r3, [r3, r2]
 800462c:	2537      	movs	r5, #55	; 0x37
 800462e:	197c      	adds	r4, r7, r5
 8004630:	0018      	movs	r0, r3
 8004632:	f7fe fa93 	bl	8002b5c <disk_initialize>
 8004636:	0003      	movs	r3, r0
 8004638:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800463a:	197b      	adds	r3, r7, r5
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	d001      	beq.n	8004648 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004644:	2303      	movs	r3, #3
 8004646:	e2a7      	b.n	8004b98 <find_volume+0x610>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004648:	1dfb      	adds	r3, r7, #7
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <find_volume+0xd8>
 8004650:	2337      	movs	r3, #55	; 0x37
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2204      	movs	r2, #4
 8004658:	4013      	ands	r3, r2
 800465a:	d001      	beq.n	8004660 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 800465c:	230a      	movs	r3, #10
 800465e:	e29b      	b.n	8004b98 <find_volume+0x610>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004664:	2557      	movs	r5, #87	; 0x57
 8004666:	197c      	adds	r4, r7, r5
 8004668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f7ff ff1c 	bl	80044ac <check_fs>
 8004674:	0003      	movs	r3, r0
 8004676:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004678:	197b      	adds	r3, r7, r5
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d155      	bne.n	800472c <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004680:	2300      	movs	r3, #0
 8004682:	643b      	str	r3, [r7, #64]	; 0x40
 8004684:	e027      	b.n	80046d6 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	33bf      	adds	r3, #191	; 0xbf
 800468e:	33ff      	adds	r3, #255	; 0xff
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	3304      	adds	r3, #4
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d012      	beq.n	80046c4 <find_volume+0x13c>
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	330b      	adds	r3, #11
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	061a      	lsls	r2, r3, #24
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	330a      	adds	r3, #10
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	4313      	orrs	r3, r2
 80046b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b2:	3209      	adds	r2, #9
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	0212      	lsls	r2, r2, #8
 80046b8:	4313      	orrs	r3, r2
 80046ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046bc:	3208      	adds	r2, #8
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	e000      	b.n	80046c6 <find_volume+0x13e>
 80046c4:	2300      	movs	r3, #0
 80046c6:	2214      	movs	r2, #20
 80046c8:	18ba      	adds	r2, r7, r2
 80046ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046cc:	0089      	lsls	r1, r1, #2
 80046ce:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d2:	3301      	adds	r3, #1
 80046d4:	643b      	str	r3, [r7, #64]	; 0x40
 80046d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d9d4      	bls.n	8004686 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80046dc:	2300      	movs	r3, #0
 80046de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80046e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <find_volume+0x164>
 80046e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e8:	3b01      	subs	r3, #1
 80046ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80046ec:	2314      	movs	r3, #20
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f2:	0092      	lsls	r2, r2, #2
 80046f4:	58d3      	ldr	r3, [r2, r3]
 80046f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80046f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <find_volume+0x188>
 80046fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f7ff fed1 	bl	80044ac <check_fs>
 800470a:	0003      	movs	r3, r0
 800470c:	001a      	movs	r2, r3
 800470e:	e000      	b.n	8004712 <find_volume+0x18a>
 8004710:	2202      	movs	r2, #2
 8004712:	2157      	movs	r1, #87	; 0x57
 8004714:	187b      	adds	r3, r7, r1
 8004716:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004718:	187b      	adds	r3, r7, r1
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <find_volume+0x1a4>
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	3301      	adds	r3, #1
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	2b03      	cmp	r3, #3
 800472a:	d9df      	bls.n	80046ec <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800472c:	2357      	movs	r3, #87	; 0x57
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d101      	bne.n	800473a <find_volume+0x1b2>
 8004736:	2301      	movs	r3, #1
 8004738:	e22e      	b.n	8004b98 <find_volume+0x610>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800473a:	2357      	movs	r3, #87	; 0x57
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <find_volume+0x1c0>
 8004744:	230d      	movs	r3, #13
 8004746:	e227      	b.n	8004b98 <find_volume+0x610>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	7b1b      	ldrb	r3, [r3, #12]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	b21a      	sxth	r2, r3
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	7adb      	ldrb	r3, [r3, #11]
 8004754:	b21b      	sxth	r3, r3
 8004756:	4313      	orrs	r3, r2
 8004758:	b21a      	sxth	r2, r3
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 8004762:	230d      	movs	r3, #13
 8004764:	e218      	b.n	8004b98 <find_volume+0x610>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	7ddb      	ldrb	r3, [r3, #23]
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	b21a      	sxth	r2, r3
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	7d9b      	ldrb	r3, [r3, #22]
 8004772:	b21b      	sxth	r3, r3
 8004774:	4313      	orrs	r3, r2
 8004776:	b21b      	sxth	r3, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d112      	bne.n	80047a8 <find_volume+0x220>
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	2227      	movs	r2, #39	; 0x27
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	061a      	lsls	r2, r3, #24
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	2126      	movs	r1, #38	; 0x26
 800478e:	5c5b      	ldrb	r3, [r3, r1]
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	4313      	orrs	r3, r2
 8004794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004796:	2125      	movs	r1, #37	; 0x25
 8004798:	5c52      	ldrb	r2, [r2, r1]
 800479a:	0212      	lsls	r2, r2, #8
 800479c:	4313      	orrs	r3, r2
 800479e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047a0:	2124      	movs	r1, #36	; 0x24
 80047a2:	5c52      	ldrb	r2, [r2, r1]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80047a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047aa:	2386      	movs	r3, #134	; 0x86
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80047b0:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	7c19      	ldrb	r1, [r3, #16]
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	4a4f      	ldr	r2, [pc, #316]	; (80048f8 <find_volume+0x370>)
 80047ba:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	4a4e      	ldr	r2, [pc, #312]	; (80048f8 <find_volume+0x370>)
 80047c0:	5c9b      	ldrb	r3, [r3, r2]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d006      	beq.n	80047d4 <find_volume+0x24c>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	4a4b      	ldr	r2, [pc, #300]	; (80048f8 <find_volume+0x370>)
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d001      	beq.n	80047d4 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 80047d0:	230d      	movs	r3, #13
 80047d2:	e1e1      	b.n	8004b98 <find_volume+0x610>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	4a48      	ldr	r2, [pc, #288]	; (80048f8 <find_volume+0x370>)
 80047d8:	5c9b      	ldrb	r3, [r3, r2]
 80047da:	001a      	movs	r2, r3
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	4353      	muls	r3, r2
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	7b59      	ldrb	r1, [r3, #13]
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	4a44      	ldr	r2, [pc, #272]	; (80048fc <find_volume+0x374>)
 80047ea:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	4a43      	ldr	r2, [pc, #268]	; (80048fc <find_volume+0x374>)
 80047f0:	5c9b      	ldrb	r3, [r3, r2]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <find_volume+0x282>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	4a40      	ldr	r2, [pc, #256]	; (80048fc <find_volume+0x374>)
 80047fa:	5c9b      	ldrb	r3, [r3, r2]
 80047fc:	0019      	movs	r1, r3
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	4a3e      	ldr	r2, [pc, #248]	; (80048fc <find_volume+0x374>)
 8004802:	5c9b      	ldrb	r3, [r3, r2]
 8004804:	3b01      	subs	r3, #1
 8004806:	400b      	ands	r3, r1
 8004808:	d001      	beq.n	800480e <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 800480a:	230d      	movs	r3, #13
 800480c:	e1c4      	b.n	8004b98 <find_volume+0x610>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	7c9b      	ldrb	r3, [r3, #18]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	b21a      	sxth	r2, r3
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	7c5b      	ldrb	r3, [r3, #17]
 800481a:	b21b      	sxth	r3, r3
 800481c:	4313      	orrs	r3, r2
 800481e:	b21b      	sxth	r3, r3
 8004820:	b299      	uxth	r1, r3
 8004822:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004824:	2382      	movs	r3, #130	; 0x82
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800482a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800482c:	2382      	movs	r3, #130	; 0x82
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	5ad3      	ldrh	r3, [r2, r3]
 8004832:	220f      	movs	r2, #15
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 800483c:	230d      	movs	r3, #13
 800483e:	e1ab      	b.n	8004b98 <find_volume+0x610>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	7d1b      	ldrb	r3, [r3, #20]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	b21a      	sxth	r2, r3
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	7cdb      	ldrb	r3, [r3, #19]
 800484c:	b21b      	sxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	b21b      	sxth	r3, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004858:	2b00      	cmp	r3, #0
 800485a:	d112      	bne.n	8004882 <find_volume+0x2fa>
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	2223      	movs	r2, #35	; 0x23
 8004860:	5c9b      	ldrb	r3, [r3, r2]
 8004862:	061a      	lsls	r2, r3, #24
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	2122      	movs	r1, #34	; 0x22
 8004868:	5c5b      	ldrb	r3, [r3, r1]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	4313      	orrs	r3, r2
 800486e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004870:	2121      	movs	r1, #33	; 0x21
 8004872:	5c52      	ldrb	r2, [r2, r1]
 8004874:	0212      	lsls	r2, r2, #8
 8004876:	4313      	orrs	r3, r2
 8004878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800487a:	2120      	movs	r1, #32
 800487c:	5c52      	ldrb	r2, [r2, r1]
 800487e:	4313      	orrs	r3, r2
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	7bdb      	ldrb	r3, [r3, #15]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	b21a      	sxth	r2, r3
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	7b9b      	ldrb	r3, [r3, #14]
 800488e:	b21b      	sxth	r3, r3
 8004890:	4313      	orrs	r3, r2
 8004892:	b21a      	sxth	r2, r3
 8004894:	212e      	movs	r1, #46	; 0x2e
 8004896:	187b      	adds	r3, r7, r1
 8004898:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800489a:	187b      	adds	r3, r7, r1
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <find_volume+0x31e>
 80048a2:	230d      	movs	r3, #13
 80048a4:	e178      	b.n	8004b98 <find_volume+0x610>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80048a6:	232e      	movs	r3, #46	; 0x2e
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	18d3      	adds	r3, r2, r3
 80048b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b2:	2282      	movs	r2, #130	; 0x82
 80048b4:	0092      	lsls	r2, r2, #2
 80048b6:	5a8a      	ldrh	r2, [r1, r2]
 80048b8:	0912      	lsrs	r2, r2, #4
 80048ba:	b292      	uxth	r2, r2
 80048bc:	189b      	adds	r3, r3, r2
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80048c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d201      	bcs.n	80048cc <find_volume+0x344>
 80048c8:	230d      	movs	r3, #13
 80048ca:	e165      	b.n	8004b98 <find_volume+0x610>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80048cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	1ad2      	subs	r2, r2, r3
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	4909      	ldr	r1, [pc, #36]	; (80048fc <find_volume+0x374>)
 80048d6:	5c5b      	ldrb	r3, [r3, r1]
 80048d8:	0019      	movs	r1, r3
 80048da:	0010      	movs	r0, r2
 80048dc:	f7fb fc14 	bl	8000108 <__udivsi3>
 80048e0:	0003      	movs	r3, r0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <find_volume+0x378>
 80048ea:	230d      	movs	r3, #13
 80048ec:	e154      	b.n	8004b98 <find_volume+0x610>
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	20000538 	.word	0x20000538
 80048f4:	00000201 	.word	0x00000201
 80048f8:	00000203 	.word	0x00000203
 80048fc:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8004900:	2157      	movs	r1, #87	; 0x57
 8004902:	187b      	adds	r3, r7, r1
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	4aa5      	ldr	r2, [pc, #660]	; (8004ba0 <find_volume+0x618>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d902      	bls.n	8004916 <find_volume+0x38e>
 8004910:	187b      	adds	r3, r7, r1
 8004912:	2202      	movs	r2, #2
 8004914:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	4aa2      	ldr	r2, [pc, #648]	; (8004ba4 <find_volume+0x61c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d903      	bls.n	8004926 <find_volume+0x39e>
 800491e:	2357      	movs	r3, #87	; 0x57
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	2203      	movs	r2, #3
 8004924:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	1c99      	adds	r1, r3, #2
 800492a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492c:	2385      	movs	r3, #133	; 0x85
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8004932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004934:	2387      	movs	r3, #135	; 0x87
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800493a:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800493c:	232e      	movs	r3, #46	; 0x2e
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004944:	18d1      	adds	r1, r2, r3
 8004946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004948:	2388      	movs	r3, #136	; 0x88
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 800494e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	18d1      	adds	r1, r2, r3
 8004954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004956:	238a      	movs	r3, #138	; 0x8a
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 800495c:	2357      	movs	r3, #87	; 0x57
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d125      	bne.n	80049b2 <find_volume+0x42a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004968:	2382      	movs	r3, #130	; 0x82
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	5ad3      	ldrh	r3, [r2, r3]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <find_volume+0x3ee>
 8004972:	230d      	movs	r3, #13
 8004974:	e110      	b.n	8004b98 <find_volume+0x610>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	222f      	movs	r2, #47	; 0x2f
 800497a:	5c9b      	ldrb	r3, [r3, r2]
 800497c:	061a      	lsls	r2, r3, #24
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	212e      	movs	r1, #46	; 0x2e
 8004982:	5c5b      	ldrb	r3, [r3, r1]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	4313      	orrs	r3, r2
 8004988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498a:	212d      	movs	r1, #45	; 0x2d
 800498c:	5c52      	ldrb	r2, [r2, r1]
 800498e:	0212      	lsls	r2, r2, #8
 8004990:	4313      	orrs	r3, r2
 8004992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	5c52      	ldrb	r2, [r2, r1]
 8004998:	4313      	orrs	r3, r2
 800499a:	0019      	movs	r1, r3
 800499c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800499e:	2389      	movs	r3, #137	; 0x89
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80049a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a6:	2385      	movs	r3, #133	; 0x85
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	58d3      	ldr	r3, [r2, r3]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	647b      	str	r3, [r7, #68]	; 0x44
 80049b0:	e02c      	b.n	8004a0c <find_volume+0x484>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80049b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b4:	2382      	movs	r3, #130	; 0x82
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	5ad3      	ldrh	r3, [r2, r3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <find_volume+0x43a>
 80049be:	230d      	movs	r3, #13
 80049c0:	e0ea      	b.n	8004b98 <find_volume+0x610>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80049c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c4:	2388      	movs	r3, #136	; 0x88
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	58d2      	ldr	r2, [r2, r3]
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	18d1      	adds	r1, r2, r3
 80049ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d0:	2389      	movs	r3, #137	; 0x89
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80049d6:	2357      	movs	r3, #87	; 0x57
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d105      	bne.n	80049ec <find_volume+0x464>
 80049e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e2:	2385      	movs	r3, #133	; 0x85
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	58d3      	ldr	r3, [r2, r3]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	e00e      	b.n	8004a0a <find_volume+0x482>
 80049ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ee:	2385      	movs	r3, #133	; 0x85
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	58d2      	ldr	r2, [r2, r3]
 80049f4:	0013      	movs	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	085a      	lsrs	r2, r3, #1
 80049fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049fe:	2385      	movs	r3, #133	; 0x85
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	58cb      	ldr	r3, [r1, r3]
 8004a04:	2101      	movs	r1, #1
 8004a06:	400b      	ands	r3, r1
 8004a08:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0e:	2386      	movs	r3, #134	; 0x86
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	58d2      	ldr	r2, [r2, r3]
 8004a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a16:	4964      	ldr	r1, [pc, #400]	; (8004ba8 <find_volume+0x620>)
 8004a18:	468c      	mov	ip, r1
 8004a1a:	4463      	add	r3, ip
 8004a1c:	0a5b      	lsrs	r3, r3, #9
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d201      	bcs.n	8004a26 <find_volume+0x49e>
		return FR_NO_FILESYSTEM;
 8004a22:	230d      	movs	r3, #13
 8004a24:	e0b8      	b.n	8004b98 <find_volume+0x610>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a28:	2384      	movs	r3, #132	; 0x84
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4249      	negs	r1, r1
 8004a30:	50d1      	str	r1, [r2, r3]
 8004a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a34:	2384      	movs	r3, #132	; 0x84
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	58d1      	ldr	r1, [r2, r3]
 8004a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a3c:	2383      	movs	r3, #131	; 0x83
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	4a59      	ldr	r2, [pc, #356]	; (8004bac <find_volume+0x624>)
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004a4a:	2357      	movs	r3, #87	; 0x57
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d000      	beq.n	8004a56 <find_volume+0x4ce>
 8004a54:	e089      	b.n	8004b6a <find_volume+0x5e2>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2231      	movs	r2, #49	; 0x31
 8004a5a:	5c9b      	ldrb	r3, [r3, r2]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	b21a      	sxth	r2, r3
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	2130      	movs	r1, #48	; 0x30
 8004a64:	5c5b      	ldrb	r3, [r3, r1]
 8004a66:	b21b      	sxth	r3, r3
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	b21b      	sxth	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d000      	beq.n	8004a72 <find_volume+0x4ea>
 8004a70:	e07b      	b.n	8004b6a <find_volume+0x5e2>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fe fba2 	bl	80031c4 <move_window>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d172      	bne.n	8004b6a <find_volume+0x5e2>
	{
		fs->fsi_flag = 0;
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	4a49      	ldr	r2, [pc, #292]	; (8004bac <find_volume+0x624>)
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	4a46      	ldr	r2, [pc, #280]	; (8004ba8 <find_volume+0x620>)
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	b21a      	sxth	r2, r3
 8004a96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a98:	23ff      	movs	r3, #255	; 0xff
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	5ccb      	ldrb	r3, [r1, r3]
 8004a9e:	b21b      	sxth	r3, r3
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	b21b      	sxth	r3, r3
 8004aa4:	4a42      	ldr	r2, [pc, #264]	; (8004bb0 <find_volume+0x628>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d15f      	bne.n	8004b6a <find_volume+0x5e2>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	78db      	ldrb	r3, [r3, #3]
 8004aae:	061a      	lsls	r2, r3, #24
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	789b      	ldrb	r3, [r3, #2]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aba:	7852      	ldrb	r2, [r2, #1]
 8004abc:	0212      	lsls	r2, r2, #8
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <find_volume+0x62c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d14e      	bne.n	8004b6a <find_volume+0x5e2>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ace:	23e8      	movs	r3, #232	; 0xe8
 8004ad0:	33ff      	adds	r3, #255	; 0xff
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	061a      	lsls	r2, r3, #24
 8004ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ad8:	23f3      	movs	r3, #243	; 0xf3
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	5ccb      	ldrb	r3, [r1, r3]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ae4:	22e6      	movs	r2, #230	; 0xe6
 8004ae6:	32ff      	adds	r2, #255	; 0xff
 8004ae8:	5c8a      	ldrb	r2, [r1, r2]
 8004aea:	0212      	lsls	r2, r2, #8
 8004aec:	4313      	orrs	r3, r2
 8004aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004af0:	22f2      	movs	r2, #242	; 0xf2
 8004af2:	0052      	lsls	r2, r2, #1
 8004af4:	5c8a      	ldrb	r2, [r1, r2]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <find_volume+0x630>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d135      	bne.n	8004b6a <find_volume+0x5e2>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b00:	23ec      	movs	r3, #236	; 0xec
 8004b02:	33ff      	adds	r3, #255	; 0xff
 8004b04:	5cd3      	ldrb	r3, [r2, r3]
 8004b06:	061a      	lsls	r2, r3, #24
 8004b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b0a:	23f5      	movs	r3, #245	; 0xf5
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	4313      	orrs	r3, r2
 8004b14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b16:	22ea      	movs	r2, #234	; 0xea
 8004b18:	32ff      	adds	r2, #255	; 0xff
 8004b1a:	5c8a      	ldrb	r2, [r1, r2]
 8004b1c:	0212      	lsls	r2, r2, #8
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b22:	22f4      	movs	r2, #244	; 0xf4
 8004b24:	0052      	lsls	r2, r2, #1
 8004b26:	5c8a      	ldrb	r2, [r1, r2]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2e:	2384      	movs	r3, #132	; 0x84
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b36:	23f0      	movs	r3, #240	; 0xf0
 8004b38:	33ff      	adds	r3, #255	; 0xff
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	061a      	lsls	r2, r3, #24
 8004b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b40:	23f7      	movs	r3, #247	; 0xf7
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b4c:	22ee      	movs	r2, #238	; 0xee
 8004b4e:	32ff      	adds	r2, #255	; 0xff
 8004b50:	5c8a      	ldrb	r2, [r1, r2]
 8004b52:	0212      	lsls	r2, r2, #8
 8004b54:	4313      	orrs	r3, r2
 8004b56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b58:	22f6      	movs	r2, #246	; 0xf6
 8004b5a:	0052      	lsls	r2, r2, #1
 8004b5c:	5c8a      	ldrb	r2, [r1, r2]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b64:	2383      	movs	r3, #131	; 0x83
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6c:	2357      	movs	r3, #87	; 0x57
 8004b6e:	18f9      	adds	r1, r7, r3
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	7809      	ldrb	r1, [r1, #0]
 8004b76:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <find_volume+0x634>)
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <find_volume+0x634>)
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <find_volume+0x634>)
 8004b86:	8819      	ldrh	r1, [r3, #0]
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <find_volume+0x638>)
 8004b8c:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fe fa99 	bl	80030c8 <clear_lock>
#endif

	return FR_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b016      	add	sp, #88	; 0x58
 8004b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba0:	00000ff5 	.word	0x00000ff5
 8004ba4:	0000fff5 	.word	0x0000fff5
 8004ba8:	000001ff 	.word	0x000001ff
 8004bac:	00000205 	.word	0x00000205
 8004bb0:	ffffaa55 	.word	0xffffaa55
 8004bb4:	41615252 	.word	0x41615252
 8004bb8:	61417272 	.word	0x61417272
 8004bbc:	2000053c 	.word	0x2000053c
 8004bc0:	00000206 	.word	0x00000206

08004bc4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d028      	beq.n	8004c28 <validate+0x64>
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	58d3      	ldr	r3, [r2, r3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d022      	beq.n	8004c28 <validate+0x64>
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	58d2      	ldr	r2, [r2, r3]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d019      	beq.n	8004c28 <validate+0x64>
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	58d3      	ldr	r3, [r2, r3]
 8004bfc:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <validate+0x74>)
 8004bfe:	5a9a      	ldrh	r2, [r3, r2]
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	2381      	movs	r3, #129	; 0x81
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	5acb      	ldrh	r3, [r1, r3]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d10d      	bne.n	8004c28 <validate+0x64>
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	58d3      	ldr	r3, [r2, r3]
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <validate+0x78>)
 8004c16:	5c9b      	ldrb	r3, [r3, r2]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7fd ff7d 	bl	8002b18 <disk_status>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	001a      	movs	r2, r3
 8004c22:	2301      	movs	r3, #1
 8004c24:	4013      	ands	r3, r2
 8004c26:	d001      	beq.n	8004c2c <validate+0x68>
		return FR_INVALID_OBJECT;
 8004c28:	2309      	movs	r3, #9
 8004c2a:	e000      	b.n	8004c2e <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	00000206 	.word	0x00000206
 8004c3c:	00000201 	.word	0x00000201

08004c40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004c40:	b5b0      	push	{r4, r5, r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	1dfb      	adds	r3, r7, #7
 8004c4c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004c52:	2310      	movs	r3, #16
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff fbe6 	bl	8004428 <get_ldnumber>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da01      	bge.n	8004c6a <f_mount+0x2a>
 8004c66:	230b      	movs	r3, #11
 8004c68:	e034      	b.n	8004cd4 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004c6a:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <f_mount+0x9c>)
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	0092      	lsls	r2, r2, #2
 8004c70:	58d3      	ldr	r3, [r2, r3]
 8004c72:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fe fa23 	bl	80030c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	2100      	movs	r1, #0
 8004c8a:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	2100      	movs	r1, #0
 8004c9a:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <f_mount+0x9c>)
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <f_mount+0x74>
 8004cac:	1dfb      	adds	r3, r7, #7
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <f_mount+0x78>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e00d      	b.n	8004cd4 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004cb8:	2517      	movs	r5, #23
 8004cba:	197c      	adds	r4, r7, r5
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	18f9      	adds	r1, r7, r3
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7ff fc5e 	bl	8004588 <find_volume>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8004cd0:	197b      	adds	r3, r7, r5
 8004cd2:	781b      	ldrb	r3, [r3, #0]
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b008      	add	sp, #32
 8004cda:	bdb0      	pop	{r4, r5, r7, pc}
 8004cdc:	20000538 	.word	0x20000538

08004ce0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce2:	4ccf      	ldr	r4, [pc, #828]	; (8005020 <f_open+0x340>)
 8004ce4:	44a5      	add	sp, r4
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	4bcd      	ldr	r3, [pc, #820]	; (8005024 <f_open+0x344>)
 8004cee:	2194      	movs	r1, #148	; 0x94
 8004cf0:	0089      	lsls	r1, r1, #2
 8004cf2:	185b      	adds	r3, r3, r1
 8004cf4:	19db      	adds	r3, r3, r7
 8004cf6:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <f_open+0x22>
 8004cfe:	2309      	movs	r3, #9
 8004d00:	e262      	b.n	80051c8 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	2100      	movs	r1, #0
 8004d0a:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004d0c:	4bc5      	ldr	r3, [pc, #788]	; (8005024 <f_open+0x344>)
 8004d0e:	2594      	movs	r5, #148	; 0x94
 8004d10:	00ad      	lsls	r5, r5, #2
 8004d12:	195b      	adds	r3, r3, r5
 8004d14:	19db      	adds	r3, r3, r7
 8004d16:	4ac3      	ldr	r2, [pc, #780]	; (8005024 <f_open+0x344>)
 8004d18:	1952      	adds	r2, r2, r5
 8004d1a:	19d2      	adds	r2, r2, r7
 8004d1c:	7812      	ldrb	r2, [r2, #0]
 8004d1e:	211f      	movs	r1, #31
 8004d20:	400a      	ands	r2, r1
 8004d22:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004d24:	4bbf      	ldr	r3, [pc, #764]	; (8005024 <f_open+0x344>)
 8004d26:	195b      	adds	r3, r3, r5
 8004d28:	19db      	adds	r3, r3, r7
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	4393      	bics	r3, r2
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4ebd      	ldr	r6, [pc, #756]	; (8005028 <f_open+0x348>)
 8004d34:	19bc      	adds	r4, r7, r6
 8004d36:	2308      	movs	r3, #8
 8004d38:	18f9      	adds	r1, r7, r3
 8004d3a:	2320      	movs	r3, #32
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2080      	movs	r0, #128	; 0x80
 8004d40:	0080      	lsls	r0, r0, #2
 8004d42:	4684      	mov	ip, r0
 8004d44:	4463      	add	r3, ip
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7ff fc1e 	bl	8004588 <find_volume>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004d50:	19bb      	adds	r3, r7, r6
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d000      	beq.n	8004d5a <f_open+0x7a>
 8004d58:	e233      	b.n	80051c2 <f_open+0x4e2>
		INIT_BUF(dj);
 8004d5a:	4bb4      	ldr	r3, [pc, #720]	; (800502c <f_open+0x34c>)
 8004d5c:	195a      	adds	r2, r3, r5
 8004d5e:	19d2      	adds	r2, r2, r7
 8004d60:	2386      	movs	r3, #134	; 0x86
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	2114      	movs	r1, #20
 8004d66:	1879      	adds	r1, r7, r1
 8004d68:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	19bc      	adds	r4, r7, r6
 8004d6e:	2320      	movs	r3, #32
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7ff facf 	bl	8004318 <follow_path>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 8004d7e:	4bab      	ldr	r3, [pc, #684]	; (800502c <f_open+0x34c>)
 8004d80:	195b      	adds	r3, r3, r5
 8004d82:	19da      	adds	r2, r3, r7
 8004d84:	2385      	movs	r3, #133	; 0x85
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	58d3      	ldr	r3, [r2, r3]
 8004d8a:	2292      	movs	r2, #146	; 0x92
 8004d8c:	0092      	lsls	r2, r2, #2
 8004d8e:	18b9      	adds	r1, r7, r2
 8004d90:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004d92:	19bb      	adds	r3, r7, r6
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11d      	bne.n	8004dd6 <f_open+0xf6>
			if (!dir)	/* Default directory itself */
 8004d9a:	18bb      	adds	r3, r7, r2
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <f_open+0xca>
				res = FR_INVALID_NAME;
 8004da2:	19bb      	adds	r3, r7, r6
 8004da4:	2206      	movs	r2, #6
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e015      	b.n	8004dd6 <f_open+0xf6>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004daa:	4b9e      	ldr	r3, [pc, #632]	; (8005024 <f_open+0x344>)
 8004dac:	2294      	movs	r2, #148	; 0x94
 8004dae:	0092      	lsls	r2, r2, #2
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	19db      	adds	r3, r3, r7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	4393      	bics	r3, r2
 8004dba:	1e5a      	subs	r2, r3, #1
 8004dbc:	4193      	sbcs	r3, r2
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	4b99      	ldr	r3, [pc, #612]	; (8005028 <f_open+0x348>)
 8004dc4:	18fc      	adds	r4, r7, r3
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	0011      	movs	r1, r2
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7fd ffe1 	bl	8002d94 <chk_lock>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004dd6:	4b93      	ldr	r3, [pc, #588]	; (8005024 <f_open+0x344>)
 8004dd8:	2294      	movs	r2, #148	; 0x94
 8004dda:	0092      	lsls	r2, r2, #2
 8004ddc:	189b      	adds	r3, r3, r2
 8004dde:	19db      	adds	r3, r3, r7
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	221c      	movs	r2, #28
 8004de4:	4013      	ands	r3, r2
 8004de6:	d100      	bne.n	8004dea <f_open+0x10a>
 8004de8:	e106      	b.n	8004ff8 <f_open+0x318>
			if (res != FR_OK) {					/* No file, create new */
 8004dea:	4a8f      	ldr	r2, [pc, #572]	; (8005028 <f_open+0x348>)
 8004dec:	18bb      	adds	r3, r7, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02a      	beq.n	8004e4a <f_open+0x16a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004df4:	18bb      	adds	r3, r7, r2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d10f      	bne.n	8004e1c <f_open+0x13c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004dfc:	f7fe f838 	bl	8002e70 <enq_lock>
 8004e00:	1e03      	subs	r3, r0, #0
 8004e02:	d007      	beq.n	8004e14 <f_open+0x134>
 8004e04:	2320      	movs	r3, #32
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f7ff f93c 	bl	8004086 <dir_register>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	001a      	movs	r2, r3
 8004e12:	e000      	b.n	8004e16 <f_open+0x136>
 8004e14:	2212      	movs	r2, #18
 8004e16:	4b84      	ldr	r3, [pc, #528]	; (8005028 <f_open+0x348>)
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004e1c:	4b81      	ldr	r3, [pc, #516]	; (8005024 <f_open+0x344>)
 8004e1e:	2094      	movs	r0, #148	; 0x94
 8004e20:	0080      	lsls	r0, r0, #2
 8004e22:	181b      	adds	r3, r3, r0
 8004e24:	19db      	adds	r3, r3, r7
 8004e26:	4a7f      	ldr	r2, [pc, #508]	; (8005024 <f_open+0x344>)
 8004e28:	1812      	adds	r2, r2, r0
 8004e2a:	19d2      	adds	r2, r2, r7
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	2108      	movs	r1, #8
 8004e30:	430a      	orrs	r2, r1
 8004e32:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8004e34:	4b7d      	ldr	r3, [pc, #500]	; (800502c <f_open+0x34c>)
 8004e36:	181b      	adds	r3, r3, r0
 8004e38:	19da      	adds	r2, r3, r7
 8004e3a:	2385      	movs	r3, #133	; 0x85
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	58d3      	ldr	r3, [r2, r3]
 8004e40:	2292      	movs	r2, #146	; 0x92
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	18ba      	adds	r2, r7, r2
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e01b      	b.n	8004e82 <f_open+0x1a2>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004e4a:	2392      	movs	r3, #146	; 0x92
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330b      	adds	r3, #11
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	001a      	movs	r2, r3
 8004e58:	2311      	movs	r3, #17
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <f_open+0x188>
					res = FR_DENIED;
 8004e5e:	4b72      	ldr	r3, [pc, #456]	; (8005028 <f_open+0x348>)
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	2207      	movs	r2, #7
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e00c      	b.n	8004e82 <f_open+0x1a2>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004e68:	4b6e      	ldr	r3, [pc, #440]	; (8005024 <f_open+0x344>)
 8004e6a:	2294      	movs	r2, #148	; 0x94
 8004e6c:	0092      	lsls	r2, r2, #2
 8004e6e:	189b      	adds	r3, r3, r2
 8004e70:	19db      	adds	r3, r3, r7
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2204      	movs	r2, #4
 8004e76:	4013      	ands	r3, r2
 8004e78:	d003      	beq.n	8004e82 <f_open+0x1a2>
						res = FR_EXIST;
 8004e7a:	4b6b      	ldr	r3, [pc, #428]	; (8005028 <f_open+0x348>)
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2208      	movs	r2, #8
 8004e80:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004e82:	4869      	ldr	r0, [pc, #420]	; (8005028 <f_open+0x348>)
 8004e84:	183b      	adds	r3, r7, r0
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d000      	beq.n	8004e8e <f_open+0x1ae>
 8004e8c:	e0e7      	b.n	800505e <f_open+0x37e>
 8004e8e:	4b65      	ldr	r3, [pc, #404]	; (8005024 <f_open+0x344>)
 8004e90:	2494      	movs	r4, #148	; 0x94
 8004e92:	00a4      	lsls	r4, r4, #2
 8004e94:	191b      	adds	r3, r3, r4
 8004e96:	19db      	adds	r3, r3, r7
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d100      	bne.n	8004ea2 <f_open+0x1c2>
 8004ea0:	e0dd      	b.n	800505e <f_open+0x37e>
				dw = GET_FATTIME();				/* Created time */
 8004ea2:	f7fd fdcb 	bl	8002a3c <get_fattime>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	2691      	movs	r6, #145	; 0x91
 8004eaa:	00b6      	lsls	r6, r6, #2
 8004eac:	19ba      	adds	r2, r7, r6
 8004eae:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004eb0:	2192      	movs	r1, #146	; 0x92
 8004eb2:	0089      	lsls	r1, r1, #2
 8004eb4:	187b      	adds	r3, r7, r1
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330e      	adds	r3, #14
 8004eba:	19ba      	adds	r2, r7, r6
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	19bb      	adds	r3, r7, r6
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330f      	adds	r3, #15
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	19bb      	adds	r3, r7, r6
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	0c1a      	lsrs	r2, r3, #16
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3310      	adds	r3, #16
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	19bb      	adds	r3, r7, r6
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	0e1a      	lsrs	r2, r3, #24
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3311      	adds	r3, #17
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330b      	adds	r3, #11
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	331c      	adds	r3, #28
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	331d      	adds	r3, #29
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	187b      	adds	r3, r7, r1
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	331e      	adds	r3, #30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	187b      	adds	r3, r7, r1
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	331f      	adds	r3, #31
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004f28:	4b40      	ldr	r3, [pc, #256]	; (800502c <f_open+0x34c>)
 8004f2a:	0025      	movs	r5, r4
 8004f2c:	191b      	adds	r3, r3, r4
 8004f2e:	19da      	adds	r2, r3, r7
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	58d3      	ldr	r3, [r2, r3]
 8004f36:	000c      	movs	r4, r1
 8004f38:	187a      	adds	r2, r7, r1
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	0011      	movs	r1, r2
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f7fe ffeb 	bl	8003f1a <ld_clust>
 8004f44:	0003      	movs	r3, r0
 8004f46:	2190      	movs	r1, #144	; 0x90
 8004f48:	0089      	lsls	r1, r1, #2
 8004f4a:	187a      	adds	r2, r7, r1
 8004f4c:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8004f4e:	193b      	adds	r3, r7, r4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2100      	movs	r1, #0
 8004f54:	0018      	movs	r0, r3
 8004f56:	f7ff f80d 	bl	8003f74 <st_clust>
				dj.fs->wflag = 1;
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <f_open+0x34c>)
 8004f5c:	195b      	adds	r3, r3, r5
 8004f5e:	19da      	adds	r2, r3, r7
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	58d2      	ldr	r2, [r2, r3]
 8004f66:	2381      	movs	r3, #129	; 0x81
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8004f6e:	2190      	movs	r1, #144	; 0x90
 8004f70:	0089      	lsls	r1, r1, #2
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d100      	bne.n	8004f7c <f_open+0x29c>
 8004f7a:	e070      	b.n	800505e <f_open+0x37e>
					dw = dj.fs->winsect;
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <f_open+0x34c>)
 8004f7e:	195b      	adds	r3, r3, r5
 8004f80:	19da      	adds	r2, r3, r7
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	58d2      	ldr	r2, [r2, r3]
 8004f88:	238b      	movs	r3, #139	; 0x8b
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	58d3      	ldr	r3, [r2, r3]
 8004f8e:	19ba      	adds	r2, r7, r6
 8004f90:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8004f92:	4b26      	ldr	r3, [pc, #152]	; (800502c <f_open+0x34c>)
 8004f94:	195b      	adds	r3, r3, r5
 8004f96:	19da      	adds	r2, r3, r7
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	58d3      	ldr	r3, [r2, r3]
 8004f9e:	4822      	ldr	r0, [pc, #136]	; (8005028 <f_open+0x348>)
 8004fa0:	183c      	adds	r4, r7, r0
 8004fa2:	187a      	adds	r2, r7, r1
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7fe fc2f 	bl	800380c <remove_chain>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 8004fb2:	481d      	ldr	r0, [pc, #116]	; (8005028 <f_open+0x348>)
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d150      	bne.n	800505e <f_open+0x37e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <f_open+0x34c>)
 8004fbe:	195b      	adds	r3, r3, r5
 8004fc0:	19da      	adds	r2, r3, r7
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	58d2      	ldr	r2, [r2, r3]
 8004fc8:	2190      	movs	r1, #144	; 0x90
 8004fca:	0089      	lsls	r1, r1, #2
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1e59      	subs	r1, r3, #1
 8004fd2:	2383      	movs	r3, #131	; 0x83
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <f_open+0x34c>)
 8004fda:	195b      	adds	r3, r3, r5
 8004fdc:	19da      	adds	r2, r3, r7
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	58d3      	ldr	r3, [r2, r3]
 8004fe4:	183c      	adds	r4, r7, r0
 8004fe6:	19ba      	adds	r2, r7, r6
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	0011      	movs	r1, r2
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7fe f8e9 	bl	80031c4 <move_window>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	7023      	strb	r3, [r4, #0]
 8004ff6:	e032      	b.n	800505e <f_open+0x37e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8004ff8:	490b      	ldr	r1, [pc, #44]	; (8005028 <f_open+0x348>)
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d12d      	bne.n	800505e <f_open+0x37e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005002:	2392      	movs	r3, #146	; 0x92
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330b      	adds	r3, #11
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	001a      	movs	r2, r3
 8005010:	2310      	movs	r3, #16
 8005012:	4013      	ands	r3, r2
 8005014:	d00c      	beq.n	8005030 <f_open+0x350>
					res = FR_NO_FILE;
 8005016:	187b      	adds	r3, r7, r1
 8005018:	2204      	movs	r2, #4
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e01f      	b.n	800505e <f_open+0x37e>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	fffffdac 	.word	0xfffffdac
 8005024:	fffffdb7 	.word	0xfffffdb7
 8005028:	0000024f 	.word	0x0000024f
 800502c:	fffffdd0 	.word	0xfffffdd0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005030:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <f_open+0x4f4>)
 8005032:	2294      	movs	r2, #148	; 0x94
 8005034:	0092      	lsls	r2, r2, #2
 8005036:	189b      	adds	r3, r3, r2
 8005038:	19db      	adds	r3, r3, r7
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2202      	movs	r2, #2
 800503e:	4013      	ands	r3, r2
 8005040:	d00d      	beq.n	800505e <f_open+0x37e>
 8005042:	2392      	movs	r3, #146	; 0x92
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330b      	adds	r3, #11
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	001a      	movs	r2, r3
 8005050:	2301      	movs	r3, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d003      	beq.n	800505e <f_open+0x37e>
						res = FR_DENIED;
 8005056:	4b60      	ldr	r3, [pc, #384]	; (80051d8 <f_open+0x4f8>)
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	2207      	movs	r2, #7
 800505c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 800505e:	4b5e      	ldr	r3, [pc, #376]	; (80051d8 <f_open+0x4f8>)
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d148      	bne.n	80050fa <f_open+0x41a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005068:	4b5a      	ldr	r3, [pc, #360]	; (80051d4 <f_open+0x4f4>)
 800506a:	2194      	movs	r1, #148	; 0x94
 800506c:	0089      	lsls	r1, r1, #2
 800506e:	185b      	adds	r3, r3, r1
 8005070:	19db      	adds	r3, r3, r7
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2208      	movs	r2, #8
 8005076:	4013      	ands	r3, r2
 8005078:	d009      	beq.n	800508e <f_open+0x3ae>
				mode |= FA__WRITTEN;
 800507a:	4b56      	ldr	r3, [pc, #344]	; (80051d4 <f_open+0x4f4>)
 800507c:	185b      	adds	r3, r3, r1
 800507e:	19db      	adds	r3, r3, r7
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <f_open+0x4f4>)
 8005082:	1852      	adds	r2, r2, r1
 8005084:	19d2      	adds	r2, r2, r7
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	2120      	movs	r1, #32
 800508a:	430a      	orrs	r2, r1
 800508c:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800508e:	4b53      	ldr	r3, [pc, #332]	; (80051dc <f_open+0x4fc>)
 8005090:	2094      	movs	r0, #148	; 0x94
 8005092:	0080      	lsls	r0, r0, #2
 8005094:	181b      	adds	r3, r3, r0
 8005096:	19da      	adds	r2, r3, r7
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	58d2      	ldr	r2, [r2, r3]
 800509e:	238b      	movs	r3, #139	; 0x8b
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	58d1      	ldr	r1, [r2, r3]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	2387      	movs	r3, #135	; 0x87
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	2388      	movs	r3, #136	; 0x88
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	2192      	movs	r1, #146	; 0x92
 80050b4:	0089      	lsls	r1, r1, #2
 80050b6:	1879      	adds	r1, r7, r1
 80050b8:	6809      	ldr	r1, [r1, #0]
 80050ba:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80050bc:	4b45      	ldr	r3, [pc, #276]	; (80051d4 <f_open+0x4f4>)
 80050be:	181b      	adds	r3, r3, r0
 80050c0:	19db      	adds	r3, r3, r7
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	4393      	bics	r3, r2
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	4193      	sbcs	r3, r2
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	001a      	movs	r2, r3
 80050d0:	2320      	movs	r3, #32
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	0011      	movs	r1, r2
 80050d6:	0018      	movs	r0, r3
 80050d8:	f7fd feea 	bl	8002eb0 <inc_lock>
 80050dc:	0001      	movs	r1, r0
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	238a      	movs	r3, #138	; 0x8a
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	238a      	movs	r3, #138	; 0x8a
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	58d3      	ldr	r3, [r2, r3]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <f_open+0x41a>
 80050f2:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <f_open+0x4f8>)
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	2202      	movs	r2, #2
 80050f8:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80050fa:	4b37      	ldr	r3, [pc, #220]	; (80051d8 <f_open+0x4f8>)
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d15e      	bne.n	80051c2 <f_open+0x4e2>
			fp->flag = mode;					/* File access mode */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a33      	ldr	r2, [pc, #204]	; (80051d4 <f_open+0x4f4>)
 8005108:	2594      	movs	r5, #148	; 0x94
 800510a:	00ad      	lsls	r5, r5, #2
 800510c:	1952      	adds	r2, r2, r5
 800510e:	19d2      	adds	r2, r2, r7
 8005110:	4933      	ldr	r1, [pc, #204]	; (80051e0 <f_open+0x500>)
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <f_open+0x504>)
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800511e:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <f_open+0x4fc>)
 8005120:	195b      	adds	r3, r3, r5
 8005122:	19da      	adds	r2, r3, r7
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	58d3      	ldr	r3, [r2, r3]
 800512a:	2492      	movs	r4, #146	; 0x92
 800512c:	00a4      	lsls	r4, r4, #2
 800512e:	193a      	adds	r2, r7, r4
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	0011      	movs	r1, r2
 8005134:	0018      	movs	r0, r3
 8005136:	f7fe fef0 	bl	8003f1a <ld_clust>
 800513a:	0001      	movs	r1, r0
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	2384      	movs	r3, #132	; 0x84
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005144:	0021      	movs	r1, r4
 8005146:	187b      	adds	r3, r7, r1
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	331f      	adds	r3, #31
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	061a      	lsls	r2, r3, #24
 8005150:	187b      	adds	r3, r7, r1
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	331e      	adds	r3, #30
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	4313      	orrs	r3, r2
 800515c:	187a      	adds	r2, r7, r1
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	321d      	adds	r2, #29
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	0212      	lsls	r2, r2, #8
 8005166:	4313      	orrs	r3, r2
 8005168:	187a      	adds	r2, r7, r1
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	321c      	adds	r2, #28
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	4313      	orrs	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	2383      	movs	r3, #131	; 0x83
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	2382      	movs	r3, #130	; 0x82
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	2100      	movs	r1, #0
 8005184:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	2386      	movs	r3, #134	; 0x86
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	2100      	movs	r1, #0
 800518e:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	2389      	movs	r3, #137	; 0x89
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	2100      	movs	r1, #0
 8005198:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <f_open+0x4fc>)
 800519c:	195b      	adds	r3, r3, r5
 800519e:	19da      	adds	r2, r3, r7
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	58d1      	ldr	r1, [r2, r3]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	58d3      	ldr	r3, [r2, r3]
 80051b6:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <f_open+0x500>)
 80051b8:	5a99      	ldrh	r1, [r3, r2]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	2381      	movs	r3, #129	; 0x81
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <f_open+0x4f8>)
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	781b      	ldrb	r3, [r3, #0]
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	2395      	movs	r3, #149	; 0x95
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	449d      	add	sp, r3
 80051d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d4:	fffffdb7 	.word	0xfffffdb7
 80051d8:	0000024f 	.word	0x0000024f
 80051dc:	fffffdd0 	.word	0xfffffdd0
 80051e0:	00000206 	.word	0x00000206
 80051e4:	00000207 	.word	0x00000207

080051e8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80051e8:	b5b0      	push	{r4, r5, r7, lr}
 80051ea:	b08c      	sub	sp, #48	; 0x30
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005200:	251f      	movs	r5, #31
 8005202:	197c      	adds	r4, r7, r5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0018      	movs	r0, r3
 8005208:	f7ff fcdc 	bl	8004bc4 <validate>
 800520c:	0003      	movs	r3, r0
 800520e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005210:	197b      	adds	r3, r7, r5
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <f_read+0x36>
 8005218:	197b      	adds	r3, r7, r5
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	e171      	b.n	8005502 <f_read+0x31a>
	if (fp->err)								/* Check error */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4aba      	ldr	r2, [pc, #744]	; (800550c <f_read+0x324>)
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <f_read+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4ab8      	ldr	r2, [pc, #736]	; (800550c <f_read+0x324>)
 800522c:	5c9b      	ldrb	r3, [r3, r2]
 800522e:	e168      	b.n	8005502 <f_read+0x31a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4ab7      	ldr	r2, [pc, #732]	; (8005510 <f_read+0x328>)
 8005234:	5c9b      	ldrb	r3, [r3, r2]
 8005236:	001a      	movs	r2, r3
 8005238:	2301      	movs	r3, #1
 800523a:	4013      	ands	r3, r2
 800523c:	d101      	bne.n	8005242 <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 800523e:	2307      	movs	r3, #7
 8005240:	e15f      	b.n	8005502 <f_read+0x31a>
	remain = fp->fsize - fp->fptr;
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	2383      	movs	r3, #131	; 0x83
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	58d2      	ldr	r2, [r2, r3]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	2382      	movs	r3, #130	; 0x82
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	58cb      	ldr	r3, [r1, r3]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	429a      	cmp	r2, r3
 800525c:	d800      	bhi.n	8005260 <f_read+0x78>
 800525e:	e14b      	b.n	80054f8 <f_read+0x310>
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005264:	e148      	b.n	80054f8 <f_read+0x310>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	2382      	movs	r3, #130	; 0x82
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	58d3      	ldr	r3, [r2, r3]
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	0ddb      	lsrs	r3, r3, #23
 8005272:	d000      	beq.n	8005276 <f_read+0x8e>
 8005274:	e10b      	b.n	800548e <f_read+0x2a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	2382      	movs	r3, #130	; 0x82
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	58d3      	ldr	r3, [r2, r3]
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	58cb      	ldr	r3, [r1, r3]
 800528a:	49a2      	ldr	r1, [pc, #648]	; (8005514 <f_read+0x32c>)
 800528c:	5c5b      	ldrb	r3, [r3, r1]
 800528e:	3b01      	subs	r3, #1
 8005290:	b2d9      	uxtb	r1, r3
 8005292:	2017      	movs	r0, #23
 8005294:	183b      	adds	r3, r7, r0
 8005296:	400a      	ands	r2, r1
 8005298:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 800529a:	183b      	adds	r3, r7, r0
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d141      	bne.n	8005326 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	2382      	movs	r3, #130	; 0x82
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	58d3      	ldr	r3, [r2, r3]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <f_read+0xd2>
					clst = fp->sclust;			/* Follow from the origin */
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	2384      	movs	r3, #132	; 0x84
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	58d3      	ldr	r3, [r2, r3]
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b8:	e01e      	b.n	80052f8 <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	2389      	movs	r3, #137	; 0x89
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	58d3      	ldr	r3, [r2, r3]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <f_read+0xf6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	2382      	movs	r3, #130	; 0x82
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	58d2      	ldr	r2, [r2, r3]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	0011      	movs	r1, r2
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7fe fbc0 	bl	8003a58 <clmt_clust>
 80052d8:	0003      	movs	r3, r0
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052dc:	e00c      	b.n	80052f8 <f_read+0x110>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	58d0      	ldr	r0, [r2, r3]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	2385      	movs	r3, #133	; 0x85
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	58d3      	ldr	r3, [r2, r3]
 80052ee:	0019      	movs	r1, r3
 80052f0:	f7fe f89c 	bl	800342c <get_fat>
 80052f4:	0003      	movs	r3, r0
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d805      	bhi.n	800530a <f_read+0x122>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a82      	ldr	r2, [pc, #520]	; (800550c <f_read+0x324>)
 8005302:	2102      	movs	r1, #2
 8005304:	5499      	strb	r1, [r3, r2]
 8005306:	2302      	movs	r3, #2
 8005308:	e0fb      	b.n	8005502 <f_read+0x31a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	3301      	adds	r3, #1
 800530e:	d105      	bne.n	800531c <f_read+0x134>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a7e      	ldr	r2, [pc, #504]	; (800550c <f_read+0x324>)
 8005314:	2101      	movs	r1, #1
 8005316:	5499      	strb	r1, [r3, r2]
 8005318:	2301      	movs	r3, #1
 800531a:	e0f2      	b.n	8005502 <f_read+0x31a>
				fp->clust = clst;				/* Update current cluster */
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	2385      	movs	r3, #133	; 0x85
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005324:	50d1      	str	r1, [r2, r3]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	58d0      	ldr	r0, [r2, r3]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	2385      	movs	r3, #133	; 0x85
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	58d3      	ldr	r3, [r2, r3]
 8005336:	0019      	movs	r1, r3
 8005338:	f7fe f854 	bl	80033e4 <clust2sect>
 800533c:	0003      	movs	r3, r0
 800533e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d105      	bne.n	8005352 <f_read+0x16a>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a70      	ldr	r2, [pc, #448]	; (800550c <f_read+0x324>)
 800534a:	2102      	movs	r1, #2
 800534c:	5499      	strb	r1, [r3, r2]
 800534e:	2302      	movs	r3, #2
 8005350:	e0d7      	b.n	8005502 <f_read+0x31a>
			sect += csect;
 8005352:	2017      	movs	r0, #23
 8005354:	183b      	adds	r3, r7, r0
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	18d3      	adds	r3, r2, r3
 800535c:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0a5b      	lsrs	r3, r3, #9
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04c      	beq.n	8005404 <f_read+0x21c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800536a:	183b      	adds	r3, r7, r0
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	18d3      	adds	r3, r2, r3
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	0092      	lsls	r2, r2, #2
 8005378:	588a      	ldr	r2, [r1, r2]
 800537a:	4966      	ldr	r1, [pc, #408]	; (8005514 <f_read+0x32c>)
 800537c:	5c52      	ldrb	r2, [r2, r1]
 800537e:	4293      	cmp	r3, r2
 8005380:	d90a      	bls.n	8005398 <f_read+0x1b0>
					cc = fp->fs->csize - csect;
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	58d3      	ldr	r3, [r2, r3]
 800538a:	4a62      	ldr	r2, [pc, #392]	; (8005514 <f_read+0x32c>)
 800538c:	5c9b      	ldrb	r3, [r3, r2]
 800538e:	001a      	movs	r2, r3
 8005390:	183b      	adds	r3, r7, r0
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	58d3      	ldr	r3, [r2, r3]
 80053a0:	4a5d      	ldr	r2, [pc, #372]	; (8005518 <f_read+0x330>)
 80053a2:	5c98      	ldrb	r0, [r3, r2]
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	f7fd fc07 	bl	8002bbc <disk_read>
 80053ae:	1e03      	subs	r3, r0, #0
 80053b0:	d005      	beq.n	80053be <f_read+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a55      	ldr	r2, [pc, #340]	; (800550c <f_read+0x324>)
 80053b6:	2101      	movs	r1, #1
 80053b8:	5499      	strb	r1, [r3, r2]
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0a1      	b.n	8005502 <f_read+0x31a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a53      	ldr	r2, [pc, #332]	; (8005510 <f_read+0x328>)
 80053c2:	5c9b      	ldrb	r3, [r3, r2]
 80053c4:	001a      	movs	r2, r3
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	4013      	ands	r3, r2
 80053ca:	d017      	beq.n	80053fc <f_read+0x214>
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	2386      	movs	r3, #134	; 0x86
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	58d2      	ldr	r2, [r2, r3]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	429a      	cmp	r2, r3
 80053dc:	d90e      	bls.n	80053fc <f_read+0x214>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	2386      	movs	r3, #134	; 0x86
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	58d2      	ldr	r2, [r2, r3]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	025b      	lsls	r3, r3, #9
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	18d3      	adds	r3, r2, r3
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	0092      	lsls	r2, r2, #2
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fd fc58 	bl	8002cac <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	025b      	lsls	r3, r3, #9
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005402:	e061      	b.n	80054c8 <f_read+0x2e0>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	2386      	movs	r3, #134	; 0x86
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	58d3      	ldr	r3, [r2, r3]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d038      	beq.n	8005484 <f_read+0x29c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a3e      	ldr	r2, [pc, #248]	; (8005510 <f_read+0x328>)
 8005416:	5c9b      	ldrb	r3, [r3, r2]
 8005418:	001a      	movs	r2, r3
 800541a:	2340      	movs	r3, #64	; 0x40
 800541c:	4013      	ands	r3, r2
 800541e:	d01e      	beq.n	800545e <f_read+0x276>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	58d3      	ldr	r3, [r2, r3]
 8005428:	4a3b      	ldr	r2, [pc, #236]	; (8005518 <f_read+0x330>)
 800542a:	5c98      	ldrb	r0, [r3, r2]
 800542c:	68f9      	ldr	r1, [r7, #12]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	2386      	movs	r3, #134	; 0x86
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	58d2      	ldr	r2, [r2, r3]
 8005436:	2301      	movs	r3, #1
 8005438:	f7fd fbe8 	bl	8002c0c <disk_write>
 800543c:	1e03      	subs	r3, r0, #0
 800543e:	d005      	beq.n	800544c <f_read+0x264>
						ABORT(fp->fs, FR_DISK_ERR);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a32      	ldr	r2, [pc, #200]	; (800550c <f_read+0x324>)
 8005444:	2101      	movs	r1, #1
 8005446:	5499      	strb	r1, [r3, r2]
 8005448:	2301      	movs	r3, #1
 800544a:	e05a      	b.n	8005502 <f_read+0x31a>
					fp->flag &= ~FA__DIRTY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a30      	ldr	r2, [pc, #192]	; (8005510 <f_read+0x328>)
 8005450:	5c9b      	ldrb	r3, [r3, r2]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	4393      	bics	r3, r2
 8005456:	b2d9      	uxtb	r1, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <f_read+0x328>)
 800545c:	5499      	strb	r1, [r3, r2]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	58d3      	ldr	r3, [r2, r3]
 8005466:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <f_read+0x330>)
 8005468:	5c98      	ldrb	r0, [r3, r2]
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	2301      	movs	r3, #1
 8005470:	f7fd fba4 	bl	8002bbc <disk_read>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d005      	beq.n	8005484 <f_read+0x29c>
					ABORT(fp->fs, FR_DISK_ERR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a24      	ldr	r2, [pc, #144]	; (800550c <f_read+0x324>)
 800547c:	2101      	movs	r1, #1
 800547e:	5499      	strb	r1, [r3, r2]
 8005480:	2301      	movs	r3, #1
 8005482:	e03e      	b.n	8005502 <f_read+0x31a>
			}
#endif
			fp->dsect = sect;
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	2386      	movs	r3, #134	; 0x86
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	6939      	ldr	r1, [r7, #16]
 800548c:	50d1      	str	r1, [r2, r3]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	2382      	movs	r3, #130	; 0x82
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	58d3      	ldr	r3, [r2, r3]
 8005496:	05db      	lsls	r3, r3, #23
 8005498:	0ddb      	lsrs	r3, r3, #23
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80054a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d901      	bls.n	80054ae <f_read+0x2c6>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	2382      	movs	r3, #130	; 0x82
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	58d3      	ldr	r3, [r2, r3]
 80054b6:	05db      	lsls	r3, r3, #23
 80054b8:	0ddb      	lsrs	r3, r3, #23
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	18d1      	adds	r1, r2, r3
 80054be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7fd fbf2 	bl	8002cac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	18d3      	adds	r3, r2, r3
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	2382      	movs	r3, #130	; 0x82
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	58d2      	ldr	r2, [r2, r3]
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	18d1      	adds	r1, r2, r3
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	2382      	movs	r3, #130	; 0x82
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	50d1      	str	r1, [r2, r3]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	18d2      	adds	r2, r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d000      	beq.n	8005500 <f_read+0x318>
 80054fe:	e6b2      	b.n	8005266 <f_read+0x7e>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005500:	2300      	movs	r3, #0
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	b00c      	add	sp, #48	; 0x30
 8005508:	bdb0      	pop	{r4, r5, r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	00000207 	.word	0x00000207
 8005510:	00000206 	.word	0x00000206
 8005514:	00000202 	.word	0x00000202
 8005518:	00000201 	.word	0x00000201

0800551c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800551c:	b5b0      	push	{r4, r5, r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005534:	2517      	movs	r5, #23
 8005536:	197c      	adds	r4, r7, r5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	0018      	movs	r0, r3
 800553c:	f7ff fb42 	bl	8004bc4 <validate>
 8005540:	0003      	movs	r3, r0
 8005542:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005544:	197b      	adds	r3, r7, r5
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <f_write+0x36>
 800554c:	197b      	adds	r3, r7, r5
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	e1c5      	b.n	80058de <f_write+0x3c2>
	if (fp->err)							/* Check error */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4acf      	ldr	r2, [pc, #828]	; (8005894 <f_write+0x378>)
 8005556:	5c9b      	ldrb	r3, [r3, r2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <f_write+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4acd      	ldr	r2, [pc, #820]	; (8005894 <f_write+0x378>)
 8005560:	5c9b      	ldrb	r3, [r3, r2]
 8005562:	e1bc      	b.n	80058de <f_write+0x3c2>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4acc      	ldr	r2, [pc, #816]	; (8005898 <f_write+0x37c>)
 8005568:	5c9b      	ldrb	r3, [r3, r2]
 800556a:	001a      	movs	r2, r3
 800556c:	2302      	movs	r3, #2
 800556e:	4013      	ands	r3, r2
 8005570:	d101      	bne.n	8005576 <f_write+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005572:	2307      	movs	r3, #7
 8005574:	e1b3      	b.n	80058de <f_write+0x3c2>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	2382      	movs	r3, #130	; 0x82
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	58d2      	ldr	r2, [r2, r3]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	18d2      	adds	r2, r2, r3
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	2382      	movs	r3, #130	; 0x82
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	58cb      	ldr	r3, [r1, r3]
 800558a:	429a      	cmp	r2, r3
 800558c:	d300      	bcc.n	8005590 <f_write+0x74>
 800558e:	e17c      	b.n	800588a <f_write+0x36e>
 8005590:	2300      	movs	r3, #0
 8005592:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005594:	e179      	b.n	800588a <f_write+0x36e>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	2382      	movs	r3, #130	; 0x82
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	58d3      	ldr	r3, [r2, r3]
 800559e:	05db      	lsls	r3, r3, #23
 80055a0:	0ddb      	lsrs	r3, r3, #23
 80055a2:	d000      	beq.n	80055a6 <f_write+0x8a>
 80055a4:	e133      	b.n	800580e <f_write+0x2f2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	2382      	movs	r3, #130	; 0x82
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	58d3      	ldr	r3, [r2, r3]
 80055ae:	0a5b      	lsrs	r3, r3, #9
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	58cb      	ldr	r3, [r1, r3]
 80055ba:	49b8      	ldr	r1, [pc, #736]	; (800589c <f_write+0x380>)
 80055bc:	5c5b      	ldrb	r3, [r3, r1]
 80055be:	3b01      	subs	r3, #1
 80055c0:	b2d9      	uxtb	r1, r3
 80055c2:	2016      	movs	r0, #22
 80055c4:	183b      	adds	r3, r7, r0
 80055c6:	400a      	ands	r2, r1
 80055c8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
 80055ca:	183b      	adds	r3, r7, r0
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d15d      	bne.n	800568e <f_write+0x172>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	2382      	movs	r3, #130	; 0x82
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	58d3      	ldr	r3, [r2, r3]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d112      	bne.n	8005604 <f_write+0xe8>
					clst = fp->sclust;		/* Follow from the origin */
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	2384      	movs	r3, #132	; 0x84
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	58d3      	ldr	r3, [r2, r3]
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d129      	bne.n	8005642 <f_write+0x126>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	58d3      	ldr	r3, [r2, r3]
 80055f6:	2100      	movs	r1, #0
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7fe f977 	bl	80038ec <create_chain>
 80055fe:	0003      	movs	r3, r0
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
 8005602:	e01e      	b.n	8005642 <f_write+0x126>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	2389      	movs	r3, #137	; 0x89
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	58d3      	ldr	r3, [r2, r3]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	2382      	movs	r3, #130	; 0x82
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	58d2      	ldr	r2, [r2, r3]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f7fe fa1b 	bl	8003a58 <clmt_clust>
 8005622:	0003      	movs	r3, r0
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	e00c      	b.n	8005642 <f_write+0x126>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	58d0      	ldr	r0, [r2, r3]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	2385      	movs	r3, #133	; 0x85
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	58d3      	ldr	r3, [r2, r3]
 8005638:	0019      	movs	r1, r3
 800563a:	f7fe f957 	bl	80038ec <create_chain>
 800563e:	0003      	movs	r3, r0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d100      	bne.n	800564a <f_write+0x12e>
 8005648:	e12c      	b.n	80058a4 <f_write+0x388>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <f_write+0x140>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a90      	ldr	r2, [pc, #576]	; (8005894 <f_write+0x378>)
 8005654:	2102      	movs	r1, #2
 8005656:	5499      	strb	r1, [r3, r2]
 8005658:	2302      	movs	r3, #2
 800565a:	e140      	b.n	80058de <f_write+0x3c2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	3301      	adds	r3, #1
 8005660:	d105      	bne.n	800566e <f_write+0x152>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4a8b      	ldr	r2, [pc, #556]	; (8005894 <f_write+0x378>)
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]
 800566a:	2301      	movs	r3, #1
 800566c:	e137      	b.n	80058de <f_write+0x3c2>
				fp->clust = clst;			/* Update current cluster */
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	2385      	movs	r3, #133	; 0x85
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005676:	50d1      	str	r1, [r2, r3]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	2384      	movs	r3, #132	; 0x84
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	58d3      	ldr	r3, [r2, r3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <f_write+0x172>
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	2384      	movs	r3, #132	; 0x84
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568c:	50d1      	str	r1, [r2, r3]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a81      	ldr	r2, [pc, #516]	; (8005898 <f_write+0x37c>)
 8005692:	5c9b      	ldrb	r3, [r3, r2]
 8005694:	001a      	movs	r2, r3
 8005696:	2340      	movs	r3, #64	; 0x40
 8005698:	4013      	ands	r3, r2
 800569a:	d01e      	beq.n	80056da <f_write+0x1be>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	58d3      	ldr	r3, [r2, r3]
 80056a4:	4a7e      	ldr	r2, [pc, #504]	; (80058a0 <f_write+0x384>)
 80056a6:	5c98      	ldrb	r0, [r3, r2]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	2386      	movs	r3, #134	; 0x86
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	58d2      	ldr	r2, [r2, r3]
 80056b2:	2301      	movs	r3, #1
 80056b4:	f7fd faaa 	bl	8002c0c <disk_write>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	d005      	beq.n	80056c8 <f_write+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a75      	ldr	r2, [pc, #468]	; (8005894 <f_write+0x378>)
 80056c0:	2101      	movs	r1, #1
 80056c2:	5499      	strb	r1, [r3, r2]
 80056c4:	2301      	movs	r3, #1
 80056c6:	e10a      	b.n	80058de <f_write+0x3c2>
				fp->flag &= ~FA__DIRTY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a73      	ldr	r2, [pc, #460]	; (8005898 <f_write+0x37c>)
 80056cc:	5c9b      	ldrb	r3, [r3, r2]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	4393      	bics	r3, r2
 80056d2:	b2d9      	uxtb	r1, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a70      	ldr	r2, [pc, #448]	; (8005898 <f_write+0x37c>)
 80056d8:	5499      	strb	r1, [r3, r2]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	58d0      	ldr	r0, [r2, r3]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	2385      	movs	r3, #133	; 0x85
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	58d3      	ldr	r3, [r2, r3]
 80056ea:	0019      	movs	r1, r3
 80056ec:	f7fd fe7a 	bl	80033e4 <clust2sect>
 80056f0:	0003      	movs	r3, r0
 80056f2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d105      	bne.n	8005706 <f_write+0x1ea>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a65      	ldr	r2, [pc, #404]	; (8005894 <f_write+0x378>)
 80056fe:	2102      	movs	r1, #2
 8005700:	5499      	strb	r1, [r3, r2]
 8005702:	2302      	movs	r3, #2
 8005704:	e0eb      	b.n	80058de <f_write+0x3c2>
			sect += csect;
 8005706:	2016      	movs	r0, #22
 8005708:	183b      	adds	r3, r7, r0
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	18d3      	adds	r3, r2, r3
 8005710:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d04e      	beq.n	80057bc <f_write+0x2a0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800571e:	183b      	adds	r3, r7, r0
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	18d3      	adds	r3, r2, r3
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	588a      	ldr	r2, [r1, r2]
 800572e:	495b      	ldr	r1, [pc, #364]	; (800589c <f_write+0x380>)
 8005730:	5c52      	ldrb	r2, [r2, r1]
 8005732:	4293      	cmp	r3, r2
 8005734:	d90a      	bls.n	800574c <f_write+0x230>
					cc = fp->fs->csize - csect;
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	58d3      	ldr	r3, [r2, r3]
 800573e:	4a57      	ldr	r2, [pc, #348]	; (800589c <f_write+0x380>)
 8005740:	5c9b      	ldrb	r3, [r3, r2]
 8005742:	001a      	movs	r2, r3
 8005744:	183b      	adds	r3, r7, r0
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	58d3      	ldr	r3, [r2, r3]
 8005754:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <f_write+0x384>)
 8005756:	5c98      	ldrb	r0, [r3, r2]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	f7fd fa55 	bl	8002c0c <disk_write>
 8005762:	1e03      	subs	r3, r0, #0
 8005764:	d005      	beq.n	8005772 <f_write+0x256>
					ABORT(fp->fs, FR_DISK_ERR);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4a4a      	ldr	r2, [pc, #296]	; (8005894 <f_write+0x378>)
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
 800576e:	2301      	movs	r3, #1
 8005770:	e0b5      	b.n	80058de <f_write+0x3c2>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	2386      	movs	r3, #134	; 0x86
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	58d2      	ldr	r2, [r2, r3]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	429a      	cmp	r2, r3
 8005782:	d917      	bls.n	80057b4 <f_write+0x298>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	2386      	movs	r3, #134	; 0x86
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	58d2      	ldr	r2, [r2, r3]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	025b      	lsls	r3, r3, #9
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	18d3      	adds	r3, r2, r3
 8005798:	2280      	movs	r2, #128	; 0x80
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	0019      	movs	r1, r3
 800579e:	f7fd fa85 	bl	8002cac <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a3c      	ldr	r2, [pc, #240]	; (8005898 <f_write+0x37c>)
 80057a6:	5c9b      	ldrb	r3, [r3, r2]
 80057a8:	2240      	movs	r2, #64	; 0x40
 80057aa:	4393      	bics	r3, r2
 80057ac:	b2d9      	uxtb	r1, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a39      	ldr	r2, [pc, #228]	; (8005898 <f_write+0x37c>)
 80057b2:	5499      	strb	r1, [r3, r2]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	025b      	lsls	r3, r3, #9
 80057b8:	623b      	str	r3, [r7, #32]
				continue;
 80057ba:	e04e      	b.n	800585a <f_write+0x33e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	2386      	movs	r3, #134	; 0x86
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	58d3      	ldr	r3, [r2, r3]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d01c      	beq.n	8005804 <f_write+0x2e8>
				if (fp->fptr < fp->fsize &&
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	2382      	movs	r3, #130	; 0x82
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	58d2      	ldr	r2, [r2, r3]
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	2383      	movs	r3, #131	; 0x83
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	58cb      	ldr	r3, [r1, r3]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d212      	bcs.n	8005804 <f_write+0x2e8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	58d3      	ldr	r3, [r2, r3]
 80057e6:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <f_write+0x384>)
 80057e8:	5c98      	ldrb	r0, [r3, r2]
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	2301      	movs	r3, #1
 80057f0:	f7fd f9e4 	bl	8002bbc <disk_read>
 80057f4:	1e03      	subs	r3, r0, #0
				if (fp->fptr < fp->fsize &&
 80057f6:	d005      	beq.n	8005804 <f_write+0x2e8>
						ABORT(fp->fs, FR_DISK_ERR);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4a26      	ldr	r2, [pc, #152]	; (8005894 <f_write+0x378>)
 80057fc:	2101      	movs	r1, #1
 80057fe:	5499      	strb	r1, [r3, r2]
 8005800:	2301      	movs	r3, #1
 8005802:	e06c      	b.n	80058de <f_write+0x3c2>
			}
#endif
			fp->dsect = sect;
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	2386      	movs	r3, #134	; 0x86
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	50d1      	str	r1, [r2, r3]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	2382      	movs	r3, #130	; 0x82
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	58d3      	ldr	r3, [r2, r3]
 8005816:	05db      	lsls	r3, r3, #23
 8005818:	0ddb      	lsrs	r3, r3, #23
 800581a:	2280      	movs	r2, #128	; 0x80
 800581c:	0092      	lsls	r2, r2, #2
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d901      	bls.n	800582e <f_write+0x312>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	2382      	movs	r3, #130	; 0x82
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	58d3      	ldr	r3, [r2, r3]
 8005836:	05db      	lsls	r3, r3, #23
 8005838:	0ddb      	lsrs	r3, r3, #23
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	18d3      	adds	r3, r2, r3
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	69b9      	ldr	r1, [r7, #24]
 8005842:	0018      	movs	r0, r3
 8005844:	f7fd fa32 	bl	8002cac <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <f_write+0x37c>)
 800584c:	5c9b      	ldrb	r3, [r3, r2]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	4313      	orrs	r3, r2
 8005852:	b2d9      	uxtb	r1, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a10      	ldr	r2, [pc, #64]	; (8005898 <f_write+0x37c>)
 8005858:	5499      	strb	r1, [r3, r2]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	18d3      	adds	r3, r2, r3
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	2382      	movs	r3, #130	; 0x82
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	58d2      	ldr	r2, [r2, r3]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	18d1      	adds	r1, r2, r3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	2382      	movs	r3, #130	; 0x82
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	50d1      	str	r1, [r2, r3]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	18d2      	adds	r2, r2, r3
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d000      	beq.n	8005892 <f_write+0x376>
 8005890:	e681      	b.n	8005596 <f_write+0x7a>
 8005892:	e008      	b.n	80058a6 <f_write+0x38a>
 8005894:	00000207 	.word	0x00000207
 8005898:	00000206 	.word	0x00000206
 800589c:	00000202 	.word	0x00000202
 80058a0:	00000201 	.word	0x00000201
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80058a4:	46c0      	nop			; (mov r8, r8)
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	2382      	movs	r3, #130	; 0x82
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	58d2      	ldr	r2, [r2, r3]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	2383      	movs	r3, #131	; 0x83
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	58cb      	ldr	r3, [r1, r3]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d907      	bls.n	80058ca <f_write+0x3ae>
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	2382      	movs	r3, #130	; 0x82
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	58d1      	ldr	r1, [r2, r3]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	2383      	movs	r3, #131	; 0x83
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	50d1      	str	r1, [r2, r3]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a06      	ldr	r2, [pc, #24]	; (80058e8 <f_write+0x3cc>)
 80058ce:	5c9b      	ldrb	r3, [r3, r2]
 80058d0:	2220      	movs	r2, #32
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b2d9      	uxtb	r1, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a03      	ldr	r2, [pc, #12]	; (80058e8 <f_write+0x3cc>)
 80058da:	5499      	strb	r1, [r3, r2]

	LEAVE_FF(fp->fs, FR_OK);
 80058dc:	2300      	movs	r3, #0
}
 80058de:	0018      	movs	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b00a      	add	sp, #40	; 0x28
 80058e4:	bdb0      	pop	{r4, r5, r7, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	00000206 	.word	0x00000206

080058ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80058f4:	2517      	movs	r5, #23
 80058f6:	197c      	adds	r4, r7, r5
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff f962 	bl	8004bc4 <validate>
 8005900:	0003      	movs	r3, r0
 8005902:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005904:	197b      	adds	r3, r7, r5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d000      	beq.n	800590e <f_sync+0x22>
 800590c:	e0b9      	b.n	8005a82 <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a5f      	ldr	r2, [pc, #380]	; (8005a90 <f_sync+0x1a4>)
 8005912:	5c9b      	ldrb	r3, [r3, r2]
 8005914:	001a      	movs	r2, r3
 8005916:	2320      	movs	r3, #32
 8005918:	4013      	ands	r3, r2
 800591a:	d100      	bne.n	800591e <f_sync+0x32>
 800591c:	e0b1      	b.n	8005a82 <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a5b      	ldr	r2, [pc, #364]	; (8005a90 <f_sync+0x1a4>)
 8005922:	5c9b      	ldrb	r3, [r3, r2]
 8005924:	001a      	movs	r2, r3
 8005926:	2340      	movs	r3, #64	; 0x40
 8005928:	4013      	ands	r3, r2
 800592a:	d01a      	beq.n	8005962 <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	2380      	movs	r3, #128	; 0x80
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	58d3      	ldr	r3, [r2, r3]
 8005934:	4a57      	ldr	r2, [pc, #348]	; (8005a94 <f_sync+0x1a8>)
 8005936:	5c98      	ldrb	r0, [r3, r2]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	2386      	movs	r3, #134	; 0x86
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	58d2      	ldr	r2, [r2, r3]
 8005942:	2301      	movs	r3, #1
 8005944:	f7fd f962 	bl	8002c0c <disk_write>
 8005948:	1e03      	subs	r3, r0, #0
 800594a:	d001      	beq.n	8005950 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800594c:	2301      	movs	r3, #1
 800594e:	e09b      	b.n	8005a88 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a4f      	ldr	r2, [pc, #316]	; (8005a90 <f_sync+0x1a4>)
 8005954:	5c9b      	ldrb	r3, [r3, r2]
 8005956:	2240      	movs	r2, #64	; 0x40
 8005958:	4393      	bics	r3, r2
 800595a:	b2d9      	uxtb	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a4c      	ldr	r2, [pc, #304]	; (8005a90 <f_sync+0x1a4>)
 8005960:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	58d0      	ldr	r0, [r2, r3]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	2387      	movs	r3, #135	; 0x87
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	58d3      	ldr	r3, [r2, r3]
 8005972:	2517      	movs	r5, #23
 8005974:	197c      	adds	r4, r7, r5
 8005976:	0019      	movs	r1, r3
 8005978:	f7fd fc24 	bl	80031c4 <move_window>
 800597c:	0003      	movs	r3, r0
 800597e:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8005980:	002c      	movs	r4, r5
 8005982:	193b      	adds	r3, r7, r4
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d17b      	bne.n	8005a82 <f_sync+0x196>
				dir = fp->dir_ptr;
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	2388      	movs	r3, #136	; 0x88
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	58d3      	ldr	r3, [r2, r3]
 8005992:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	330b      	adds	r3, #11
 8005998:	781a      	ldrb	r2, [r3, #0]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	330b      	adds	r3, #11
 800599e:	2120      	movs	r1, #32
 80059a0:	430a      	orrs	r2, r1
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	2383      	movs	r3, #131	; 0x83
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	58d2      	ldr	r2, [r2, r3]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	331c      	adds	r3, #28
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	2383      	movs	r3, #131	; 0x83
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	58d3      	ldr	r3, [r2, r3]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	331d      	adds	r3, #29
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	2383      	movs	r3, #131	; 0x83
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	58d3      	ldr	r3, [r2, r3]
 80059d4:	0c1a      	lsrs	r2, r3, #16
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	331e      	adds	r3, #30
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	2383      	movs	r3, #131	; 0x83
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	58d3      	ldr	r3, [r2, r3]
 80059e6:	0e1a      	lsrs	r2, r3, #24
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	331f      	adds	r3, #31
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	2384      	movs	r3, #132	; 0x84
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	58d2      	ldr	r2, [r2, r3]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	0011      	movs	r1, r2
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7fe fab9 	bl	8003f74 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005a02:	f7fd f81b 	bl	8002a3c <get_fattime>
 8005a06:	0003      	movs	r3, r0
 8005a08:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3316      	adds	r3, #22
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3317      	adds	r3, #23
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	0c1a      	lsrs	r2, r3, #16
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3318      	adds	r3, #24
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	0e1a      	lsrs	r2, r3, #24
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3319      	adds	r3, #25
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3312      	adds	r3, #18
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3313      	adds	r3, #19
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <f_sync+0x1a4>)
 8005a50:	5c9b      	ldrb	r3, [r3, r2]
 8005a52:	2220      	movs	r2, #32
 8005a54:	4393      	bics	r3, r2
 8005a56:	b2d9      	uxtb	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <f_sync+0x1a4>)
 8005a5c:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	58d2      	ldr	r2, [r2, r3]
 8005a66:	2381      	movs	r3, #129	; 0x81
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	58d3      	ldr	r3, [r2, r3]
 8005a76:	193c      	adds	r4, r7, r4
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7fd fbdf 	bl	800323c <sync_fs>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005a82:	2317      	movs	r3, #23
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	781b      	ldrb	r3, [r3, #0]
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b006      	add	sp, #24
 8005a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a90:	00000206 	.word	0x00000206
 8005a94:	00000201 	.word	0x00000201

08005a98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005a98:	b5b0      	push	{r4, r5, r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005aa0:	250f      	movs	r5, #15
 8005aa2:	197c      	adds	r4, r7, r5
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7ff ff20 	bl	80058ec <f_sync>
 8005aac:	0003      	movs	r3, r0
 8005aae:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8005ab0:	197b      	adds	r3, r7, r5
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d11f      	bne.n	8005af8 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005ab8:	197c      	adds	r4, r7, r5
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7ff f881 	bl	8004bc4 <validate>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005ac6:	0029      	movs	r1, r5
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d113      	bne.n	8005af8 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	238a      	movs	r3, #138	; 0x8a
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	58d3      	ldr	r3, [r2, r3]
 8005ad8:	000d      	movs	r5, r1
 8005ada:	187c      	adds	r4, r7, r1
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7fd fa9f 	bl	8003020 <dec_lock>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8005ae6:	197b      	adds	r3, r7, r5
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	2100      	movs	r1, #0
 8005af6:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005af8:	230f      	movs	r3, #15
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	781b      	ldrb	r3, [r3, #0]
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	1dfb      	adds	r3, r7, #7
 8005b14:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8005b16:	2417      	movs	r4, #23
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8005b1e:	2016      	movs	r0, #22
 8005b20:	183b      	adds	r3, r7, r0
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8005b26:	4b21      	ldr	r3, [pc, #132]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b28:	7a5b      	ldrb	r3, [r3, #9]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d836      	bhi.n	8005b9e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005b30:	4b1e      	ldr	r3, [pc, #120]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b32:	7a5b      	ldrb	r3, [r3, #9]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	001a      	movs	r2, r3
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b40:	7a5b      	ldrb	r3, [r3, #9]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	4a19      	ldr	r2, [pc, #100]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	18d3      	adds	r3, r2, r3
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8005b50:	4b16      	ldr	r3, [pc, #88]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b52:	7a5b      	ldrb	r3, [r3, #9]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	001a      	movs	r2, r3
 8005b58:	4b14      	ldr	r3, [pc, #80]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b5a:	189b      	adds	r3, r3, r2
 8005b5c:	1dfa      	adds	r2, r7, #7
 8005b5e:	7812      	ldrb	r2, [r2, #0]
 8005b60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b64:	7a5b      	ldrb	r3, [r3, #9]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	b2d1      	uxtb	r1, r2
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <FATFS_LinkDriverEx+0xa4>)
 8005b6e:	7251      	strb	r1, [r2, #9]
 8005b70:	183a      	adds	r2, r7, r0
 8005b72:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8005b74:	183b      	adds	r3, r7, r0
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	3330      	adds	r3, #48	; 0x30
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	3301      	adds	r3, #1
 8005b84:	223a      	movs	r2, #58	; 0x3a
 8005b86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	3302      	adds	r3, #2
 8005b8c:	222f      	movs	r2, #47	; 0x2f
 8005b8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	3303      	adds	r3, #3
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b98:	193b      	adds	r3, r7, r4
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8005b9e:	2317      	movs	r3, #23
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
}
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b007      	add	sp, #28
 8005baa:	bd90      	pop	{r4, r7, pc}
 8005bac:	20000558 	.word	0x20000558

08005bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7ff ffa1 	bl	8005b08 <FATFS_LinkDriverEx>
 8005bc6:	0003      	movs	r3, r0
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <__libc_init_array>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	4d0c      	ldr	r5, [pc, #48]	; (8005c08 <__libc_init_array+0x38>)
 8005bd6:	4c0d      	ldr	r4, [pc, #52]	; (8005c0c <__libc_init_array+0x3c>)
 8005bd8:	1b64      	subs	r4, r4, r5
 8005bda:	10a4      	asrs	r4, r4, #2
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	d109      	bne.n	8005bf4 <__libc_init_array+0x24>
 8005be0:	2600      	movs	r6, #0
 8005be2:	f000 f821 	bl	8005c28 <_init>
 8005be6:	4d0a      	ldr	r5, [pc, #40]	; (8005c10 <__libc_init_array+0x40>)
 8005be8:	4c0a      	ldr	r4, [pc, #40]	; (8005c14 <__libc_init_array+0x44>)
 8005bea:	1b64      	subs	r4, r4, r5
 8005bec:	10a4      	asrs	r4, r4, #2
 8005bee:	42a6      	cmp	r6, r4
 8005bf0:	d105      	bne.n	8005bfe <__libc_init_array+0x2e>
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	00b3      	lsls	r3, r6, #2
 8005bf6:	58eb      	ldr	r3, [r5, r3]
 8005bf8:	4798      	blx	r3
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	e7ee      	b.n	8005bdc <__libc_init_array+0xc>
 8005bfe:	00b3      	lsls	r3, r6, #2
 8005c00:	58eb      	ldr	r3, [r5, r3]
 8005c02:	4798      	blx	r3
 8005c04:	3601      	adds	r6, #1
 8005c06:	e7f2      	b.n	8005bee <__libc_init_array+0x1e>
 8005c08:	08005d78 	.word	0x08005d78
 8005c0c:	08005d78 	.word	0x08005d78
 8005c10:	08005d78 	.word	0x08005d78
 8005c14:	08005d7c 	.word	0x08005d7c

08005c18 <memset>:
 8005c18:	0003      	movs	r3, r0
 8005c1a:	1882      	adds	r2, r0, r2
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d100      	bne.n	8005c22 <memset+0xa>
 8005c20:	4770      	bx	lr
 8005c22:	7019      	strb	r1, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	e7f9      	b.n	8005c1c <memset+0x4>

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
